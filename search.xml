<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一齐飞翔</title>
    <url>/20100725/%E4%B8%80%E9%BD%90%E9%A3%9E%E7%BF%94/</url>
    <content><![CDATA[<p>一齐飞翔，作于永州，更新于东莞</p>
<a id="more"></a>
<p class="poem"><br>一齐飞翔<br>作词 张翔<br>作曲 编曲 混音 张东杰<br><br>在这个秋季<br>我们相遇在这里<br>是缘分将你我捆在一起<br>这注定是天意<br>初不相识的我们<br>却感觉 如此熟悉<br>料不到我们将度过三年<br>自信的我们 充满激情<br><br>我们一起带着梦想<br>乘着希望追寻未来<br>无论风风雨雨<br>我始终与你相伴<br>不必害怕前路黑暗<br>我们一起放飞青春的理想<br>道不完我们三年的艰辛<br>让我们张开翅膀 一齐飞翔<br><br>又是个秋季<br>我们重逢在这里<br>是缘分将你我锁在一起<br>这就是命运<br>当初年少的我们<br>还好像 停在昨天<br>岁月抹不掉我们的足迹<br>好想对你说 还记得吗<br><br>我们一起带着梦想<br>乘着希望追寻未来<br>无论风风雨雨<br>我依然与你相伴<br>前路永远不会黑暗<br>我们一起放飞青春的理想<br>道不完我们三年的艰辛<br>让我们张开翅膀 一齐飞翔<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>中国的梦 我们的梦</title>
    <url>/20110129/%E4%B8%AD%E5%9B%BD%E7%9A%84%E6%A2%A6%E6%88%91%E4%BB%AC%E7%9A%84%E6%A2%A6/</url>
    <content><![CDATA[<p>中国的梦 我们的梦，作于永州</p>
<a id="more"></a>
<p class="poem"><br>中国的梦 我们的梦<br>张翔<br><br>我们一直在执着自己的梦<br>跌倒了 不会害怕<br>又站起来 继续前行<br>我们永远都坚持自己的梦<br>受挫了 没有放弃<br>擦干泪水 重新再来<br>每一次失败<br>都离成功更近一步<br>我们一路走来<br>再强的风 再大的雨 再多的坎<br>我们仍然在放飞自己的梦想<br>继续追寻为完成的梦<br>自己的追求<br>自己的梦<br>千万个你我 编织了一个共同的梦<br>我的梦 中国梦<br>中国的梦 我们的梦<br><br>我们一直在执着自己的梦<br>失败了 不会气馁<br>汲取经验 继续尝试<br>我们永远都坚持自己的梦<br>受伤了 没有哭泣<br>擦掉忧伤 再站起来<br>每一次尝试<br>都离梦想更近一步<br>我们一路走来<br>多强的风 多大的雨 多高的坎<br>我们依然在追寻自己的梦想<br>继续实现未完成的梦<br>我们的追求<br>我们的梦<br>千万个你我 编织了一个共同的梦<br>我的梦 中国梦<br>中国的梦 我们的梦<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>昨夜桂花香</title>
    <url>/20110129/%E6%98%A8%E5%A4%9C%E6%A1%82%E8%8A%B1%E9%A6%99/</url>
    <content><![CDATA[<p>昨夜桂花香，作于永州</p>
<a id="more"></a>
<p class="poem"><br>昨夜桂花香<br>张翔<br><br>昨夜传来桂花香<br>还带这一丝你的芬芳<br>有你我不会觉得孤单<br>就这样一直陪你到天亮<br>昨夜闻到桂花香<br>飘逸这一缕你的清淡<br>要带我去到什么地方<br>在这里不会有任何遗憾<br>昨夜听到桂花唱<br>流露这你对未来向往<br>体会这歌声如此清凉<br>在未来会有我和你相伴<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>下锅</title>
    <url>/20110802/%E4%B8%8B%E9%94%85/</url>
    <content><![CDATA[<p>随笔之作，打油诗，作于广州</p>
<a id="more"></a>
<p class="poem"><br>下锅<br>张翔<br><br>几多难过<br>难以下锅<br>思前想后<br>菜成磋砣<br>念剩饭还有几多<br>方觉油盐尚存些许<br>下锅 下锅<br>把剩饭油盐齐下锅<br>一番汗雨烟风<br>一道电光火石<br>三俩锹把饭来炒<br>不多时<br>只见烟雾袅袅<br>有如仙境缥渺<br>方神定 出锅<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>江畔</title>
    <url>/20110802/%E6%B1%9F%E7%95%94/</url>
    <content><![CDATA[<p>江畔，作于广州</p>
<a id="more"></a>
<p class="poem"><br>江畔<br>张翔<br><br>日落天际<br>船只归去<br>虹灯万彩<br>路却难明<br>细听风铃<br>雨声响起<br>此声延绵<br>焉知我心<br>忽闻笛鸣<br>步履不前<br>林边小道<br>可有人行<br>沉醉西风<br>听瑟箫鼓<br>谁人知晓<br>生为何从<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>蹉跎</title>
    <url>/20110802/%E8%B9%89%E8%B7%8E/</url>
    <content><![CDATA[<p>蹉跎，作于广州</p>
<a id="more"></a>
<p class="poem"><br>蹉跎<br>张翔<br><br>一两阵狂风卷过<br>三两滴雨水飘落<br>卷走的是落寞<br>滴下的是难过<br>问世间繁华几多<br>只不过蜃楼海市<br>为官禄年华磋砣<br>又能留得住什么<br>到垂髫方觉<br>人生早已匆匆走过<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>一首简单的歌</title>
    <url>/20120123/%E4%B8%80%E9%A6%96%E7%AE%80%E5%8D%95%E7%9A%84%E6%AD%8C/</url>
    <content><![CDATA[<p>一首简单的歌，作于永州</p>
<a id="more"></a>
<p class="poem"><br>一首简单的歌<br>张翔<br><br>这个世界那么大<br>我有太多的牵挂<br>来到这里那么好<br>是你让我忘不了<br>我还不会说情话<br>只是为你弹吉他<br><br>啦啦 啦啦 啦啦<br>我胡乱唱着这首歌<br>只想你能听到<br><br>哒哒 哒哒 哒哒<br>我踩着零乱的步伐<br>樱花在风中飘洒<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>不想你难过</title>
    <url>/20120123/%E4%B8%8D%E6%83%B3%E4%BD%A0%E9%9A%BE%E8%BF%87/</url>
    <content><![CDATA[<p>不想你难过，作于永州</p>
<a id="more"></a>
<p class="poem"><br>不想你难过<br>张翔<br><br>在你生病的时候<br>我心里也会难过<br>想不到该做些什么<br>傻傻的不知所措<br>你不开心的样子<br>我看到会很心痛<br>安慰的话该怎么说<br>我思考了很多很多<br><br>是我不想让你难过<br>我要带你一起去看日落<br>彩云在空中飘过<br>告诉我未来多美好<br>是我不想让你难过<br>牵着你的手看星星闪烁<br>当流星再次划过<br>我陪你到海枯石沒<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>写给你</title>
    <url>/20120123/%E5%86%99%E7%BB%99%E4%BD%A0/</url>
    <content><![CDATA[<p>写给你，作于永州</p>
<a id="more"></a>
<p class="poem"><br>写给你<br>张翔<br><br>我已不想掩饰下去<br>我知道我骗不了自己<br>即使在梦里<br>看到的还是你<br>对你没有花言巧语<br>我知道伪装不能继续<br>让我告诉你<br>从相识那天起<br><br>你的可爱早就让我着迷<br>每个夜里我都在想你<br>我的诗只写给你<br>我已控制不住爱上你<br>一天看不到你我就会着急<br>弹吉它都没有了旋律<br>我的歌只唱给你<br>才发现已经离不开你<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>开场白</title>
    <url>/20120123/%E5%BC%80%E5%9C%BA%E7%99%BD/</url>
    <content><![CDATA[<p>开场白(初稿)，作于永州</p>
<a id="more"></a>
<p class="poem"><br>开场白<br>张翔<br><br>晨曦中醒来<br>面对大海<br>听到鱼儿的欢快<br>你从家里出来<br>我迫不及待<br>洗脸刷牙打领带<br>一路追你到站台<br>你笑得那么可爱<br>我追得那么蟋蟀<br>别问我为什么追来<br>只因为<br>我想给你一段开场白<br>是你的微笑<br>让我有勇气表白<br>把星星摘下来<br>时光流逝依然还在<br>是你的微笑<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>我做不到</title>
    <url>/20120123/%E6%88%91%E5%81%9A%E4%B8%8D%E5%88%B0/</url>
    <content><![CDATA[<p>我做不到，作于永州</p>
<a id="more"></a>
<p class="poem"><br>我做不到<br>张翔<br><br>人来人往的街道<br>多少人擦肩而过<br>我却回头看着你<br>刚分手的你<br>站在角落里没有哭泣<br>我把安慰的话说给你<br>时间匆匆的流逝<br>我和你走到一起<br>我用心保护着你<br>忽然有一天<br>我的冲动伤害在你心里<br>我的挽留不希望离开你<br>你让我别对你以前那么好<br><br>可是我不明了<br>我把错误一遍一遍检讨<br>人群中把你四处寻找<br>你让我别对你以前那么好<br>可是我做不到<br>我把歌谣在你耳边萦绕<br>渴望回到从前那么好<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>放不下</title>
    <url>/20120123/%E6%94%BE%E4%B8%8D%E4%B8%8B/</url>
    <content><![CDATA[<p>放下三部曲，第一部《放不下》，作于永州</p>
<a id="more"></a>
<p class="poem"><br>放不下<br>张翔<br><br>手中的咖啡已经冷掉<br>我的味蕾遗忘了那种味道<br>你在路上做的记号<br>我正努力寻找<br>蓝色的大海走过多少<br>你的发香风中还可以闻到<br>你说分开似乎太早<br>是我做得不好<br><br>我放不下<br>你已走得更远<br>哭笑的瞬间<br>深深藏在心里面<br>我放不下<br>你已走得更远<br>我把你怀念<br>留在回忆的昨天<br>我又回到了从前<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>来不及说爱你</title>
    <url>/20120123/%E6%9D%A5%E4%B8%8D%E5%8F%8A%E8%AF%B4%E7%88%B1%E4%BD%A0/</url>
    <content><![CDATA[<p>来不及说爱你，作于永州</p>
<a id="more"></a>
<p class="poem"><br>来不及说爱你<br>张翔<br><br>相同的场景<br>熟悉的身影<br>却看不清你的脸<br>只能追寻你的声音<br>你说的昨天<br>我留在今天<br>忘记了你在身边<br>回味你我相识片段<br>时间划下了距离<br>故意不说爱你<br>默默放在心底<br>转角泪水的哭泣<br>想说爱你<br>已来不及<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>梦回缘断</title>
    <url>/20120123/%E6%A2%A6%E5%9B%9E%E7%BC%98%E6%96%AD/</url>
    <content><![CDATA[<p>梦回缘断(初稿)，作于永州</p>
<a id="more"></a>
<p class="poem"><br>梦回缘断<br>张翔<br><br>长剑下只留沧桑<br>疲倦还有所期盼<br>漂泊天涯的路上<br>孤独还有谁相伴<br>那些年少的过往<br>伤怀也无所羁绊<br>离去的人在何方<br>掌中结玉寄愁肠<br><br>当仗剑走天涯<br>我已无所牵挂<br>刀光剑影之下<br>血泪不住流淌<br>染尽三尺百灵<br>仍飘传一曲离殇<br><br>当执杯醉看花<br>落红入泥余香<br>隐世山林无争<br>笑叹世间繁华<br>今生梦回缘断<br>你问我是否能还<br><br>长剑下只留沧桑<br>疲倦还有所期盼<br>漂泊天涯的路上<br>孤独还有谁相伴<br>那些年少的过往<br>伤怀也无所羁绊<br>离去的人在何方<br>掌中结玉寄愁肠<br><br>当仗剑走天涯<br>我已无所牵挂<br>刀光剑影之下<br>血泪不住流淌<br>染尽三尺百灵<br>仍飘传一曲离殇<br><br>当执杯醉看花<br>落红入泥余香<br>隐世山林无争<br>笑叹世间繁华<br>今生梦回缘断<br>我欠你太多难还<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>琴键的温度</title>
    <url>/20120123/%E7%90%B4%E9%94%AE%E7%9A%84%E6%B8%A9%E5%BA%A6/</url>
    <content><![CDATA[<p>琴键的温度，作于永州</p>
<a id="more"></a>
<p class="poem"><br>琴键的温度<br>张翔<br><br>不知道什么时候开始<br>你搭上了钢琴的音轨<br>音乐殿堂之上<br>我遇见了安静的你<br>不知道什么时候开始<br>我爱上了跳动的音符<br>琴弦低声吟唱<br>你带着我的牵绊<br><br>用心倾听<br>我可以听到你所想<br>用心感受<br>我可以体会你心情<br>多么希望<br>让时间停在此刻<br>有我的爱<br>让掌心温度恒在<br><br>忘了是什么时候开始<br>破旧的钢琴看不见你<br>琴房书架之上<br>又见那岑寂的乐谱<br>忘了是什么时候开始<br>弹过的琴键还有温度<br>打开记忆乐谱<br>弹奏出你的音符<br><br>用心倾听<br>我可以听到你所想<br>用心感受<br>我可以体会你心情<br>多么希望<br>让时间停在此刻<br>有我的爱<br>让掌心温度恒在<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>视线</title>
    <url>/20120123/%E8%A7%86%E7%BA%BF/</url>
    <content><![CDATA[<p>视线，作于永州</p>
<a id="more"></a>
<p class="poem"><br>视线<br>张 翔<br><br>你不知道我的难过<br>你也忘里对我的承诺<br>黑色夜空下星星闪烁<br>你问我它在等待什么<br>当流星划过的时候<br>你说再也不会离开我<br>粉色信笺在风中飘落<br>你说你不想再说太多<br><br>我回忆开始的起点<br>熟悉的地方有浮现<br>陌生的茶香 还有芬芳<br>我尝试着 改变结局<br>你转身离去的身影<br>我已看不清你的脸<br>灰色的天空 灰色的眼<br>你消逝在我视线里面<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>餐厅</title>
    <url>/20120225/%E9%A4%90%E5%8E%85/</url>
    <content><![CDATA[<p>餐厅，作于永州</p>
<a id="more"></a>
<p class="poem"><br>餐厅<br>张翔<br><br>我又经过这家餐厅<br>角落里的对话<br>翻译了好几遍<br>你还是没有听清<br>可能 只是有点怀恋<br>还记得你坐在对面<br>那饥饿的样子<br>有点楚楚可怜<br>我看着很是心疼<br>你说 不喜欢那么甜<br>我把它写在手心<br>某一天还会出现<br><br>不想懂得太多<br>只怕会错过<br>只怕会难过<br>只怕还会泪光闪烁<br>却没有一个依托<br>不想失去太多<br>只怕会堕落<br>只怕会冷漠<br>只怕还会再受折磨<br>爱你的阻碍太多<br>来不及跟你述说<br>我只好匆匆走过<br><br>你吃不完的那碗面<br>我不愿意留剩<br>全填在心里面<br>明知道是会吃撑<br>而我 却从没有敷衍<br>陪你微笑的昨天<br>某一天还会出现<br><br>不想懂得太多<br>只怕会错过<br>只怕会难过<br>只怕还会泪光闪烁<br>却没有一个依托<br>不想失去太多<br>只怕会堕落<br>只怕会冷漠<br>只怕还会再受折磨<br>爱你的阻碍太多<br>来不及跟你述说<br>我只好匆匆走过<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>在这里</title>
    <url>/20120226/%E5%9C%A8%E8%BF%99%E9%87%8C/</url>
    <content><![CDATA[<p>在这里，作于永州，2012-2-26 18:30 笔</p>
<a id="more"></a>
<p class="poem"><br>在这里<br>张翔<br><br>写的歌<br>总会带着回忆<br>作着词<br>总会想到别离<br>好多画面 慢慢回忆<br>好多相聚 变成别离<br>遇见你<br>我才有了生气<br>爱上你<br>才相信有奇迹<br>照顾着你 怕会生气<br>和我一起 发现奇迹<br><br>或许拥有 才不会失去<br>或许入迷 才不会出局<br>同样的天气<br>我在等着你<br>或许经历 才懂得珍惜<br>或许这里 不会有结局<br>不一样的情绪<br>我同样爱着这里<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>笔意书情</title>
    <url>/20120226/%E7%AC%94%E6%84%8F%E4%B9%A6%E6%83%85/</url>
    <content><![CDATA[<p>笔意书情（初稿），作于永州</p>
<a id="more"></a>
<p class="poem"><br>笔意书情<br>张翔<br><br>三月春雨<br>江南雨巷等你<br>等南桥老树芽稀<br>朦胧中尚许几丝婉离<br><br>飞雁北去<br>寒引菊香一季<br>数落木萧瑟无迹<br>暮色里秋雨空结愁绪<br><br>携手你春秋<br>湖心亭对弈<br>看你回眸笑意<br>不觉有些痴迷<br>心神牵絆为你<br>执子手相依<br>识月下仙侣<br>与诗文共赏析<br>自抚木琴声余<br>我再次提笔为你<br><br>三月春雨<br>江南雨巷等你<br>等南桥老树芽稀<br>朦胧中尚许几丝婉离<br><br>飞雁北去<br>寒引菊香一季<br>数落木萧瑟无迹<br>暮色里秋雨空结愁绪<br><br>携手你春秋<br>湖心亭对弈<br>看你回眸笑意<br>不觉有些痴迷<br>心神牵絆为你<br>执子手相依<br>识月下仙侣<br>与诗文共赏析<br>自抚木琴声余<br>我再次提笔为你<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>怎么能放下</title>
    <url>/20120227/%E6%80%8E%E4%B9%88%E8%83%BD%E6%94%BE%E4%B8%8B/</url>
    <content><![CDATA[<p>放下三部曲，《怎么能放下》最后一部了，作于永州，2012-02-27 20:12 笔</p>
<a id="more"></a>
<p class="poem"><br>怎么能放下<br>张翔<br><br>你的歌曲编乱了<br>忘记写时刻<br>我想起和你的粉蓝色<br>又哭着笑了<br>钢琴是谁在弹着<br>还是温热的<br>你的琴谱还没完成呢<br>不要忘记了<br>信笺留着 藏着<br>书本里翻到了<br>你说的 甜的 暖的<br>我都记着<br>在一起的快乐<br>是你用音乐播放着<br>说什么 没事了<br>都是骗自己的<br>等待着 回忆着<br>怎么能 放下呢<br>微笑着 泪流着<br>放不下 述说着<br>约定的幸福快乐很难割舍<br>只是回忆的一直那么深刻<br>要怎么忘记呢<br>你冷了 孤单了<br>守护的 是我呢<br>清楚了 明白了<br>放不下 是真的<br>约定的幸福快乐很难割舍<br>只是回忆的一直那么深刻<br>又怎么能忘记呢<br><br></p>

<p>（歌写到这里，放下三部曲写完了。第一部放不下，很难割舍，经历太多太多，这是一段很值得守护，却没有好好珍惜的情感，最后错过了。因为太深刻，所以难以放下。<br>第二部放下，很无奈，不得不放下，选择放下或许会带来更多快乐，所以骗着自己，说着明知道会被拆穿的谎，哭着笑着，真的找不回来了。<br>第三部怎么能放下呢，这一部才成熟，才领悟，才在转角回过头来。）</p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>放下</title>
    <url>/20120227/%E6%94%BE%E4%B8%8B/</url>
    <content><![CDATA[<p>放下三部曲之第二部《放下》，作于永州，2012-02-27 10:15 笔</p>
<a id="more"></a>
<p class="poem"><br>放下<br>张翔<br><br>天使的泪光擦过肩膀<br>短暂的时光选择相伴<br>可能我孤单<br>还不会疗伤<br>才让 自己很难忘<br>飞过的天空留下坚强<br>我一定还要继续飞翔<br>我还在承诺<br>何况那算什么谎<br>就算错过也不怕遗憾<br>我学会放手 放下你才走<br>我说过的<br>爱一个人就不要开口<br>让自己放手<br>所有美好回忆都保留<br>爱到这里我就已足够<br><br>我好久没写这些诗篇<br>没想到笔墨不如从前<br>回味我身旁<br>闻得到你的发香<br>这样一想是有些浪漫<br>我学会放手 放下你才走<br>你知道的<br>在下个路口我还会回头<br>让自己放手<br>所有美好回忆都保留<br>爱到这里我就已足够<br>我就这样放下你才走<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>自弹一曲</title>
    <url>/20120226/%E8%87%AA%E5%BC%B9%E4%B8%80%E6%9B%B2/</url>
    <content><![CDATA[<p>自弹一曲，作于永州</p>
<a id="more"></a>
<p class="poem"><br>自弹一曲<br>张翔<br><br>我切断与世界的所有联系<br>躲在某个角落里<br>偷偷的哭泣<br>泪水掩盖了痕迹<br>却掩盖不了那失声哭啼<br>我逃离的身影是多么无力<br>而你却自弹一曲<br>透露出忧郁<br>让我舍不得离去<br>却又不得不让自己别离<br><br>我告诉自己 要学会珍惜<br>是非对错 要的结果<br>并不是唯一<br>我告诉自己 要学会放弃<br>爱与不爱 你给的温柔<br>我藏在心底<br><br>你坚强的外表很值得怀疑<br>脆弱才是你自己<br>我再弹奏一曲<br>引出你万千思绪<br><br>我告诉自己 要学会珍惜<br>是非对错 要的结果<br>并不是唯一<br>我告诉自己 要学会放弃<br>爱与不爱 你给的温柔<br>我藏在心底<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>天使折翼了</title>
    <url>/20120301/%E5%A4%A9%E4%BD%BF%E6%8A%98%E7%BF%BC%E4%BA%86/</url>
    <content><![CDATA[<p>练习。。《天使，折翼了》，作于永州，2012-03-01 14:52 笔</p>
<a id="more"></a>
<p class="poem"><br>天使折翼了<br>张翔<br><br>你说你不懂我的冷漠<br>伪装起来  不想让你选择太多<br>我自言自语<br>从不嫌罗嗦<br>那些片段  一直藏在某个角落<br>梦远了 爱淡淡的<br>你走了 我独自失落<br><br>爱的画面 我又翻了好几遍<br>伤心却是多几分<br>我望着你离去的身影<br>要到哪里去找寻明天<br>爱的画面 我又翻了好几遍<br>笑容却是短暂间<br>我哭着在拐角等你出现<br>爱在那瞬间变成了永恒<br><br>天使是不是也会承诺<br>该说什么  我还是保持缄默<br>你划过天空<br>是否又错过<br>灰白情节  我选择不再逃脱<br>折翼了 泪水淹没<br>等着天使再次降落<br><br>爱的画面 我又翻了好几遍<br>伤心却是多几分<br>我望着你离去的身影<br>要到哪里去找寻明天<br>爱的画面 我又翻了好几遍<br>笑容却是短暂间<br>我哭着在拐角等你出现<br>爱在那瞬间变成了永恒<br><br></p>

<p><strong>注释</strong><br>罗同啰</p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>简单就好</title>
    <url>/20120301/%E7%AE%80%E5%8D%95%E5%B0%B1%E5%A5%BD/</url>
    <content><![CDATA[<p>练习曲，作于永州，2012-03-01 14:52 笔</p>
<a id="more"></a>
<p class="poem"><br>简单就好<br>张翔<br><br>我唱着老调的歌曲<br>回到了非常古老的地方<br>在哪里 鸟语花香<br>你随着歌声进入梦乡<br>我写着浪漫的歌曲<br>迎着风 飘来阵阵花香<br>细数着 樱花满天<br>你紧紧地贴在我胸膛<br>我明白<br>这路还很长<br>可是有你相依相伴<br>珍重平平淡淡<br><br>我只想要 爱简单就好<br>多一点关怀<br>少一分烦恼<br>某个午后 有我陪伴着<br>你不会感觉无聊<br><br>我只想要 爱简单就好<br>多一份温暖<br>少一次寒潮<br>晴朗阳光 你靠在我肩膀<br>让我们慢慢变老<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>咖啡色</title>
    <url>/20120304/%E5%92%96%E5%95%A1%E8%89%B2/</url>
    <content><![CDATA[<p>情侣。。对唱，作于永州，2012-03-04 11:13 笔</p>
<a id="more"></a>
<p class><br>咖啡色<br>张翔<br><br>男:<br>咖啡的气息还是热的<br>带着泥土颜色<br>你说着味道苦涩<br>不知道尝过后会是甜的<br><br>女:<br>奶茶是草莓加糖泡的<br>染成粉红颜色<br>你说甜了不好喝<br>要知道甜的前面是苦的<br><br>男:<br>我们就这样沉默着（女:没什么说的）<br>无言的对峙（女:被时间留滞）<br>可不可以让我再说一次<br><br>女:<br>你说的话语无伦次（男:分不清主次）<br>淡漠了文字（男:不过是说辞）<br>你却平静说了真的没事<br><br>合:<br>怀念你（我）喜欢的咖啡色<br>恋旧的方式有点独特<br><br>女:<br>爱走了<br><br>男:<br>梦醒了<br>说分开是很容易的<br>除了伤痛还会是什么结果呢<br>怀念你（我）喜欢的粉红色<br>微笑着都是健忘快乐<br><br>男:<br>怎么了<br><br>女:<br>要散了<br>相处并不是简单的<br>爱到最后只能是彼此都忘了<br><br></p>

<p>(作者：这里讲述的是一对情侣在咖啡厅分手都故事，两人的故事，伴随着咖啡的热气散去而慢慢结束，就像明知道结局是咖啡的味道一样。这是世界本身就是一个巨大的矛盾体。奶茶的香甜，是在经历咖啡的苦涩才体现出来的，而咖啡苦涩，在细细品味之后又格外的香甜，这证明“世界本身就是个巨大的矛盾体”因为咖啡和奶茶本身就是个存在地矛盾体……这是在咖啡厅里找到的灵感，因为刚好遇到这件事发生在身边，所以觉得有写一点东西的必要。)</p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>无标题</title>
    <url>/20120415/%E6%97%A0%E6%A0%87%E9%A2%98/</url>
    <content><![CDATA[<p>用《无标题》来诠释。爱已走远，作于永州，2012-04-15 10:30 笔</p>
<a id="more"></a>
<p class="poem"><br>无标题<br>张翔<br><br>总是学不会<br>又在夜里独自喝醉<br>从脸颊划过的泪水<br>匆匆带走了心碎<br>没有思念的谁<br>在枕着黑夜静静入睡<br><br>爱成了累赘<br>彼此相遇变得狼狈<br>雨点在无力的下坠<br>沉默着无以言对<br>忘记了谁的谁<br>也是否已经安然入睡<br><br>没有标题<br>没有回忆<br>没有你留下的笔记<br>在没有标题的世界里<br>找不出来过的痕迹<br>换了标题<br>擦了回忆<br>写了还熟悉的字体<br>再看着平行的空间里<br>时间斑驳了爱的足迹<br>临摹的铅笔<br>再也没有爱的标题<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>声声慢・初春</title>
    <url>/20120417/%E5%A3%B0%E5%A3%B0%E6%85%A2%E5%88%9D%E6%98%A5/</url>
    <content><![CDATA[<p>循李清照之词《声声慢·寻寻觅觅》，写初春，诗。情在心间，作此诗于永州，2012-04-17 17:12 笔</p>
<a id="more"></a>
<p class="poem"><br>声声慢・初春<br>张翔<br><br>寻寻觅觅<br>冷冷清清<br>凄凄惨惨戚戚<br>春暖寒冬初透<br>凉风吹袖<br>三杯两盏淡酒<br>怎解愁<br>醉意正浓<br>余去也<br>叹心头<br>却是无泪相流<br><br>翻教罗裙酒污<br>奏一曲<br>如今有谁听出<br>入风随俗<br>独自怎墨尺牍<br>垂雨更泛轻舟<br>到淇径<br>缠缠绵绵<br>此一生<br>怎一个情字了得<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>无力</title>
    <url>/20120422/%E6%97%A0%E5%8A%9B/</url>
    <content><![CDATA[<p>瞎写的一些文字，作于永州，2012-04-22 14:58 笔</p>
<a id="more"></a>
<p class="poem"><br>无力<br>张翔<br><br>挥舞着铅笔<br>画不出思绪<br>嘈杂的空气<br>让人想发脾气<br>有太多复杂问题<br>快要抓破头皮<br>真的呆不下去<br><br>生活 生活 太多压力<br>大到让人承受不起<br>回到家里 Drink Coffee<br>也变得空虚<br>Sleep 在沙发里<br>生活 生活 没钱没力<br>女朋友也被人泡去<br>都怪自己 No Money<br>无能为力<br>以后别跟钱过不去<br><br>脱掉了外衣<br>Swimming 的自己<br>自由像只 Fish<br>分不清东西<br>对世界无所畏惧<br>怎么能逃离<br>失去氧气快要窒息<br><br>生活 生活 太多压力<br>大到让人承受不起<br>回到家里 Drink Coffee<br>也变得空虚<br>Sleep 在沙发里<br>生活 生活 没钱没力<br>女朋友也被人泡去<br>都怪自己 No Money<br>无能为力<br>以后别跟钱过不去<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>春夏秋冬</title>
    <url>/20120422/%E6%98%A5%E5%A4%8F%E7%A7%8B%E5%86%AC/</url>
    <content><![CDATA[<p>一点点感悟，春夏秋冬，作此诗于永州，2012-04-22 23:24 笔</p>
<a id="more"></a>
<p class="poem"><br>春夏秋冬<br>张翔<br><br>春风又作多情计<br>夏雨滂沱无情地<br>秋霜凉意不遮愁<br>冬雪怎奈梅花意<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>怀念</title>
    <url>/20120618/%E6%80%80%E5%BF%B5/</url>
    <content><![CDATA[<p>《怀念》带着怀念，在静静怀念，作于永州，2012-06-19 00:03 笔</p>
<a id="more"></a>
<p class="poem"><br>怀念<br>张翔<br><br>时间冲淡你笑的画面<br>我用笔尖轻轻去怀念<br>绿茶带着苦涩的咸<br>你忘记了香芋的甜<br>我赶在落幕之前<br>再看看你的身影<br><br>思念又在悄悄的蔓延<br>我抚摸你泛黄的相片<br>怎么也想不起你在身边<br>我只是在怀念<br>是不是再也找不回起点<br><br>你已经远去<br>我还站在原地<br>天空飘起小雨<br>沉默对着结局<br>微笑着<br>眼泪掩饰了情绪<br><br>视线变得模糊<br>你消失在远处<br>散不去的浓雾<br>怎么没有弥补<br>只是我<br>爱得太过仓促<br><br></p>

<p>旁白(爱，是不是太过仓促，才会措手不及。可是，时间却会冲淡一切，渐渐地也抚平或是忘记了留下的痕迹。来过吗？问自己，或许时间已经把记忆删除了。每一首词，都有她背后的故事，有故事，便有人物，谁都可以是主角，谁都也不是主角，里面是词的情感披露，也是叹息……）</p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>雨夜</title>
    <url>/20120725/%E9%9B%A8%E5%A4%9C/</url>
    <content><![CDATA[<p>雨夜，独行，作于永州，2012-07-25 19:41 笔</p>
<a id="more"></a>
<p class="poem"><br>雨夜<br>张翔<br><br>天要下雨了<br>你在哪里呢<br><br>这夜<br>好静 好静<br>只听得到雨的声音<br><br>滴答 滴答<br>雨 停了<br>云 散了<br>我却还撑着伞<br>想把着雨夜留下<br>等你一起漫步<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>淡淡的</title>
    <url>/20130301/%E6%B7%A1%E6%B7%A1%E7%9A%84/</url>
    <content><![CDATA[<p>我们，简简单单，静静的、淡淡的就好，作于永州，2013-03-02 06:57 笔</p>
<a id="more"></a>
<p class="poem"><br>淡淡的<br>张翔<br><br>淡淡的<br>花香飘过我身旁<br>在这美丽的夜晚<br>星空多么明亮<br>照亮了你的脸庞<br>淡淡的<br>洒下一点点月光<br>落在了浅浅河床<br>披上银色衣装<br>像是出嫁的新娘<br>淡淡的<br>琴声在悠悠飘扬<br>不小心撞进心房<br>激起小小波澜<br>我时刻在为你牵绊<br><br>我的爱 淡淡的<br>微微笑着 听你歌唱<br>心意我都知道<br>你不说我都明了<br>爱着你 淡淡的<br>细细听着 甜蜜味道<br>我全部都尝到<br>我这样爱你就好<br><br>淡淡的<br>花香飘过我身旁<br>在这美丽的夜晚<br>星空多么明亮<br>照亮了你的脸庞<br>淡淡的<br>洒下一点点月光<br>落在了浅浅河床<br>披上银色衣装<br>像是出嫁的新娘<br>淡淡的<br>琴声在悠悠飘扬<br>不小心撞进心房<br>激起小小波澜<br>我时刻在为你牵绊<br><br>我的爱 淡淡的<br>微微笑着 听你歌唱<br>心意我都知道<br>你不说我都明了<br>爱着你 淡淡的<br>细细听着 甜蜜味道<br>我全部都尝到<br>我这样爱你就好<br>平平淡淡才最重要<br>和你相伴到老<br><br></p>]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>清晨风・岳麓北</title>
    <url>/20140426/%E6%B8%85%E6%99%A8%E9%A3%8E%E5%B2%B3%E9%BA%93%E5%8C%97/</url>
    <content><![CDATA[<p>雨雾天气登上岳麓山顶，忆容若，《长相思》，作此诗于长沙，2014-04-26 10:00 笔</p>
<a id="more"></a>
<p class="poem"><br>清晨风・岳麓北<br>张翔<br><br>风一程<br>雨一程<br>小街未晴又一程<br>花蝴蝶<br>白蝴蝶<br>醉若汝生迷蝴蝶<br>宵漏青灰<br>玉笛云云<br>许是容若半生缘<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>基于原生JS移动端响应式解决方案——AUTOSTRAP</title>
    <url>/20150819/autostrap/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>就目前移动端而言，已有比较成熟都响应式框架，类似于Bootstrap、AmazeUI、Skeljs。但是对于普通开发者来说，为了满足快速开发的需求去学习和使用这些框架的时间成本是比较高的。所以，本着轻量、快速开发的原则，为大家提供了基于原生JS的移动动端解决方案，希望能在交流、使用中继续优化AutoStrap。</p>
<a id="more"></a>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>目前我们熟悉的开源前端框架都是栅格化布局，通过mediaQuery，在不同分辨率加载不同的css达到响应式的效果。同时还提供了诸多的JS组件供开发者使用。而AutoStrap是使用viewport，以iPhone4分辨率为模板，根据可视宽高调节缩放比例实现。具体内容下面的代码会给出。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="autostrap-js"><a href="#autostrap-js" class="headerlink" title="autostrap.js"></a>autostrap.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment"> * AutoStrap v1.0.0 (http://largesoft.org)</span></span><br><span class="line"><span class="comment"> * Copyright 2015 Vern, Inc.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> g = <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">    h = <span class="built_in">document</span>.documentElement.clientHeight,</span><br><span class="line">    clientWidth = <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">    viewport = <span class="built_in">document</span>.getElementById(<span class="string">"MobileViewport"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isWeixin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = navigator.userAgent.toLowerCase();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"micromessenger"</span> == a.match(<span class="regexp">/MicroMessenger/i</span>) ? !<span class="number">0</span> : !<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> f = <span class="number">1</span>;</span><br><span class="line">    g / h &gt;= <span class="number">320</span> / <span class="number">486</span> ? (f = g / <span class="number">486</span>) : (f = g / <span class="number">320</span>);</span><br><span class="line">    <span class="keyword">if</span>(g == <span class="number">320</span>)&#123;</span><br><span class="line">        f = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    viewport.content = <span class="string">"width=320, initial-scale="</span> + f + <span class="string">", maximum-scale="</span> + f + <span class="string">", user-scalable=no"</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">320</span> != clientWidth &amp;&amp; clientWidth == <span class="built_in">document</span>.documentElement.clientWidth ||</span><br><span class="line">     isWeixin() &amp;&amp; (navigator.userAgent.indexOf(<span class="string">"Android"</span>) &gt; <span class="number">-1</span> ||</span><br><span class="line">      navigator.userAgent.indexOf(<span class="string">"Linux"</span>) &gt; <span class="number">-1</span>)) &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">320</span> / g,</span><br><span class="line">            j = <span class="number">486</span> / h,</span><br><span class="line">            k = <span class="built_in">Math</span>.max(i, j);</span><br><span class="line">        k = k &gt; <span class="number">1</span> ? k : <span class="number">160</span> * k, k = <span class="built_in">parseInt</span>(k), viewport.content= <span class="string">"width=320, target-densitydpi="</span> + k ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">renderPage();</span><br></pre></td></tr></table></figure>
<h3 id="autostrap-css"><a href="#autostrap-css" class="headerlink" title="autostrap.css"></a>autostrap.css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment"> * AutoStrap v1.0.0 (http://largesoft.org)</span></span><br><span class="line"><span class="comment"> * Copyright 2015 Vern, Inc.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, <span class="selector-tag">applet</span>, <span class="selector-tag">object</span>, <span class="selector-tag">iframe</span>,</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">pre</span>,</span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">abbr</span>, <span class="selector-tag">acronym</span>, <span class="selector-tag">address</span>, <span class="selector-tag">big</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">del</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">font</span>, <span class="selector-tag">img</span>, <span class="selector-tag">ins</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">q</span>, <span class="selector-tag">s</span>, <span class="selector-tag">samp</span>,</span><br><span class="line"><span class="selector-tag">small</span>, <span class="selector-tag">strike</span>, <span class="selector-tag">strong</span>, <span class="selector-tag">sub</span>, <span class="selector-tag">sup</span>, <span class="selector-tag">tt</span>, <span class="selector-tag">var</span>,</span><br><span class="line"><span class="selector-tag">b</span>, <span class="selector-tag">u</span>, <span class="selector-tag">i</span>, <span class="selector-tag">center</span>,</span><br><span class="line"><span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">form</span>, <span class="selector-tag">label</span>, <span class="selector-tag">legend</span>,</span><br><span class="line"><span class="selector-tag">table</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">thead</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">        <span class="attribute">background</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">line-height</span>: <span class="number">1</span>; <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">233</span>,<span class="number">233</span>,<span class="number">231</span>,<span class="number">1</span>);&#125;</span><br><span class="line"><span class="selector-tag">body</span> *&#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">320px</span><span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"microsoft yahei"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;<span class="attribute">list-style</span>: none;&#125;</span><br><span class="line"><span class="selector-tag">blockquote</span>, <span class="selector-tag">q</span> &#123;<span class="attribute">quotes</span>: none;&#125;</span><br><span class="line"><span class="selector-tag">blockquote</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">blockquote</span><span class="selector-pseudo">:after</span>,</span><br><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;<span class="attribute">content</span>: <span class="string">''</span>;<span class="attribute">content</span>: none;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* remember to define focus styles! */</span></span><br><span class="line"><span class="selector-pseudo">:focus</span> &#123;<span class="attribute">outline</span>: <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* remember to highlight inserts somehow! */</span></span><br><span class="line"><span class="selector-tag">ins</span> &#123;<span class="attribute">text-decoration</span>: none;&#125;</span><br><span class="line"><span class="selector-tag">del</span> &#123;<span class="attribute">text-decoration</span>: line-through;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* tables still need 'cellspacing="0"' in the markup */</span></span><br><span class="line"><span class="selector-tag">table</span> &#123;<span class="attribute">border-collapse</span>: collapse;<span class="attribute">border-spacing</span>: <span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">hr</span>&#123;<span class="attribute">margin-top</span>: <span class="number">5px</span>;<span class="attribute">margin-bottom</span>: <span class="number">5px</span>;<span class="attribute">border</span>: <span class="number">0</span>;<span class="attribute">border-top</span>: <span class="number">1px</span> dashed <span class="number">#eee</span>;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="html页面引入代码"><a href="#html页面引入代码" class="headerlink" title="html页面引入代码"></a>html页面引入代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">id</span>=<span class="string">"MobileViewport"</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=320, initial-scale=1, maximum-scale=1, user-scalable=no"</span> <span class="attr">servergenerated</span>=<span class="string">"true"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>1、页面引入autostrap.js、autostrap.css文件<br>2、在<head><meta name="generator" content="Hexo 3.9.0">标签里面加入以下代码<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">id</span>=<span class="string">”MobileViewport”</span> <span class="attr">name</span>=<span class="string">”viewport”</span> <span class="attr">content</span>=<span class="string">”width</span>=<span class="string">320,</span> <span class="attr">initial-scale</span>=<span class="string">1,</span> <span class="attr">maximum-scale</span>=<span class="string">1,</span> <span class="attr">user-scalable</span>=<span class="string">no”</span> <span class="attr">servergenerated</span>=<span class="string">”true”</span>&gt;</span></span><br></pre></td></tr></table></figure></head></p>
<h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><p><body>标签内都所以元素都大小不超过320px即可，如果有特殊动画超过320px，将body的overflow属性设为hidden即可</body></p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>个人博客传送门：<a href="http://largesoft.org" target="_blank" rel="noopener">largesoft.org</a>(老博客地址已失效，请前往<a href="https://github.com/tkvern" target="_blank" rel="noopener">https://github.com/tkvern</a>)</p>
]]></content>
      <categories>
        <category>Front-end</category>
      </categories>
      <tags>
        <tag>autostrap</tag>
      </tags>
  </entry>
  <entry>
    <title>七牛云存储使用教程(Ruby-on-Rails-+-JavaScript)</title>
    <url>/20160218/%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B(Ruby-on-Rails-+-JavaScript)/</url>
    <content><![CDATA[<p><img src="/images/cover/qiniubg.png" alt="qiniu"></p>
<h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p>写教程之前不得不吐槽一下<a href="http://developer.qiniu.com/docs/v6/sdk/index.html" target="_blank" rel="noopener">七牛</a>的官方文档，API的说明是很全面，但是读起来超蛋疼。为什么这么说呢，按照我以往的看API的文档都会有示例代码跑起来帮助理解，而七牛的API文档对于刚接触这种第三方服务商SDK的开发者来说不是太友好。建议七牛借鉴下<a href="http://developer.baidu.com/map/index.php?title=jspopular" target="_blank" rel="noopener">百度地图SDK</a>的文档写法。</p>
<a id="more"></a>
<hr>
<h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><p>七牛云存储是一家专注云存储领域的技术公司，提供云存储、云处理、云加速分发一站式服务，持续追求高可靠、高可用、高性能、高响应速度，推动客户健康稳定地快速发展。（前面是广告）</p>
<p>以往开发项目时总会遇到上传文件的问题，譬如上传速度、断点续传、资源服务器部署等等。存在自己的服务器上面，维护成本高。那如何解决这些问题呢，有需求就有市场，云存储应运而生，把这些处理统统放到云存储上，只需要进行API调用即可，而这次我们选中了七牛云存储，便宜，好用，快速。（广告打了一大堆，进入正题吧）</p>
<hr>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>教程正式开始</p>
<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>使用前得先注册一个七牛云存储的账号，<a href="https://portal.qiniu.com/signup" target="_blank" rel="noopener">–&gt;注册传送门&lt;–</a></p>
<h3 id="登录认证"><a href="#登录认证" class="headerlink" title="登录认证"></a>登录认证</h3><p>登录之后查看你的账号身份认证，完成认证解锁更多功能</p>
<h3 id="获取AK-SK-空间域名"><a href="#获取AK-SK-空间域名" class="headerlink" title="获取AK, SK,空间域名"></a>获取AK, SK,空间域名</h3><p>这两个KEY值是用来生成上传凭证的</p>
<h3 id="配置服务器环境"><a href="#配置服务器环境" class="headerlink" title="配置服务器环境"></a>配置服务器环境</h3><p>在使用七牛云存储前我们先要配置好<code>上传凭证</code>的生成环境</p>
<p>代码清单3.6.1: 导入七牛云存储的<code>gem</code>包<br><em><code>Gemfile</code></em><br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">source <span class="string">'https://rubygems.org'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bundle edge Rails instead: gem 'rails', github: 'rails/rails'</span></span><br><span class="line">gem <span class="string">'rails'</span>, <span class="string">'~&gt;4.2.3'</span></span><br><span class="line"><span class="comment"># Use postgresql as the database for Active Record</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">gem <span class="string">'qiniu'</span> <span class="comment">#加入七牛云存储gem包</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure></p>
<p>代码清单3.6.2: 然后重新<code>bundle</code>我们的项目会看到安装了很多<code>gem</code>包</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> bundle install</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">Using qiniu 6.5.1</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">Bundle complete! 17 Gemfile dependencies, 66 gems now installed.</span><br><span class="line">Use `bundle show [gemname]` to see where a bundled gem is installed.</span><br></pre></td></tr></table></figure>
<p>如果有提示安装失败或是无法安装一些国外的镜像可修改<code>Gemfile</code>的源到淘宝源或是自行翻墙，推荐一款翻墙工具<a href="https://shadowsocks.com/" target="_blank" rel="noopener">Shadowsocks</a></p>
<h3 id="配置AccessKey-SecretKey"><a href="#配置AccessKey-SecretKey" class="headerlink" title="配置AccessKey/SecretKey"></a>配置AccessKey/SecretKey</h3><p>代码清单3.7.1: 新建<code>qiniu_sdk.rb</code>文件,将3.3节获取到的AK,SK,空间域名地址输入下面代码<br><em><code>config/initializers/qiniu_sdk.rb</code></em><br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'qiniu'</span></span><br><span class="line"></span><br><span class="line">Qiniu.establish_connection! <span class="symbol">:access_key</span> =&gt; <span class="string">'&lt;输入你的AK&gt;'</span>,</span><br><span class="line">                            <span class="symbol">:secret_key</span> =&gt; <span class="string">'&lt;输入你的SK&gt;'</span></span><br><span class="line"></span><br><span class="line">Rails.application.config.qiniu_domain = <span class="string">"&lt;空间域名地址&gt;"</span></span><br></pre></td></tr></table></figure></p>
<h3 id="生成上传凭证"><a href="#生成上传凭证" class="headerlink" title="生成上传凭证"></a>生成上传凭证</h3><p>代码清单3.8.1: 这个方法我会包装到Helper里面<br><em><code>app/helpers/application_helper.rb</code></em><br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">ApplicationHelper</span></span></span><br><span class="line">  private</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">uptoken</span></span></span><br><span class="line"></span><br><span class="line">      put_policy = Qiniu::Auth::PutPolicy.new(</span><br><span class="line">        <span class="string">"&lt;你的空间名称&gt;"</span>,                    <span class="comment"># 存储空间</span></span><br><span class="line">        <span class="literal">nil</span>,                           <span class="comment"># 最终资源名，可省略，即缺省为“创建”语义</span></span><br><span class="line">        <span class="number">1800</span>,                          <span class="comment"># 相对有效期，可省略，缺省为3600秒后 uptoken 过期</span></span><br><span class="line">        (Time.now + <span class="number">30</span>.minutes).to_i  <span class="comment"># 绝对有效期，可省略，指明 uptoken 过期期限（绝对值），通常用于调试，这里表示半小时</span></span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      uptoken = Qiniu::Auth.generate_uptoken(put_policy) <span class="comment">#生成凭证</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>
<p>到目前为止我们以及完成了服务端的所有配置,当我们的文件上传时,是不经过我们自己的服务器的,由客户端通过Ajax请求七牛的API再将返回的文件名存入我们的服务器。接下来就是客户端的配置</p>
<h3 id="导入七牛JavaScriptSDK"><a href="#导入七牛JavaScriptSDK" class="headerlink" title="导入七牛JavaScriptSDK"></a>导入七牛JavaScriptSDK</h3><p><a href="http://developer.qiniu.com/docs/v6/sdk/javascript-sdk.html" target="_blank" rel="noopener">–&gt;下载JavaScriptSDK传送门&lt;–</a></p>
<p>代码清单3.9.1: 为了代码易于管理我们将七牛的JavaScriptSDK文件放到<em><code>app/assets/javascripts/plugins</code></em>目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- app</span><br><span class="line">  - assets</span><br><span class="line">    + fonts</span><br><span class="line">    + images</span><br><span class="line">    - javascript</span><br><span class="line">      - plugins</span><br><span class="line">        - plupload</span><br><span class="line">            moxie.js</span><br><span class="line">            plupload.dev.js</span><br><span class="line">            plupload.full.min.js</span><br><span class="line">        - qiniu</span><br><span class="line">            qiniu.js</span><br><span class="line">            qiniu.min.js</span><br><span class="line">      application.js</span><br><span class="line">    + stylesheets</span><br></pre></td></tr></table></figure>
<p>代码清单3.9.2: 引用SDK到<code>application.js</code><br><em><code>app/assets/javascripts/application.js</code></em><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// # Place all the behaviors and hooks related to the matching controller here.</span></span><br><span class="line"><span class="comment">// # All this logic will automatically be available in application.js.</span></span><br><span class="line"><span class="comment">// # You can use CoffeeScript in this file: http://coffeescript.org/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//= require plugins/plupload/moxie</span></span><br><span class="line"><span class="comment">//= require plugins/plupload/plupload.dev</span></span><br><span class="line"><span class="comment">//= require plugins/qiniu/qiniu</span></span><br></pre></td></tr></table></figure></p>
<h3 id="初始化javascript"><a href="#初始化javascript" class="headerlink" title="初始化javascript"></a>初始化javascript</h3><p>在完成以上操作之后我们就可以正式使用七牛云存储了</p>
<p>代码清单3.9.3: 在<code>controller</code>中引入<code>helper</code>方法，传入上传凭证<br><em><code>app/controllers/uploads_controller.rb</code></em><br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadsController</span> &lt; ActionController::BaseController</span></span><br><span class="line">  <span class="keyword">include</span> ApplicationHelper</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">    <span class="comment"># 获取上传凭证</span></span><br><span class="line">    @uptoken = uptoken</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>
<p>代码清单3.9.4: 代码清单在视图文件中使用<br><em><code>app/views/upload/index.html.erb</code></em><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 初始化按钮 start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"position: absolute; top: 50px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-lg "</span> <span class="attr">id</span>=<span class="string">"pickfiles"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">style</span>=<span class="string">"position: relative; z-index: 1;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>选择文件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 初始化按钮 end --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 初始化配置 start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> uploader = Qiniu.uploader(&#123;</span></span><br><span class="line"><span class="javascript">    runtimes: <span class="string">'html5,html4'</span>,          <span class="comment">//上传模式,依次退化</span></span></span><br><span class="line"><span class="javascript">    browse_button: <span class="string">'pickfiles'</span>,       <span class="comment">//上传选择的点选按钮，**必需**</span></span></span><br><span class="line"><span class="javascript">    uptoken : <span class="string">'&lt;%= @uptoken %&gt;'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//若未指定uptoken_url,则必须指定 uptoken ,uptoken由其他程序生成</span></span></span><br><span class="line"><span class="javascript">    unique_names: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 默认 false，key为文件名。若开启该选项，SDK会为每个文件自动生成key（文件名）</span></span></span><br><span class="line"><span class="javascript">    save_key: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 默认 false。若在服务端生成uptoken的上传策略中指定了 `sava_key`，则开启，SDK在前端将不对key进行任何处理</span></span></span><br><span class="line"><span class="javascript">    domain: <span class="string">'&lt;%= Rails.application.config.qiniu_domain %&gt;'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//bucket 域名，下载资源时用到，**必需**</span></span></span><br><span class="line"><span class="javascript">    container: <span class="string">'container'</span>,           <span class="comment">//上传区域DOM ID，默认是browser_button的父元素，</span></span></span><br><span class="line"><span class="javascript">    max_file_size: <span class="string">'5mb'</span>,           <span class="comment">//最大文件体积限制</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// flash_swf_url: 'js/plupload/Moxie.swf',  //引入flash,相对路径</span></span></span><br><span class="line"><span class="javascript">    max_retries: <span class="number">3</span>,                   <span class="comment">//上传失败最大重试次数</span></span></span><br><span class="line"><span class="javascript">    dragdrop: <span class="literal">true</span>,                   <span class="comment">//开启可拖曳上传</span></span></span><br><span class="line"><span class="javascript">    drop_element: <span class="string">'container'</span>,        <span class="comment">//拖曳上传区域元素的ID，拖曳文件或文件夹后可触发上传</span></span></span><br><span class="line"><span class="javascript">    chunk_size: <span class="string">'1mb'</span>,                <span class="comment">//分块上传时，每片的体积</span></span></span><br><span class="line"><span class="javascript">    auto_start: <span class="literal">true</span>,                 <span class="comment">//选择文件后自动上传，若关闭需要自己绑定事件触发上传</span></span></span><br><span class="line">    init: &#123;</span><br><span class="line"><span class="javascript">        <span class="string">'FilesAdded'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, files</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            plupload.each(files, <span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 文件添加进队列后,处理相关的事情</span></span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="string">'BeforeUpload'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, file</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="comment">// 每个文件上传前,处理相关的事情</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="string">'UploadProgress'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, file</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="comment">// 每个文件上传时,处理相关的事情</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="string">'FileUploaded'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, file, info</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="comment">// 每个文件上传成功后,处理相关的事情</span></span></span><br><span class="line"><span class="javascript">               <span class="comment">// 其中 info 是文件上传成功后，服务端返回的json，形式如</span></span></span><br><span class="line"><span class="javascript">               <span class="comment">// &#123;</span></span></span><br><span class="line"><span class="javascript">               <span class="comment">//    "hash": "Fh8xVqod2MQ1mocfI4S4KpRL6D98",</span></span></span><br><span class="line"><span class="javascript">               <span class="comment">//    "key": "gogopher.jpg"</span></span></span><br><span class="line"><span class="javascript">               <span class="comment">//  &#125;</span></span></span><br><span class="line"><span class="javascript">               <span class="comment">// 参考http://developer.qiniu.com/docs/v6/api/overview/up/response/simple-response.html</span></span></span><br><span class="line"><span class="javascript">               <span class="keyword">var</span> domain = up.getOption(<span class="string">'domain'</span>);</span></span><br><span class="line"><span class="javascript">               <span class="keyword">var</span> res = $.parseJSON(info);</span></span><br><span class="line"><span class="javascript">               <span class="keyword">var</span> sourceLink = domain + res.key; <span class="comment">//获取上传成功后的文件的Url</span></span></span><br><span class="line"><span class="javascript">               <span class="built_in">console</span>.log(info);</span></span><br><span class="line"><span class="javascript">               <span class="built_in">console</span>.log(sourceLink);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="string">'Error'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, err, errTip</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="comment">//上传出错时,处理相关的事情</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="string">'UploadComplete'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="comment">//队列文件处理完毕后,处理相关的事情</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="string">'Key'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, file</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 若想在前端对每个文件的key进行个性化处理，可以配置该函数</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 该配置必须要在 unique_names: false , save_key: false 时才生效</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> key = <span class="string">""</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// do something with key here</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> key</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 初始化配置 end --&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>代码清单3.9.5: 完成了这么多复杂的操作后终于可以试试效果了，启动Rails服务器看看吧<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> rails server -b $IP -p $PORT</span><br></pre></td></tr></table></figure></p>
<h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>如果教程里面有什么纰漏的地方请给我留言</p>
]]></content>
      <categories>
        <category>Ruby on Rails</category>
      </categories>
      <tags>
        <tag>七牛云存储</tag>
      </tags>
  </entry>
  <entry>
    <title>Gulp构建实例</title>
    <url>/20151210/Gulp%E6%9E%84%E5%BB%BA%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<p><img src="/images/cover/gulpbg.png" alt="gulp"></p>
<h2 id="结构说明"><a href="#结构说明" class="headerlink" title="结构说明"></a>结构说明</h2><p><code>assets</code>项目资源目录，<code>dev</code>开发目录，<code>dist</code>编译输出目录，<code>gulpfile.js</code>自动化工具API</p>
<a id="more"></a>
<h2 id="gulp的使用"><a href="#gulp的使用" class="headerlink" title="gulp的使用"></a>gulp的使用</h2><h3 id="安装node环境-自行goole即可"><a href="#安装node环境-自行goole即可" class="headerlink" title="安装node环境(自行goole即可)"></a>安装node环境(自行goole即可)</h3><h3 id="全局安装gulp"><a href="#全局安装gulp" class="headerlink" title="全局安装gulp"></a>全局安装gulp</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> npm install gulp -g</span><br></pre></td></tr></table></figure>
<h3 id="进入到需要gulp管理的项目路径-如-gulp-再安装一遍"><a href="#进入到需要gulp管理的项目路径-如-gulp-再安装一遍" class="headerlink" title="进入到需要gulp管理的项目路径, 如 /gulp 再安装一遍"></a>进入到需要gulp管理的项目路径, 如 <code>/gulp</code> 再安装一遍</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> npm install gulp --save-dev</span><br></pre></td></tr></table></figure>
<h3 id="安装gulp插件"><a href="#安装gulp插件" class="headerlink" title="安装gulp插件"></a>安装gulp插件</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> npm install --save-dev gulp-ruby-sass gulp-autoprefixer gulp-minify-css gulp-jshint gulp-concat gulp-uglify gulp-imagemin gulp-notify gulp-rename gulp-livereload gulp-cache del</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sass的编译 (<span class="string">`gulp-ruby-sass`</span>)</span><br><span class="line">自动添加css前缀（<span class="string">`gulp-autoprefixer`</span>）</span><br><span class="line">压缩css（<span class="string">`gulp-minify-css`</span>）</span><br><span class="line">js代码校验（<span class="string">`gulp-jshint`</span>）</span><br><span class="line">合并js文件（<span class="string">`gulp-concat`</span>）</span><br><span class="line">压缩js代码（<span class="string">`gulp-uglify`</span>）</span><br><span class="line">压缩图片（<span class="string">`gulp-imagemin`</span>）</span><br><span class="line">自动刷新页面（<span class="string">`gulp-livereload`</span>）</span><br><span class="line">图片缓存，只有图片替换了才压缩（<span class="string">`gulp-cache`</span>）</span><br><span class="line">更改提醒（<span class="string">`gulp-notify`</span>）</span><br><span class="line">清除文件（<span class="string">`del`</span>）</span><br></pre></td></tr></table></figure>
<p>5.运行task任务<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> gulp</span><br></pre></td></tr></table></figure></p>
<p>  监听文档实现实时编译</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> gulp watch</span><br></pre></td></tr></table></figure>
<h3 id="gulp的API请查看gulpfile-js文件"><a href="#gulp的API请查看gulpfile-js文件" class="headerlink" title="gulp的API请查看gulpfile.js文件"></a>gulp的API请查看gulpfile.js文件</h3><h2 id="scss文件规范以及说明"><a href="#scss文件规范以及说明" class="headerlink" title="scss文件规范以及说明"></a>scss文件规范以及说明</h2><h3 id="各个小模块以下划线开头全小写命名"><a href="#各个小模块以下划线开头全小写命名" class="headerlink" title="各个小模块以下划线开头全小写命名"></a>各个小模块以下划线开头全小写命名</h3><p>多单词以 <code>-</code> 符号分隔，总模块正常，以该模块文件夹命名，在其中导入需要的小模块(详细规则请查看<code>font-awesome</code>的scss源码，更多内容google脑补)<br>例：<br><code>_path.scss</code>路径配置文件，<code>_mixins.scss</code>预编译文件，<code>_variables.scss</code>变量定义文件，<code>font-awesome.scss</code>模块导入文件</p>
<h2 id="脚本使用说明"><a href="#脚本使用说明" class="headerlink" title="脚本使用说明"></a>脚本使用说明</h2><h3 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h3><h4 id="error-js"><a href="#error-js" class="headerlink" title="error.js"></a><code>error.js</code></h4><p>用途：低版本浏览器访问限制<br>用法：在<code>head</code>标签中最先引入下列代码<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!--[<span class="keyword">if</span> lt IE <span class="number">9</span>]&gt;</span><br><span class="line">  &lt;script src=<span class="string">"dist/js/error.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="mian-js"><a href="#mian-js" class="headerlink" title="mian.js"></a><code>mian.js</code></h4><p>用途：javascript入口文件负责渲染数据处理交互<br>用法：引入即可，涉及模块较多后续完善模块说明</p>
<h4 id="date-js"><a href="#date-js" class="headerlink" title="date.js"></a><code>date.js</code></h4><p>用途：解析处理日期数据，支持多种日期格式<br>用法：调用<code>Date</code>方法<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Date</span>.today()                    <span class="comment">// Returns today's date, with time set to 00:00 (start of day).</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>.today().next().friday()    <span class="comment">// Returns the date of the next Friday.</span></span><br><span class="line"><span class="built_in">Date</span>.today().last().monday()    <span class="comment">// Returns the date of the previous Monday.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().next().march()       <span class="comment">// Returns the date of the next March.</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().last().week()        <span class="comment">// Returns the date one week ago. </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>.today().is().friday()      <span class="comment">// Returns true|false if the day-of-week matches.</span></span><br><span class="line"><span class="built_in">Date</span>.today().is().fri()         <span class="comment">// Abbreviated day names. </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>.today().is().november()    <span class="comment">// Month names.</span></span><br><span class="line"><span class="built_in">Date</span>.today().is().nov()         <span class="comment">// Abbreviated month names.</span></span><br></pre></td></tr></table></figure></p>
<h4 id="daterange-picker-js"><a href="#daterange-picker-js" class="headerlink" title="daterange-picker.js"></a><code>daterange-picker.js</code></h4><p>用途：基于bootstrapt的日期范围选择器</p>
<h4 id="modernizr-custom-js"><a href="#modernizr-custom-js" class="headerlink" title="modernizr.custom.js"></a><code>modernizr.custom.js</code></h4><p>用途：提供过渡动画支持</p>
<h3 id="jQuery组件"><a href="#jQuery组件" class="headerlink" title="jQuery组件"></a>jQuery组件</h3><h4 id="jquery-bootstrap-wizard-js"><a href="#jquery-bootstrap-wizard-js" class="headerlink" title="jquery.bootstrap.wizard.js"></a><code>jquery.bootstrap.wizard.js</code></h4><p>用途：基于jQuery的Bootstrap向导式插件</p>
<h4 id="jquery-dataTables-js"><a href="#jquery-dataTables-js" class="headerlink" title="jquery.dataTables.js"></a><code>jquery.dataTables.js</code></h4><p>用途：表格处理插件，包括排序分页，宽度自动处理<br>用法：引入后，以下结构绘制表格<br>例：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span> <span class="attr">id</span>=<span class="string">"dataTable1"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"check-header"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"checkAll"</span> <span class="attr">name</span>=<span class="string">"checkAll"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>字段1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>字段2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>字段3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>字段4<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>字段5<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>字段6<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line">	...</span><br><span class="line">	...</span><br><span class="line">	<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    根据ID初始化表格，以下 .table 类用于实现单选和多选</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="string">"#dataTable1"</span>).dataTable(&#123;</span><br><span class="line">  <span class="string">"sPaginationType"</span>: <span class="string">"full_numbers"</span>,</span><br><span class="line">  aoColumnDefs: [</span><br><span class="line">    &#123;</span><br><span class="line">      bSortable: <span class="literal">false</span>,</span><br><span class="line">      aTargets: [<span class="number">0</span>, <span class="number">-1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">'.table'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $(<span class="string">".table #checkAll"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($(<span class="string">".table #checkAll"</span>).is(<span class="string">":checked"</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> $(<span class="string">".table input[type=checkbox]"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $(<span class="keyword">this</span>).prop(<span class="string">"checked"</span>, <span class="literal">true</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> $(<span class="string">".table input[type=checkbox]"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $(<span class="keyword">this</span>).prop(<span class="string">"checked"</span>, <span class="literal">false</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="jquery-easy-pie-chart-js"><a href="#jquery-easy-pie-chart-js" class="headerlink" title="jquery.easy-pie-chart.js"></a><code>jquery.easy-pie-chart.js</code></h4><p>用途：饼状图绘制工具<br>用法：引入文件后，按ID初始化DOM元素<br>传送门：<a href="http://rendro.github.io/easy-pie-chart/?utm_source=jquer.in&amp;utm_medium=website&amp;utm_campaign=content-curation" target="_blank" rel="noopener">rendro.github.io</a><br>例：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Donut Charts --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"widget-container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"heading"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-bar-chart"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 优惠券使用率</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"widget-content clearfix"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-4"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pie-chart1 pie-chart pie-number easyPieChart"</span> <span class="attr">data-percent</span>=<span class="string">"60"</span> <span class="attr">style</span>=<span class="string">"width: 200px; height: 200px; line-height: 200px;"</span>&gt;</span></span><br><span class="line">        60%</span><br><span class="line">      <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"h6"</span>&gt;</span>总使用率<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-4"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pie-chart2 pie-chart pie-number easyPieChart"</span> <span class="attr">data-percent</span>=<span class="string">"86"</span> <span class="attr">style</span>=<span class="string">"width: 200px; height: 200px; line-height: 200px;"</span>&gt;</span></span><br><span class="line">        86%</span><br><span class="line">      <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"h6"</span>&gt;</span>代金券使用率<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-4"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pie-chart3 pie-chart pie-number easyPieChart"</span> <span class="attr">data-percent</span>=<span class="string">"34"</span> <span class="attr">style</span>=<span class="string">"width: 200px; height: 200px; line-height: 200px;"</span>&gt;</span></span><br><span class="line">        34%</span><br><span class="line">      <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"h6"</span>&gt;</span>折扣券使用率<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- end Donut Charts --&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment">#   Easy Pie Chart</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*  &gt;60%          #81e970   green</span></span><br><span class="line"><span class="comment">    &gt;=30% &amp; &lt;=60% #fab43b   yellow</span></span><br><span class="line"><span class="comment">    &lt;30%          #f46f50   red</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    size        图型大小</span></span><br><span class="line"><span class="comment">    lineWidth   线宽</span></span><br><span class="line"><span class="comment">    lineCap     线类型</span></span><br><span class="line"><span class="comment">    barColor    线颜色</span></span><br><span class="line"><span class="comment">    animate     动画速度</span></span><br><span class="line"><span class="comment">    scaleColor  选择色</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="string">".pie-chart1"</span>).easyPieChart(&#123;</span><br><span class="line">  size: <span class="number">200</span>,</span><br><span class="line">  lineWidth: <span class="number">12</span>,</span><br><span class="line">  lineCap: <span class="string">"square"</span>,</span><br><span class="line">  barColor: <span class="string">"#81e970"</span>,</span><br><span class="line">  animate: <span class="number">800</span>,</span><br><span class="line">  scaleColor: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">".pie-chart2"</span>).easyPieChart(&#123;</span><br><span class="line">  size: <span class="number">200</span>,</span><br><span class="line">  lineWidth: <span class="number">12</span>,</span><br><span class="line">  lineCap: <span class="string">"square"</span>,</span><br><span class="line">  barColor: <span class="string">"#81e970"</span>,</span><br><span class="line">  animate: <span class="number">800</span>,</span><br><span class="line">  scaleColor: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">".pie-chart3"</span>).easyPieChart(&#123;</span><br><span class="line">  size: <span class="number">200</span>,</span><br><span class="line">  lineWidth: <span class="number">12</span>,</span><br><span class="line">  lineCap: <span class="string">"square"</span>,</span><br><span class="line">  barColor: <span class="string">"#f46f50"</span>,</span><br><span class="line">  animate: <span class="number">800</span>,</span><br><span class="line">  scaleColor: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="jquery-sparkline-js"><a href="#jquery-sparkline-js" class="headerlink" title="jquery.sparkline.js"></a><code>jquery.sparkline.js</code></h4><p>用途：canvas图表绘制工具<br>用法：引入后按ID初始化，<code>ul</code>部分为横轴坐标，可在style.scss文件中配置宽度<br>传送门：<a href="http://omnipotent.net/jquery.sparkline/#s-docs" target="_blank" rel="noopener">omnipotent.net</a><br>例：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"widget-container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"heading"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-area-chart"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 日活跃用户</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"widget-content padded"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chart-graph line-chart"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"linechart-2-1"</span>&gt;</span><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"619"</span> <span class="attr">height</span>=<span class="string">"226"</span> <span class="attr">style</span>=<span class="string">"display: inline-block; width: 619px; height: 226px; vertical-align: top;"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"chart-text-axis day"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          5</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          10</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          15</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          20</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          25</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- end Line Chart --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> linechartResize;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    $(id).sparkline([number1, number2， ... ...],&#123;</span></span><br><span class="line"><span class="comment">        options</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    type:                       线类型</span></span><br><span class="line"><span class="comment">    width:                      宽度</span></span><br><span class="line"><span class="comment">    height:                     高度</span></span><br><span class="line"><span class="comment">    lineColor:                  线颜色</span></span><br><span class="line"><span class="comment">    fillColor:                  填充色</span></span><br><span class="line"><span class="comment">    lineWidth:                  线宽</span></span><br><span class="line"><span class="comment">    spotColor:                  点色</span></span><br><span class="line"><span class="comment">    minSpotColor:               最小点色</span></span><br><span class="line"><span class="comment">    maxSpotColor:               最大点色</span></span><br><span class="line"><span class="comment">    highlightSpotColor:         高亮点色</span></span><br><span class="line"><span class="comment">    highlightLineColor:         高亮线色</span></span><br><span class="line"><span class="comment">    spotRadius:                 点半径</span></span><br><span class="line"><span class="comment">    chartRangeMin:              图最小范围</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  linechartResize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#linechart-1"</span>).sparkline([<span class="number">160</span>, <span class="number">240</span>, <span class="number">120</span>, <span class="number">200</span>, <span class="number">230</span>, <span class="number">180</span>, <span class="number">350</span>, <span class="number">230</span>, <span class="number">200</span>, <span class="number">280</span>, <span class="number">380</span>, <span class="number">400</span>, <span class="number">360</span>, <span class="number">300</span>, <span class="number">220</span>, <span class="number">200</span>, <span class="number">150</span>, <span class="number">40</span>, <span class="number">70</span>, <span class="number">180</span>, <span class="number">110</span>,<span class="number">200</span>, <span class="number">160</span>, <span class="number">200</span>, <span class="number">220</span>, <span class="number">350</span>, <span class="number">230</span>, <span class="number">200</span>, <span class="number">280</span>, <span class="number">380</span>, <span class="number">70</span>], &#123;</span><br><span class="line">      type: <span class="string">"line"</span>,</span><br><span class="line">      width: <span class="string">"100%"</span>,</span><br><span class="line">      height: <span class="string">"226"</span>,</span><br><span class="line">      lineColor: <span class="string">"#a5e1ff"</span>,</span><br><span class="line">      fillColor: <span class="string">"rgba(241, 251, 255, 0.9)"</span>,</span><br><span class="line">      lineWidth: <span class="number">2</span>,</span><br><span class="line">      spotColor: <span class="string">"#a5e1ff"</span>,</span><br><span class="line">      minSpotColor: <span class="string">"#bee3f6"</span>,</span><br><span class="line">      maxSpotColor: <span class="string">"#a5e1ff"</span>,</span><br><span class="line">      highlightSpotColor: <span class="string">"#80cff4"</span>,</span><br><span class="line">      highlightLineColor: <span class="string">"#cccccc"</span>,</span><br><span class="line">      spotRadius: <span class="number">6</span>,</span><br><span class="line">      chartRangeMin: <span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="jquery-validate-js"><a href="#jquery-validate-js" class="headerlink" title="jquery.validate.js"></a><code>jquery.validate.js</code></h4><p>用途：表单验证插件<br>用法：添加DOM元素自定义属性(具体内容见官方API)<br>传送门：<a href="http://jqueryvalidation.org/" target="_blank" rel="noopener">jqueryvalidation.org</a><br>例:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">(1)required:true               必输字段</span><br><span class="line">(2)remote:"check.php"          使用ajax方法调用check.php验证输入值</span><br><span class="line">(3)email:true                  必须输入正确格式的电子邮件</span><br><span class="line">(4)url:true                    必须输入正确格式的网址</span><br><span class="line">(5)date:true                   必须输入正确格式的日期</span><br><span class="line">(6)dateISO:true                必须输入正确格式的日期(ISO)，例如：2009-06-23，1998/01/22 只验证格式，不验证有效性</span><br><span class="line">(7)number:true                 必须输入合法的数字(负数，小数)</span><br><span class="line">(8)digits:true                 必须输入整数</span><br><span class="line">(9)creditcard:                 必须输入合法的信用卡号</span><br><span class="line">(10)equalTo:"#field"           输入值必须和#field相同</span><br><span class="line">(11)accept:                    输入拥有合法后缀名的字符串（上传文件的后缀）</span><br><span class="line">(12)maxlength:5                输入长度最多是5的字符串(汉字算一个字符)</span><br><span class="line">(13)minlength:10               输入长度最小是10的字符串(汉字算一个字符)</span><br><span class="line">(14)rangelength:[5,10]         输入长度必须介于 5 和 10 之间的字符串")(汉字算一个字符)</span><br><span class="line">(15)range:[5,10]               输入值必须介于 5 和 10 之间</span><br><span class="line">(16)max:5                      输入值不能大于5</span><br><span class="line">(17)min:10                     输入值不能小于10</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Front-end</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>wysiwyg-rails-编辑器支援七牛云存储</title>
    <url>/20160320/wysiwyg-rails-%E7%BC%96%E8%BE%91%E5%99%A8%E6%94%AF%E6%8F%B4%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<p><img src="/images/cover/froalabg.png" alt="froala"><br><a href="https://github.com/tkvern/wysiwyg-rails-qiniu" target="_blank" rel="noopener">wysiwyg-rails-qiniu</a> 是基于 <a href="https://rubygems.org/gems/wysiwyg-rails" target="_blank" rel="noopener">wysiwyg-rails</a>制作, 上传的资源直接支持七牛云存储<br>在使用该gem包前,你得会使用七牛云存储<br>传送门: <a href="https://ruby-china.org/topics/29010" target="_blank" rel="noopener">Rails 进阶—— 云存储实战</a><br><a id="more"></a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>添加下面代码到你的 Gemfile:</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">gem <span class="string">"wysiwyg-rails-qiniu"</span></span><br></pre></td></tr></table></figure>
<p>然后运行 <code>bundle install</code>.</p>
<h2 id="将资源文件加入到你的-assets目录"><a href="#将资源文件加入到你的-assets目录" class="headerlink" title="将资源文件加入到你的 assets目录"></a>将资源文件加入到你的 <code>assets</code>目录</h2><p>在你的 <code>application.css</code> 文件中, 引入下列文件:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *= require froala_editor.min.css</span></span><br><span class="line"><span class="comment"> *= require froala_style.min.css</span></span><br><span class="line"><span class="comment"> *= require font-awesome</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>如果你想使用黑色主题, 你可以加入 <code>themes/dark.min.css</code> 到<code>application.css</code>文件中.</p>
<p>在你的 <code>application.js</code>, 引入以下文件:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//= require froala_editor.min.js</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure>
<p>如果你想使用更多功能插件 <a href="https://froala.com/wysiwyg-editor/docs/plugins" target="_blank" rel="noopener">Available Plugins</a>, 你应该将下面的这些文件加入的 <code>application.js</code> 和 <code>application.css</code>.<br>其中<code>support_qiniu.min.js</code>是必须要引入的,否则无法使用七牛云存储<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Include other plugins.</span></span><br><span class="line"><span class="comment">//= require plugins/support_qiniu.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/align.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/char_counter.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/code_beautifier.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/code_view.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/colors.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/emoticons.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/entities.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/file.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/font_family.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/font_size.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/fullscreen.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/image.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/image_manager.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/inline_style.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/line_breaker.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/link.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/lists.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/paragraph_format.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/paragraph_style.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/quick_insert.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/quote.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/save.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/table.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/url.min.js</span></span><br><span class="line"><span class="comment">//= require plugins/video.min.js</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *= require plugins/char_counter.min.css</span></span><br><span class="line"><span class="comment"> *= require plugins/code_view.min.css</span></span><br><span class="line"><span class="comment"> *= require plugins/colors.min.css</span></span><br><span class="line"><span class="comment"> *= require plugins/emoticons.min.css</span></span><br><span class="line"><span class="comment"> *= require plugins/file.min.css</span></span><br><span class="line"><span class="comment"> *= require plugins/fullscreen.min.css</span></span><br><span class="line"><span class="comment"> *= require plugins/image_manager.min.css</span></span><br><span class="line"><span class="comment"> *= require plugins/image.min.css</span></span><br><span class="line"><span class="comment"> *= require plugins/line_breaker.min.css</span></span><br><span class="line"><span class="comment"> *= require plugins/quick_insert.min.css</span></span><br><span class="line"><span class="comment"> *= require plugins/table.min.css</span></span><br><span class="line"><span class="comment"> *= require plugins/video.min.css</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>同样的,如果你要使用中文语言包,请加入响应的js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Include Language if needed</span></span><br><span class="line"><span class="comment">//= require languages/zh_cn.js</span></span><br></pre></td></tr></table></figure>
<p>到目前位置你已经配置好编辑的基本资源,你需要重启rails服务器</p>
<h2 id="初始化编辑器"><a href="#初始化编辑器" class="headerlink" title="初始化编辑器"></a>初始化编辑器</h2><p>详细文档请参见作者官网,提供了初始化代码 <a href="https://www.froala.com/wysiwyg-editor/docs" target="_blank" rel="noopener">Froala WYSIWYG Editor official documentation</a>.</p>
<p>这里提供部分示例代码, 在使用下面代码之前你应该需要知道如何生成七牛上传凭证<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'#edit'</span>).froalaEditor(&#123;</span><br><span class="line">    language: <span class="string">"zh_cn"</span>,</span><br><span class="line">    width: <span class="number">900</span>,</span><br><span class="line">    heightMin: <span class="number">300</span>,</span><br><span class="line">    heightMax: <span class="number">500</span>,</span><br><span class="line">    requestWithCORS: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片上传配置(必须)</span></span><br><span class="line">    imageUploadDomain: <span class="string">"&lt;%= Rails.application.config.qiniu_domain %&gt;"</span>,    <span class="comment">//七牛云存储空间域名地址</span></span><br><span class="line">    imageUploadParam: <span class="string">'file'</span>,</span><br><span class="line">    imageUploadURL: <span class="string">'http://upload.qiniu.com'</span>,                            <span class="comment">//七牛上传服务器, 如果是海外服务器为 http://up.qiniu.com</span></span><br><span class="line">    imageUploadParams: &#123; <span class="attr">token</span>: <span class="string">'&lt;%= @uptoken %&gt;'</span>&#125;,                       <span class="comment">//上传凭证, 详细规则查看七牛官方文档</span></span><br><span class="line">    imageUploadMethod: <span class="string">'POST'</span>,</span><br><span class="line">    imageMaxSize: <span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span>,</span><br><span class="line">    imageAllowedTypes: [<span class="string">'jpeg'</span>, <span class="string">'jpg'</span>, <span class="string">'png'</span>],</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//文件上传配置(必须)</span></span><br><span class="line">    fileUploadDomain: <span class="string">"&lt;%= Rails.application.config.qiniu_domain %&gt;"</span>,     <span class="comment">//七牛云存储空间域名地址</span></span><br><span class="line">    fileUploadParam: <span class="string">'file'</span>,</span><br><span class="line">    fileUploadURL: <span class="string">'http://upload.qiniu.com'</span>,                             <span class="comment">//同上</span></span><br><span class="line">    fileUploadParams: &#123; <span class="attr">token</span>: <span class="string">'&lt;%= @uptoken %&gt;'</span>&#125;,                        <span class="comment">//同上</span></span><br><span class="line">    fileUploadMethod: <span class="string">'POST'</span>,</span><br><span class="line">    fileMaxSize: <span class="number">20</span> * <span class="number">1024</span> * <span class="number">1024</span>,</span><br><span class="line">    fileAllowedTypes: [<span class="string">'*'</span>]</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="配置代码视图"><a href="#配置代码视图" class="headerlink" title="配置代码视图"></a>配置代码视图</h2><p>使用代码视图加高亮效果,可加入以下代码,也可以使用<a href="https://rubygems.org/gems/codemirror-rails" target="_blank" rel="noopener">codemirror-rails</a>这个gem包</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/codemirror.min.css"</span> <span class="attr">media</span>=<span class="string">"screen"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/codemirror.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/xml/xml.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="许可"><a href="#许可" class="headerlink" title="许可"></a>许可</h2><p>wyg-rails项目是在麻省理工学院的许可。然而,为了使用Froala WYSIWYG HTML编辑器插件你应该购买一个许可证。<br>下面是许可链接,请支持源作者<br>Froala Editor has <a href="https://froala.com/wysiwyg-editor/pricing" target="_blank" rel="noopener">3 different licenses</a>.<br>For details please see <a href="https://froala.com/wysiwyg-editor/terms" target="_blank" rel="noopener">License Agreement</a>.</p>
<h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢Froala项目作者的贡献, 我在项目的原基础上增加了对七牛云存储的支持.<br>如果你需要使用其它的云存储平台,请使用<a href="https://rubygems.org/gems/wysiwyg-rails" target="_blank" rel="noopener">wysiwyg-rails</a>进行自定义配置</p>
]]></content>
      <categories>
        <category>Ruby on Rails</category>
      </categories>
      <tags>
        <tag>七牛云存储</tag>
      </tags>
  </entry>
  <entry>
    <title>进击Drupal-1</title>
    <url>/20160321/%E8%BF%9B%E5%87%BBDrupal-1/</url>
    <content><![CDATA[<p><img src="/images/cover/drupal1.png" alt="Drupal1"></p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>首先我们需要有一台CentOS6.5以上的主机，如果你还没有使用过Linux的话，本教程就不太适用了。。</p>
<p>使用<code>Drupal</code>需要<code>Nginx</code> <code>PHP</code> <code>MySQL</code>这些东西，如果觉得安装麻烦可以使用lnmp进行一键安装，<br><a id="more"></a></p>
<p>推荐两个安装链接:</p>
<ol>
<li><p><a href="http://lnmp.org/" target="_blank" rel="noopener">LNMP一键安装包</a></p>
</li>
<li><p><a href="https://blog.linuxeye.com/31.html" target="_blank" rel="noopener">LNMP一键安装－支援PHP7</a></p>
</li>
</ol>
<p>安装方法不再敖述，上面的链接附带教程。有了lnmp环境就可以开始下一步</p>
<h2 id="安装PHP扩展"><a href="#安装PHP扩展" class="headerlink" title="安装PHP扩展"></a>安装PHP扩展</h2><p>这些扩展在使用<code>drush</code>和<code>Drupal</code>的时候需要用到，所以一定要装好。</p>
<p>查看服务状态</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span> service php-fpm status</span><br><span class="line"></span><br><span class="line">php-fpm (pid  4054) is running...</span><br></pre></td></tr></table></figure>
<h3 id="安装常用扩展"><a href="#安装常用扩展" class="headerlink" title="安装常用扩展"></a>安装常用扩展</h3><ul>
<li><p><code>php-gd</code> 图像处理</p>
</li>
<li><p><code>php-mysqlnd</code> mysqlnd服务相关</p>
</li>
<li><p><code>php-pdo</code> 数据库相关</p>
</li>
<li><p><code>php-mcrypt</code> 加密相关</p>
</li>
<li><p><code>php-mbstring</code> 多子节字符处理</p>
</li>
<li><p><code>php-xmlrpc</code> xml相关</p>
</li>
<li><p><code>php-jsonc</code> json处理</p>
</li>
</ul>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span> yum install php-gd php-mysqlnd php-pdo php-mcrypt php-mbstring php-xmlrpc php-jsonc -y</span><br></pre></td></tr></table></figure>
<h3 id="重启php-fpm服务"><a href="#重启php-fpm服务" class="headerlink" title="重启php-fpm服务"></a>重启php-fpm服务</h3><p>安装完扩展后需要重启服务生效</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span> service php-fpm restart</span><br></pre></td></tr></table></figure>
<h2 id="安装PHP包管理工具Composer"><a href="#安装PHP包管理工具Composer" class="headerlink" title="安装PHP包管理工具Composer"></a>安装PHP包管理工具Composer</h2><p>Composer可以方便的管理PHP的依赖</p>
<p>执行下面命令会下载一个叫<code>composer.phar</code>的文件</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span> cd ~</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> curl -sS https://getcomposer.org/installer | php</span><br></pre></td></tr></table></figure>
<p>可以通过<code>php composer.phar</code>查看composer的命令帮助。为了方便使用composer命令，将<code>composer.phar</code>放到系统根目录执行。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span> mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure>
<h3 id="安装Drush"><a href="#安装Drush" class="headerlink" title="安装Drush"></a>安装Drush</h3><p><code>Drush</code>命令行主要为了管理Drupal，这里使用Drush开发版</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span> composer global require drush/drush:dev-master</span><br></pre></td></tr></table></figure>
<p>查看<code>Drush</code>安装目录</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span> ll ~/.composer/vendor/drush/drush/</span><br></pre></td></tr></table></figure>
<p>将<code>Drush</code>添加到环境变量中</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span> vim ~/.bash_profile</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># .bash_profile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the aliases and functions</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f ~/.bashrc ]; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">^I. ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User specific environment and startup programs</span></span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># －－－－－－将drush到路径插入到环境变量－－－－－－</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HOME</span>/.composer/vendor/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/pgsql-9.4/bin</span><br><span class="line"></span><br><span class="line">[[ -s <span class="string">"<span class="variable">$HOME</span>/.rvm/scripts/rvm"</span> ]] &amp;&amp; <span class="built_in">source</span> <span class="string">"<span class="variable">$HOME</span>/.rvm/scripts/rvm"</span> <span class="comment"># Load RVM into a shell session *as a function*</span></span><br></pre></td></tr></table></figure>
<p>更新环境变量</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bash_profile</span></span><br></pre></td></tr></table></figure>
<p>使用drush，如果能看到命令提示代表你已经安装成功</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> drush</span></span><br><span class="line"></span><br><span class="line">Execute a drush command. Run `drush help [command]` to view command-specific help.  Run `drush topic` to read even more documentation.</span><br><span class="line"></span><br><span class="line">Global options (see `drush topic core-global-options` for the full list):</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">.</span><br></pre></td></tr></table></figure>
<h2 id="开启Drupal"><a href="#开启Drupal" class="headerlink" title="开启Drupal"></a>开启Drupal</h2><p>完成上面的准备后就可以开启Drupal了</p>
<h3 id="创建Drupal项目"><a href="#创建Drupal项目" class="headerlink" title="创建Drupal项目"></a>创建Drupal项目</h3><p>第一步,在项目目录下载drupal。目前有部分modules不支持8.x以上版本，所以我们在这里指定drupal-7.43</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> drush dl drupal-7.43</span></span><br></pre></td></tr></table></figure>
<p>第二步，进入到drupal目录下载中文简体语言包，并保存到<code>profiles/standard/translations/</code>。</p>
<p>如果需要更多语言支持，请查看－－<a href="https://localize.drupal.org/" target="_blank" rel="noopener">Drupal Translations</a></p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget http://ftp.drupal.org/files/translations/7.x/drupal/drupal-7.43.zh-hans.po -P profiles/standard/translations/</span></span><br></pre></td></tr></table></figure>
<p>第三步，创建drupal需要到数据库</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql -u root -p</span></span><br><span class="line"></span><br><span class="line">Welcome to the MySQL monitor.</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create database drupal;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> grant all privileges on drupal.* to <span class="string">'drupal'</span>@<span class="string">'localhost'</span> identified by <span class="string">'&lt;你的密码&gt;'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"><span class="built_in">exit</span></span></span><br></pre></td></tr></table></figure>
<p>第四步，配置Drupal站点，将<code>&lt; &gt;</code>符号的内容替换(包括<code>&lt; &gt;</code>)</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> drush si standard --db-url=mysql://drupal:&lt;数据库密码&gt;@localhost/drupal --site-name=&lt;站点名称&gt; --site-mail=&lt;站点邮箱&gt; --locale=zh-hans --account-name=&lt;管理员账号&gt; --account-pass=&lt;管理员密码&gt; --account-mail=&lt;管理员邮箱&gt; -v</span></span><br></pre></td></tr></table></figure>
<p>第五步，配置Nginx服务器</p>
<p>编辑<code>/usr/local/nginx/conf/drupal.conf</code>，如果没有就创建一个，然后将相应的<code>server_name</code> <code>root</code>填入。</p>
<p><code>/usr/local/nginx/conf/drupal.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">listen          80;</span><br><span class="line"></span><br><span class="line">server_name    web-stack.drupal.local;</span><br><span class="line"></span><br><span class="line">root            /vagrant_data/drupal;</span><br><span class="line"></span><br><span class="line">index          index.php index.html;</span><br><span class="line"></span><br><span class="line">access_log ^Ion;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line"></span><br><span class="line">try_files $uri $uri/ /index.php?$query_string;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line"></span><br><span class="line">fastcgi_pass 127.0.0.1:9000;</span><br><span class="line"></span><br><span class="line">fastcgi_index index.php;</span><br><span class="line"></span><br><span class="line">include fastcgi.conf;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果是在<code>vagrant</code> 虚拟机里面，需要将<code>drupal.conf</code>放到<code>/usr/local/nginx/conf/vhost/drupal.conf</code>。</p>
<p>然后修改<code>php-fpm</code>的配置，将默认的<code>listen.owner</code> <code>listen.group</code> <code>user</code> <code>group</code> 修改为<code>vagrant</code>。</p>
<p>将<code>listen</code>  改为 <code>127.0.0.1:9000</code>。</p>
<p>配置详细见下面代码片段</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /usr/<span class="built_in">local</span>/php/etc/php-fpm.conf</span></span><br></pre></td></tr></table></figure>
<p><code>/usr/local/php/etc/php-fpm.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[global]</span><br><span class="line"></span><br><span class="line">pid = /usr/local/php/var/run/php-fpm.pid</span><br><span class="line"></span><br><span class="line">error_log = /usr/local/php/var/log/php-fpm.log</span><br><span class="line"></span><br><span class="line">log_level = notice</span><br><span class="line"></span><br><span class="line">[www]</span><br><span class="line"></span><br><span class="line">listen = 127.0.0.1:9000</span><br><span class="line"></span><br><span class="line">listen.backlog = -1</span><br><span class="line"></span><br><span class="line">listen.allowed_clients = 127.0.0.1</span><br><span class="line"></span><br><span class="line">listen.owner = vagrant</span><br><span class="line"></span><br><span class="line">listen.group = vagrant</span><br><span class="line"></span><br><span class="line">listen.mode = 0666</span><br><span class="line"></span><br><span class="line">user = vagrant</span><br><span class="line"></span><br><span class="line">group = vagrant</span><br><span class="line"></span><br><span class="line">pm = dynamic</span><br><span class="line"></span><br><span class="line">pm.max_children = 10</span><br><span class="line"></span><br><span class="line">pm.start_servers = 2</span><br><span class="line"></span><br><span class="line">pm.min_spare_servers = 1</span><br><span class="line"></span><br><span class="line">pm.max_spare_servers = 6</span><br><span class="line"></span><br><span class="line">request_terminate_timeout = 100</span><br><span class="line"></span><br><span class="line">request_slowlog_timeout = 0</span><br><span class="line"></span><br><span class="line">slowlog = var/log/slow.log</span><br></pre></td></tr></table></figure>
<p>然后重启服务</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo lnmp restart</span></span><br></pre></td></tr></table></figure>
<p>第六步，修改<code>hosts</code></p>
<p>如果你已经配好了就可以省略。配置完成后就可以在浏览器通过<code>http://web-stack.drupal.local/</code>访问了</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/hosts</span></span><br></pre></td></tr></table></figure>
<p>在末尾添加，代码如下：</p>
<p><code>/etc/hosts</code></p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">127.0.0.1  web-stack.drupal.local</span><br></pre></td></tr></table></figure>
<p>温馨提示，如果是在<code>vagrant</code>虚拟机里面还需要修改端口映射，将80端口映射到主机中</p>
<p>完成之后就可以看到下图效果了</p>
<p><img src="http://7xs0pm.com1.z0.glb.clouddn.com/49F41CD9-7823-461E-A9FA-64CF30C7F641.png" alt="drupal首页"></p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>Drupal</tag>
      </tags>
  </entry>
  <entry>
    <title>进击Drupal-2</title>
    <url>/20160321/%E8%BF%9B%E5%87%BBDrupal-2/</url>
    <content><![CDATA[<p><img src="/images/cover/drupal2.png" alt="Drupal2"></p>
<h2 id="安装Drupal常用模块"><a href="#安装Drupal常用模块" class="headerlink" title="安装Drupal常用模块"></a>安装Drupal常用模块</h2><a id="more"></a>
<ul>
<li><p><code>ctools</code>其他模块会依赖这个模块</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> drush dl ctools </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> drush en ctools -y</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>views</code>用于创建各种形式的列表</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> drush dl views </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> drush en views views_ui -y</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>rules</code>执行设定任务</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> drush dl rules </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> drush en rules rules_admin -y</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>flag</code>标识模块</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> drush dl flag </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> drush en flag -y</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>token</code>依赖模块</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> drush dl token </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> drush en token -y</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>pathauto</code>定义内容地址模式</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> drush dl pathauto </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> drush en pathauto -y</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>jquery_update</code>升级Drupal自带jquery版本，这里选择<code>7.x-2.x-dev</code>版本</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> drush dl jquery_update            //选择4</span></span><br><span class="line">Choose one of the available releases for jquery_update:</span><br><span class="line"> [0]  :  Cancel</span><br><span class="line"> [1]  :  7.x-3.0-alpha3  -  2015-Oct-20  -  Supported</span><br><span class="line"> [2]  :  7.x-3.x-dev     -  2015-Oct-20  -  Development</span><br><span class="line"> [3]  :  7.x-2.7         -  2015-Oct-20  -  Security, Supported, Recommended</span><br><span class="line"> [4]  :  7.x-2.x-dev     -  2015-Oct-20  -  Development</span><br><span class="line"> [5]  :  7.x-1.x-dev     -  2013-Sep-30  -  Development</span><br><span class="line"><span class="meta">$</span><span class="bash"> drush en jquery_update -y</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>libraries</code>共享类库</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> drush dl libraries </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> drush en libraries -y</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>module_filter</code>更友好的模块管理界面 </p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> drush dl module_filter </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> drush en module_filter -y</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>l10n_update</code>翻译模块  </p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> drush dl l10n_update </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> drush en l10n_update -y</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>使用<code>l10n_update</code>命令<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> drush | grep l10n</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> drush l10n-update-refresh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> drush l10n-update</span></span><br></pre></td></tr></table></figure></p>
<h2 id="管理主题"><a href="#管理主题" class="headerlink" title="管理主题"></a>管理主题</h2><p>本节会配置一下基本的主题搭配</p>
<h3 id="安装-adminimal-theme-开发版"><a href="#安装-adminimal-theme-开发版" class="headerlink" title="安装 adminimal_theme 开发版"></a>安装 <code>adminimal_theme</code> 开发版</h3><p>输入下面命令，选择[1]</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> drush dl adminimal_theme --select  //选择[1]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> drush en adminimal -y</span></span><br><span class="line">drush vset admin_theme adminimal    //设置主题</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>Drupal</tag>
      </tags>
  </entry>
  <entry>
    <title>Arduino-uno从入门1</title>
    <url>/20160416/Arduino-uno%E4%BB%8E%E5%85%A5%E9%97%A81/</url>
    <content><![CDATA[<p><img src="/images/cover/illu-arduino-UNO.png" alt="Ariduino"></p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>学习物联网开发，我们需要有良好的社区支持，方便的配件采购渠道和便宜的价格。而Arduino刚好具备了这些条件。</p>
<h2 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h2><p>在开发Arduino之前你需要掌握基础的C语言知识。当然如果你已经有过Java，PHP，Ruby，Python，Javascript类似的语言开发经历的话请继续往下。除了编程基础以外你还需要了解基本的电学知识，大多数高中物理教材都有这些知识，你同样可以借助搜索引擎帮助你获得这些知识。<a id="more"></a><br>这里推荐一个学习C语言的链接:<br><a href="http://www.imooc.com/view/249" target="_blank" rel="noopener">慕课网-C语言入门</a></p>
<h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><p>在<a href="http://www.arduino.cc/" target="_blank" rel="noopener">Arduino官网</a>提供了诸多的编程参考，社区贡献代码库和详细的文档。<br>如果觉得文档不够明白，没关系。<br>推荐到<a href="http://www.jikexueyuan.com/path/arduino/" target="_blank" rel="noopener">极客学院-Arduino开发</a> 查看相关视频。在硬件还没到货之前可以在极客学院先了解一些关于Arduino的知识。</p>
<h2 id="硬件采购"><a href="#硬件采购" class="headerlink" title="硬件采购"></a>硬件采购</h2><p>在Arduino的官网提供了<a href="https://store.arduino.cc/" target="_blank" rel="noopener">购买链接</a>，但是如果你觉得麻烦的话推荐到淘宝店<a href="https://hjmcu.taobao.com/" target="_blank" rel="noopener">慧净电子</a>购买套装。<br>购买时请注意，慧净电子提供的Arduino uno有两种版本，一个是国产的相对便宜，一个是进口的相对贵一些。功能上没有区别只是一个是国内生产，一个是国外生产。如果不介意建议购买国产版本。<br>笔者购买的链接参考:<a href="https://item.taobao.com/item.htm?spm=a1z10.5-c.w4002-1930577668.24.t9tQHB&amp;id=36621044626" target="_blank" rel="noopener">基于Arduino智能小车循迹避障智能小车 UNO R3入门 机器人套件</a></p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>如果你使用的是Windows，环境搭建想对简单，如果是Mac可能会存在Arduino uno连接后找不到端口的问题，稍后会给出解决方案。</p>
<h2 id="下载ArduinoIDE"><a href="#下载ArduinoIDE" class="headerlink" title="下载ArduinoIDE"></a>下载ArduinoIDE</h2><p>开源的Arduino软件（IDE）让编程和下载程序变得非常简单。这个软件能够运行在Windows、Mac OS X以及Linux上，软件基于Processing和其他的开源软件，使用java开发完成。这个软件适用于任何Arduino控制板<br>下载连接：<a href="https://www.arduino.cc/en/Main/Software" target="_blank" rel="noopener">https://www.arduino.cc/en/Main/Software</a></p>
<h2 id="安装Arduino驱动"><a href="#安装Arduino驱动" class="headerlink" title="安装Arduino驱动"></a>安装Arduino驱动</h2><p>解决在Mac上找不到端口问题<br><a href="http://kig.re/2014/12/31/how-to-use-arduino-nano-mini-pro-with-CH340G-on-mac-osx-yosemite.html" target="_blank" rel="noopener">How To Use Cheap Chinese Arduinos That Come With With CH340G / CH341G Serial/USB Chip</a><br>下载文件 <a href="http://kig.re/downloads/CH34x_Install.zip" target="_blank" rel="noopener">CH34x_Install.zip</a><br>解压后安装，重启。重新插上Arduino数据线就可以在<code>ArduinoIDE</code>中看到设备了</p>
<h2 id="温馨提示"><a href="#温馨提示" class="headerlink" title="温馨提示"></a>温馨提示</h2><p>如果你有使用SublimeText，千万不要安装插件<code>arduino-like IDE</code>。安装<code>arduino-cli</code>就足够了。代码编译下载最好是使用<code>ArduinoIDE</code>完成，如果需要使用SublimeText，在选项中开启使用外部编辑器就好了，不然你会浪费很多时间在编辑器上面。强烈建议先看完极客学院的Arduino课程后再实操，结合笔者的后续文档，少踩很多坑。。。</p>
]]></content>
      <categories>
        <category>智能硬件</category>
      </categories>
      <tags>
        <tag>Arduino</tag>
      </tags>
  </entry>
  <entry>
    <title>从WordPress到hexo的必经之路</title>
    <url>/20160420/%E4%BB%8EWordPress%E5%88%B0hexo%E7%9A%84%E5%BF%85%E7%BB%8F%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<p><img src="/images/cover/hexo-theme-next.png" alt="NexT"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本来不打算写关于hexo教程的，Google上关于hexo的文章到处都有，重复造轮子的事情本身意义不大。之前的博客一直使用的是WordPress，朋友说用WordPress来做博客会存在种种问题，WP就像是一把瑞士军刀，在灵巧以及功能性上已经失去了平衡。然后去尝试了各种博客构建方案，折腾完后发现，Hexo已经在简洁之道上了。<br><a id="more"></a></p>
<h2 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h2><p>node和npm的环境肯定是必不可少的</p>
<ol>
<li><p>node使用nvm安装，方便快捷 》》<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm安装详解</a></p>
</li>
<li><p>npm是随同node一起的包管理工具，如果安装的是最新版的node就不用安装了，但是需要了解一些关于npm的命令》》<a href="http://www.runoob.com/nodejs/nodejs-npm.html" target="_blank" rel="noopener">npm命令详解</a></p>
</li>
<li><p>准备好环境后就可以传送到hexo到官网》》<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo安装详解</a></p>
</li>
</ol>
<p>如果不着急到话，可以先看看下面的内容，能帮你避免一些hexo的问题。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>安装完成后就可以创建你的博客了。</p>
<h3 id="执行hexo-g-watch资源无法同步"><a href="#执行hexo-g-watch资源无法同步" class="headerlink" title="执行hexo g --watch资源无法同步"></a>执行<code>hexo g --watch</code>资源无法同步</h3><p>如果你想在文章资源更新后能马上同步资源，那就不要在虚拟机运行就行了。<br>下面给出代码示例：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo g --watch</span></span><br></pre></td></tr></table></figure>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo server</span></span><br></pre></td></tr></table></figure>
<h3 id="配置-config-yml文件"><a href="#配置-config-yml文件" class="headerlink" title="配置_config.yml文件"></a>配置<code>_config.yml</code>文件</h3><p>打开<code>localhost:4000</code>后会有一个<code>hello world</code>文件，那么恭喜你，你已经构建好了一个博客。对于大多数人来说看到hexo的文件目录都会有些困惑。该从哪里入手？</p>
<p><img src="/images/hexo/listblog.png" alt="listblog"></p>
<p>打开<code>_config.yml</code>文件，大部分的参数默认即可。简单晒下我的配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span>                  <span class="comment">#站点名称</span></span><br><span class="line"><span class="attr">subtitle:</span>               <span class="comment">#副标题</span></span><br><span class="line"><span class="attr">description:</span>            <span class="comment">#站点描述</span></span><br><span class="line"><span class="attr">author:</span>                 <span class="comment">#作者名称</span></span><br><span class="line"><span class="attr">language:</span>               <span class="comment">#语言默认en， 可设置为 zh-Hans</span></span><br><span class="line"><span class="attr">timezone:</span>               <span class="comment">#时区，可设置为 Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span>                    <span class="comment">#站点域名</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span>                 <span class="comment">#博客根目录</span></span><br><span class="line"><span class="attr">permalink:</span>              <span class="comment">#持久链接格式，可设置为 :year:month:day/:title/ </span></span><br><span class="line"><span class="attr">permalink_defaults:</span>     <span class="comment">#同上，不过可以忽略</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span>      <span class="comment">#文章目录</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span>      <span class="comment">#编译目录</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span>           <span class="comment">#标签目录</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span>   <span class="comment">#档案目录</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories#类别目录</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code#代码下载目录</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span> </span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span>         <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span>      <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">nexts</span></span><br><span class="line"><span class="attr">stylus:</span></span><br><span class="line">  <span class="attr">compress:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Avatar</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">https://avatars1.githubusercontent.com/u/10667077?v=3&amp;s=460</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#duoshuo</span></span><br><span class="line"><span class="attr">duoshuo_shortname:</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="comment">## 部署必须配置，填写相应都仓库地址，最好把本机都ssh密匙添加到github中</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">message:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">swiftype_key:</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">google_site_verification:</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">qiniu:</span></span><br><span class="line">  <span class="attr">offline:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">sync:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">bucket:</span> <span class="string">blog</span></span><br><span class="line">  <span class="attr">access_key:</span> </span><br><span class="line">  <span class="attr">secret_key:</span></span><br><span class="line">  <span class="attr">dirPrefix:</span> <span class="string">static</span></span><br><span class="line">  <span class="attr">urlPrefix:</span> </span><br><span class="line">  <span class="comment"># urlPrefix:</span></span><br><span class="line">  <span class="attr">local_dir:</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">update_exist:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">image:</span> </span><br><span class="line">    <span class="attr">folder:</span> <span class="string">images</span></span><br><span class="line">    <span class="attr">extend:</span> </span><br><span class="line">  <span class="attr">js:</span></span><br><span class="line">    <span class="attr">folder:</span> <span class="string">js</span></span><br><span class="line">  <span class="attr">css:</span></span><br><span class="line">    <span class="attr">folder:</span> <span class="string">css</span></span><br></pre></td></tr></table></figure>
<p>然后你就可以开始写作了，如果还想配置更多自定义的内容，可以安装一些插件，主题推荐使用<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a>。其他的不建议折腾了。</p>
<h2 id="文章列表显示摘要"><a href="#文章列表显示摘要" class="headerlink" title="文章列表显示摘要"></a>文章列表显示摘要</h2><p>在需要截取的地方加上<code>&lt;!-- more --&gt;</code>即可。</p>
<h2 id="使用七牛云存储CDN"><a href="#使用七牛云存储CDN" class="headerlink" title="使用七牛云存储CDN"></a>使用七牛云存储CDN</h2><p>如果你看到有文章推荐你使用<code>hexo-qiniu-sync</code>这个插件，千万不要去尝试这个插件，并发问题非常多，简直会让你奔溃。如果真的要使用建议做好文件备份，以免意外发生。那怎么办呢？<br>去下载<a href="http://developer.qiniu.com/code/v6/tool/qrsync.html" target="_blank" rel="noopener">qrsync 命令行上传同步工具</a>。通过手动方式将<code>public</code>目录传到七牛云存储，再修改所使用主题到<code>link</code> <code>script</code>地址配置。</p>
<h2 id="使用多说"><a href="#使用多说" class="headerlink" title="使用多说"></a>使用多说</h2><p>多说到加载速度是比较慢，自己权衡利弊吧。NexT主题集成了多说到配置，去多说添加个站点就好了，把多说到<code>name</code>填写到<code>duoshuo_shortname</code>即可。</p>
<h2 id="使用站内搜索"><a href="#使用站内搜索" class="headerlink" title="使用站内搜索"></a>使用站内搜索</h2><p> Next也集成了<a href="https://swiftype.com/" target="_blank" rel="noopener">swiftype</a>到站内搜索，由于swiftype是国外的资源，所以加载也会比较慢。填写<code>swiftype_key</code>参数完成配置</p>
<h2 id="使用打赏"><a href="#使用打赏" class="headerlink" title="使用打赏"></a>使用打赏</h2><p>在主题配置文件中加入以下字段，获取<a href="https://fama.alipay.com/qrcode/index.htm" target="_blank" rel="noopener">支付宝二维码</a><br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reward_comment:</span>             <span class="comment">#打赏内容描述</span></span><br><span class="line"><span class="attr">alipay:</span>                     <span class="comment">#自己的支付宝二维码图片地址</span></span><br></pre></td></tr></table></figure></p>
<h2 id="配置gulp-coffee文件"><a href="#配置gulp-coffee文件" class="headerlink" title="配置gulp.coffee文件"></a>配置<code>gulp.coffee</code>文件</h2><p>主题目录下的<code>gulp.coffee</code>定义了一个js检查任务，如果需要对主题对静态资源做处理请查看<a href="http://gulpjs.com/" target="_blank" rel="noopener">gulp详解</a>。对于新手来说，一般不建议再处理这些资源。</p>
<h2 id="添加robots-txt"><a href="#添加robots-txt" class="headerlink" title="添加robots.txt"></a>添加<code>robots.txt</code></h2><p>当需要对爬虫抓取做些处理时，在项目根目录的<code>source</code>中创建<code>robots.txt</code>即可，下面是示例代码:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># hexo robots.txt</span><br><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line">Allow: /categories/</span><br><span class="line">Allow: /tags/</span><br><span class="line">Allow: /about/</span><br><span class="line"></span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line"></span><br><span class="line">Sitemap: #填写完整域名地址 http://example.com/sitemap.xml</span><br></pre></td></tr></table></figure></p>
<h2 id="映射域名"><a href="#映射域名" class="headerlink" title="映射域名"></a>映射域名</h2><p>在根目录的<code>source</code>下面创建<code>CNAME</code>文件，在其中填写你要映射的域名。将域名解析到统一地址<code>103.245.222.133</code>。之后需要等待一段时间DNS才能解析完成。</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>如果没有改动主题资源，那么部署的时候不用每次都<code>hexo clean</code>。<br>直接执行下面都命令完成部署。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Front-end</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails + PostgreSQL 常见问题及解决办法</title>
    <url>/20160418/Rails%20+%20PostgreSQL%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<h2 id="No-pg-config…"><a href="#No-pg-config…" class="headerlink" title="No pg_config…"></a>No pg_config…</h2><p> <em>问题重现</em>: 在<code>bundle</code>的时候出现gem包<code>pg-0.18.4</code>安装出错的情况，错误代码如下:<br> <a id="more"></a><br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bundle</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">Gem::Ext::BuildError: ERROR: Failed to build gem native extension.</span><br><span class="line"></span><br><span class="line">    current directory: /home/vagrant/.rvm/gems/ruby-2.3.0/gems/pg-0.18.4/ext</span><br><span class="line">/home/vagrant/.rvm/rubies/ruby-2.3.0/bin/ruby -r ./siteconf20160415-7139-1cu08ba.rb extconf.rb</span><br><span class="line">checking for pg_config... no</span><br><span class="line">No pg_config... trying anyway. If building fails, please try again with</span><br><span class="line"> --with-pg-config=/path/to/pg_config</span><br><span class="line">checking for libpq-fe.h... no</span><br><span class="line">Can't find the 'libpq-fe.h header</span><br><span class="line">*** extconf.rb failed ***</span><br><span class="line">Could not create Makefile due to some reason, probably lack of necessary</span><br><span class="line">libraries and/or headers.  Check the mkmf.log file for more details.  You may</span><br><span class="line">need configuration options.</span><br><span class="line"></span><br><span class="line">Provided configuration options:</span><br><span class="line"> --with-opt-dir</span><br><span class="line"> --without-opt-dir</span><br><span class="line"> --with-opt-include</span><br><span class="line"> --without-opt-include=$&#123;opt-dir&#125;/include</span><br><span class="line"> --with-opt-lib</span><br><span class="line"> --without-opt-lib=$&#123;opt-dir&#125;/lib</span><br><span class="line"> --with-make-prog</span><br><span class="line"> --without-make-prog</span><br><span class="line"> --srcdir=.</span><br><span class="line"> --curdir</span><br><span class="line"> --ruby=/home/vagrant/.rvm/rubies/ruby-2.3.0/bin/$(RUBY_BASE_NAME)</span><br><span class="line"> --with-pg</span><br><span class="line"> --without-pg</span><br><span class="line"> --enable-windows-cross</span><br><span class="line"> --disable-windows-cross</span><br><span class="line"> --with-pg-config</span><br><span class="line"> --without-pg-config</span><br><span class="line"> --with-pg_config</span><br><span class="line"> --without-pg_config</span><br><span class="line"> --with-pg-dir</span><br><span class="line"> --without-pg-dir</span><br><span class="line"> --with-pg-include</span><br><span class="line"> --without-pg-include=$&#123;pg-dir&#125;/include</span><br><span class="line"> --with-pg-lib</span><br><span class="line"> --without-pg-lib=$&#123;pg-dir&#125;/lib</span><br><span class="line"></span><br><span class="line">To see why this extension failed to compile, please check the mkmf.log which can be found here:</span><br><span class="line"></span><br><span class="line">  /home/vagrant/.rvm/gems/ruby-2.3.0/extensions/x86_64-linux/2.3.0/pg-0.18.4/mkmf.log</span><br><span class="line"></span><br><span class="line">extconf failed, exit code 1</span><br><span class="line"></span><br><span class="line">Gem files will remain installed in /home/vagrant/.rvm/gems/ruby-2.3.0/gems/pg-0.18.4 for inspection.</span><br><span class="line">Results logged to /home/vagrant/.rvm/gems/ruby-2.3.0/extensions/x86_64-linux/2.3.0/pg-0.18.4/gem_make.out</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">An error occurred while installing pg (0.18.4), and Bundler cannot continue.</span><br><span class="line">Make sure that `gem install pg -v '0.18.4'` succeeds before bundling.</span><br></pre></td></tr></table></figure></p>
<p> <em>解决方案</em>: 先不要急着按提示去执行，出现这个问题可能是你没有安装PostgreSQL或是没有指定pgsql的路径。如果没有安装PostgreSQL，点击<a href="http://www.postgresql.org/download/" target="_blank" rel="noopener">传送门</a>去安装(注意：执行<code>yum install postgresql-server</code>后继续往下看文档安装pgsql的扩展，建议最好安装的PostgreSQL是9.X以上版本，否则许多新特性无法使用)。英文不太好的同学可以到这篇博客<a href="http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html" target="_blank" rel="noopener">PostgreSQL新手入门</a>看看。<br>步骤1:<br>安装<code>libpq-dev</code>包<br>Ubuntu执行以下命令：<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt-get install libpq-dev</span></span><br></pre></td></tr></table></figure></p>
<p>CentOS/RetH执行以下命令：<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install postgresql-devel</span></span><br></pre></td></tr></table></figure></p>
<p>步骤2:<br>找到你的pgsql安装目录<br>我的是在<code>/usr/pgsql-9.4</code>，也有可能会在<code>/usr/local/pgsql</code>，因系统而异。</p>
<p>步骤3:<br><code>with-pg-config</code>后面接的就是pgsql目录下的pg_config文件，注意<code>--with-pg-config</code>前面还有两个<code>-</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gem install pg -v &apos;0.18.4&apos; -- --with-pg-config=/usr/pgsql-9.4/bin/pg_config</span><br></pre></td></tr></table></figure></p>
<p>步骤4:<br>重新执行<code>bundle</code>命令</p>
<h2 id="无法连接pgsql"><a href="#无法连接pgsql" class="headerlink" title="无法连接pgsql"></a>无法连接pgsql</h2><p><em>问题重现</em>: 运行<code>rails s -b 0.0.0.0 -p 3000</code>后，在浏览器打开项目首页出现下面问题</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">PG::ConnectionBad (<span class="symbol">FATAL:</span>  Ident authentication failed <span class="keyword">for</span> user <span class="string">"postgres"</span></span><br><span class="line">)<span class="symbol">:</span></span><br><span class="line">  activerecord (<span class="number">4.2</span>.<span class="number">3</span>) lib/active_record/connection_adapters/postgresql_adapter.<span class="symbol">rb:</span><span class="number">655</span><span class="symbol">:in</span> <span class="string">`initialize'</span></span><br><span class="line"><span class="string">  activerecord (4.2.3) lib/active_record/connection_adapters/postgresql_adapter.rb:655:in `</span>new<span class="string">'</span></span><br><span class="line"><span class="string">  activerecord (4.2.3) lib/active_record/connection_adapters/postgresql_adapter.rb:655:in `connect'</span></span><br><span class="line">  activerecord (<span class="number">4.2</span>.<span class="number">3</span>) lib/active_record/connection_adapters/postgresql_adapter.<span class="symbol">rb:</span><span class="number">242</span><span class="symbol">:in</span> <span class="string">`initialize'</span></span><br><span class="line"><span class="string">  activerecord-postgis-adapter (3.1.0) lib/active_record/connection_adapters/postgis_adapter.rb:51:in `</span>initialize<span class="string">'</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br></pre></td></tr></table></figure>
<p><em>解决方案</em>:<br>找到 <code>pg_hba.conf</code>文件, 一般是在<code>/var/lib/pgsql/data</code>目录下，如果修改后不生效看看<code>/var/lib/pgsql</code>目录下是否还有其他的数据目录。因系统环境而异。<br>使用<code>vim</code>或<code>vi</code>打开<br>步骤1:<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /var/lib/pgsql/data/pg_hba.conf</span></span><br></pre></td></tr></table></figure></p>
<p>步骤2:<br>按住<code>shift</code> + <code>g</code> 将光标定位的文件底部，按<code>i</code>进入编辑模式，修改METHOP为md5验证。<br>完成后按<code>shift</code> + <code>:</code> 进入命令模式，输入<code>wq</code>完成编辑。<br>下面给出修改后效果<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"># TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD</span><br><span class="line"></span><br><span class="line"># &quot;local&quot; is for Unix domain socket connections only</span><br><span class="line">local   all         all                               md5</span><br><span class="line"># IPv4 local connections:</span><br><span class="line">host    all         all         127.0.0.1/32          md5</span><br><span class="line"># IPv6 local connections:</span><br><span class="line">host    all         all         ::1/128               md5</span><br></pre></td></tr></table></figure></p>
<p>步骤3:<br>重启<code>postgresql</code>服务<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> service postgresql restart</span></span><br></pre></td></tr></table></figure></p>
<h2 id="type-“json”-does-not-exist"><a href="#type-“json”-does-not-exist" class="headerlink" title="type “json” does not exist"></a>type “json” does not exist</h2><p><em>问题重现</em>: 执行<code>rake db:migrate</code>时出现错误，错误代码如下：<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rake db:migrate</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">== 20151208044806 CreateShops: migrating ======================================</span><br><span class="line">-- create_table(:shops)</span><br><span class="line">rake aborted!</span><br><span class="line">StandardError: An error has occurred, this and all later migrations canceled:</span><br><span class="line"></span><br><span class="line">PG::UndefinedObject: ERROR:  type "json" does not exist</span><br><span class="line">LINE 1: ...ying NOT NULL, "logo" character varying, "images" json, "reg...</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure></p>
<p><em>解决方案</em>：出现这种问题大多是因为安装了老版的PostgreSQL，在CentOS上面执行<code>yum install postgresql</code>默认是8.X版本。升级版本即可。</p>
<p>步骤1:删除旧版postgresql<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum remove postgresql*</span></span><br></pre></td></tr></table></figure></p>
<p>步骤2:更新yum<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum update</span></span><br></pre></td></tr></table></figure></p>
<p>步骤3: 到<a href="http://yum.pgrpms.org/reporpms/" target="_blank" rel="noopener">http://yum.pgrpms.org/reporpms/</a>选择9.X以上版本下载相应的rpm包<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://download.postgresql.org/pub/repos/yum/9.4/redhat/rhel-6-x86_64/pgdg-centos94-9.4-2.noarch.rpm</span></span><br></pre></td></tr></table></figure></p>
<p> 步骤4:使用下载好的rpm包<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -ivh pgdg-centos94-9.4-2.noarch.rpm</span></span><br></pre></td></tr></table></figure></p>
<p>步骤5:安装<code>postgresql94-server</code><br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">yum -y install postgresql94-server</span><br></pre></td></tr></table></figure></p>
<p>步骤6:重新启动<code>postgresql-94</code>服务<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> service postgresql-9.4 start</span></span><br></pre></td></tr></table></figure></p>
<h2 id="type-“geography”-does-not-exist"><a href="#type-“geography”-does-not-exist" class="headerlink" title="type “geography” does not exist"></a>type “geography” does not exist</h2><p><em>问题重现</em>:执行<code>rake db:migrate</code>时出现错误，错误代码如下：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rake db:migrate</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">rake aborted!</span><br><span class="line">StandardError: An error has occurred, this and all later migrations canceled:</span><br><span class="line"></span><br><span class="line">PG::UndefinedObject: ERROR:  type "geography" does not exist</span><br><span class="line">LINE 1: ... "address" character varying NOT NULL, "location" geography(...</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure>
<p><em>解决方案</em>: 这是由于没有安装支持<code>geography</code>类型数据的扩展，笔者使用的是PostgreSQL-9.4版本，这里给出9.X版本的解决方案。为了后续用到其他扩展方便，这里也就一起安装了。</p>
<p>步骤1: <code>list</code>命令查看<code>postgresql</code>有哪些扩展，当你看到下面效果说明你的yum库中有这些扩展，如果没有请到<a href="http://yum.pgrpms.org/reporpms/" target="_blank" rel="noopener">http://yum.pgrpms.org/reporpms/</a>选择9.X以上版本下载相应的rpm包安装。如果不需要请跳过步骤1，步骤2<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum list postgresql94-*</span></span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Repository pgdg94 is listed more than once in the configuration</span><br><span class="line">Repository pgdg94-source is listed more than once in the configuration</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.yun-idc.com</span><br><span class="line"> * extras: mirrors.yun-idc.com</span><br><span class="line"> * updates: mirrors.yun-idc.com</span><br><span class="line">已安装的软件包</span><br><span class="line">postgresql94.x86_64                                                               9.4.7-1PGDG.rhel6                                                    @pgdg94</span><br><span class="line">postgresql94-libs.x86_64                                                          9.4.7-1PGDG.rhel6                                                    @pgdg94</span><br><span class="line">postgresql94-server.x86_64                                                        9.4.7-1PGDG.rhel6                                                    @pgdg94</span><br><span class="line">可安装的软件包</span><br><span class="line">postgresql94-contrib.x86_64                                                       9.4.7-1PGDG.rhel6                                                    pgdg94 </span><br><span class="line">postgresql94-debuginfo.x86_64                                                     9.4.7-1PGDG.rhel6                                                    pgdg94 </span><br><span class="line">postgresql94-devel.x86_64                                                         9.4.7-1PGDG.rhel6                                                    pgdg94 </span><br><span class="line">postgresql94-docs.x86_64                                                          9.4.7-1PGDG.rhel6                                                    pgdg94 </span><br><span class="line">postgresql94-jdbc.x86_64                                                          9.3.1101-1PGDG.rhel6                                                 pgdg94 </span><br><span class="line">postgresql94-jdbc-debuginfo.x86_64                                                9.3.1101-1PGDG.rhel6                                                 pgdg94 </span><br><span class="line">postgresql94-odbc.x86_64                                                          09.03.0400-1PGDG.rhel6                                               pgdg94 </span><br><span class="line">postgresql94-odbc-debuginfo.x86_64                                                09.03.0400-1PGDG.rhel6                                               pgdg94 </span><br><span class="line">postgresql94-plperl.x86_64                                                        9.4.7-1PGDG.rhel6                                                    pgdg94 </span><br><span class="line">postgresql94-plpython.x86_64                                                      9.4.7-1PGDG.rhel6                                                    pgdg94 </span><br><span class="line">postgresql94-pltcl.x86_64                                                         9.4.7-1PGDG.rhel6                                                    pgdg94 </span><br><span class="line">postgresql94-python.x86_64                                                        4.2-1PGDG.rhel6                                                      pgdg94 </span><br><span class="line">postgresql94-python-debuginfo.x86_64                                              4.2-1PGDG.rhel6                                                      pgdg94 </span><br><span class="line">postgresql94-tcl.x86_64                                                           2.1.1-1.rhel6                                                        pgdg94 </span><br><span class="line">postgresql94-tcl-debuginfo.x86_64                                                 2.1.1-1.rhel6                                                        pgdg94 </span><br><span class="line">postgresql94-test.x86_64</span><br></pre></td></tr></table></figure></p>
<p>步骤2:安装扩展<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install postgresql94-*</span></span><br></pre></td></tr></table></figure></p>
<p>步骤3: 前往<a href="http://postgis.net/source/" target="_blank" rel="noopener">postgis</a>安装扩展。<br>友情提示：自行编译源码的话，如果系统编译环境不完全，会折腾很久，建议直接用yum安装。推荐一篇文章<a href="http://www.icanx.cn/p/13" target="_blank" rel="noopener"><a href="http://www.icanx.cn/p/13" target="_blank" rel="noopener">centos安装postgis
</a></a>。<br>作者是为PostgreSQL源加上EPEL源，直接yum安装，无痛解决依赖问题。抓狂的同学速度get。如果依然报错，请执行<code>rake db:drop</code>，然后再创建一次数据库就行了。</p>
]]></content>
      <categories>
        <category>Ruby on Rails</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Meteor项目部署笔记</title>
    <url>/20160425/Meteor%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><img src="/images/cover/meteorbg2.png" alt="meteor"><br>记一次Meteor项目部署配置,使用 <code>CentOS</code> + <code>Meteor</code> + <code>React</code> + <code>Mongdb</code> + <code>Nginx</code>。<br>node版本与Meteor依赖一致<code>v0.10.43</code><br>自定义服务配置比较麻烦，给出配置文件示例。</p>
<a id="more"></a>
<p>环境变量配置参数<br><em><code>/etc/profile</code></em><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/mongodb/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> MONGO_URL=mongodb://localhost:27017/chat</span><br><span class="line"><span class="built_in">export</span> ROOT_URL=http://chat.haoduoshipin.com</span><br><span class="line"><span class="built_in">export</span> PORT=9000</span><br><span class="line"><span class="built_in">export</span> PATH=/home/vagrant/.nvm/v0.10.43/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/pgsql-9.4/bin/:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/include/proj_api.h:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p>
<p>自定义服务:mongod<br><em><code>/etc/init/mongod.conf</code></em><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># upstart service file at /etc/init/mongod.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When to start the service</span></span><br><span class="line">start on started sshd and runlevel [2345]</span><br><span class="line"></span><br><span class="line"><span class="comment"># When to stop the service</span></span><br><span class="line">stop on shutdown</span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically restart process if crashed</span></span><br><span class="line">respawn</span><br><span class="line">respawn <span class="built_in">limit</span> 10 5</span><br><span class="line"></span><br><span class="line">script</span><br><span class="line">    <span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/mongodb/bin:/opt/<span class="built_in">local</span>/bin:/opt/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">    <span class="built_in">exec</span> mongod &gt;&gt; /home/vagrant/logs/mongod.log</span><br><span class="line">end script</span><br></pre></td></tr></table></figure></p>
<p>自定义服务:chat<br><em><code>/etc/init/chat.conf</code></em><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># upstart service file at /etc/init/chat.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When to start the service</span></span><br><span class="line">start on started mongod and runlevel [2345]</span><br><span class="line"></span><br><span class="line"><span class="comment"># When to stop the service</span></span><br><span class="line">stop on shutdown</span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically restart process if crashed</span></span><br><span class="line">respawn</span><br><span class="line">respawn <span class="built_in">limit</span> 10 5</span><br><span class="line"></span><br><span class="line">script</span><br><span class="line">    <span class="built_in">export</span> PATH=/home/vagrant/.nvm/v0.10.43/bin:/opt/<span class="built_in">local</span>/bin:/opt/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set to home directory of the user Meteor will be running as</span></span><br><span class="line">    <span class="built_in">export</span> PWD=/home/vagrant</span><br><span class="line">    <span class="built_in">export</span> HOME=/home/vagrant</span><br><span class="line">    <span class="comment"># leave as 127.0.0.1 for security</span></span><br><span class="line">    <span class="built_in">export</span> BIND_IP=127.0.0.1</span><br><span class="line">    <span class="comment"># the port nginx is proxying requests to</span></span><br><span class="line">    <span class="built_in">export</span> PORT=9000</span><br><span class="line">    <span class="comment"># this allows Meteor to figure out correct IP address of visitors</span></span><br><span class="line">    <span class="built_in">export</span> HTTP_FORWARDED_COUNT=1</span><br><span class="line">    <span class="comment"># MongoDB connection string using meteor as database name</span></span><br><span class="line">    <span class="built_in">export</span> MONGO_URL=mongodb://localhost:27017/chat</span><br><span class="line">    <span class="comment"># The domain name as configured previously as server_name in nginx</span></span><br><span class="line">    <span class="built_in">export</span> ROOT_URL=http://chat.haoduoshipin.com</span><br><span class="line">    <span class="built_in">exec</span> node /home/vagrant/chat/bundle/main.js &gt;&gt; /home/vagrant/chat/chat.log</span><br><span class="line">end script</span><br></pre></td></tr></table></figure></p>
<p>nginx代理配置<br><em><code>/usr/local/nginx/conf/vhost/chat.conf</code></em><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen         80;</span><br><span class="line">  server_name chat.com;</span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://localhost:9000;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">    proxy_set_header Host <span class="variable">$http_x_forwarded_host</span>;</span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">    proxy_set_header Connection <span class="string">"upgrade"</span>;</span><br><span class="line">    proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    proxy_read_timeout 3m;</span><br><span class="line">    proxy_send_timeout 3m;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在CentOS6.5中启动自定义服务<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> initctl</span></span><br></pre></td></tr></table></figure></p>
<p>启动自定义mongdb服务<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo initctl start mongod</span></span><br></pre></td></tr></table></figure></p>
<p>启动chat服务<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo initctl chat mongod</span></span><br></pre></td></tr></table></figure></p>
<p>启动nginx服务<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo service nginx start</span></span><br></pre></td></tr></table></figure></p>
<p>mongdb使用<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mongo</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show dbs</span></span><br><span class="line">chat   0.000GB</span><br><span class="line">local  0.000GB</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> use chat</span></span><br><span class="line">switched to db chat</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show collections</span></span><br><span class="line">users</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.users.find()</span></span><br></pre></td></tr></table></figure></p>
<p>nginx 代理监听端口<code>9000</code></p>
<p>外部访问地址<code>http://chat.com:8080</code></p>
]]></content>
      <categories>
        <category>Front-end</category>
      </categories>
      <tags>
        <tag>Meteor</tag>
      </tags>
  </entry>
  <entry>
    <title>为你的博客添加SSL</title>
    <url>/20160425/%E4%B8%BA%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0SSL/</url>
    <content><![CDATA[<p><img src="/images/cover/https&amp;http.png" alt="https&amp;http"></p>
<h1 id="为什么添加SSL"><a href="#为什么添加SSL" class="headerlink" title="为什么添加SSL"></a>为什么添加SSL</h1><p>好奇心总会驱使你去探索未知的东西，当完成Hexo博客构建之后，是不是给自己的博客添加SSL呢？<br>在一定程度上HTTPS比HTTP更安全这是众所周知的，当然，使用HTTPS连接后，网页的第一次加载速度会较HTTP稍慢一些，但是并不影响后续请求的速度。所以SSL你还是值得一试。</p>
<a id="more"></a>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>本文使用的是<a href="https://www.cloudflare.com/" target="_blank" rel="noopener">CloudFlare</a>的免费SSL证书，如果你使用的是别的签书机构话，本文也可供参考。</p>
<h2 id="注册CloudFlare"><a href="#注册CloudFlare" class="headerlink" title="注册CloudFlare"></a>注册CloudFlare</h2><p>注册传送门<a href="https://www.cloudflare.com/a/sign-up" target="_blank" rel="noopener">Sign-up</a>。(如果地址无法打开，请确认你已翻墙。)</p>
<h2 id="添加站点"><a href="#添加站点" class="headerlink" title="添加站点"></a>添加站点</h2><p>输入你的域名地址，点击<code>Begin Scan</code><br><img src="/images/ssl/searchdomain.png" alt="searchdomain"></p>
<h2 id="继续设置"><a href="#继续设置" class="headerlink" title="继续设置"></a>继续设置</h2><p>等待进度条完成，点击<code>Continue Setup</code>进行站点设置<br><img src="/images/ssl/setdomain.png" alt="setdomain"></p>
<h2 id="设置DNS"><a href="#设置DNS" class="headerlink" title="设置DNS"></a>设置DNS</h2><p>使用CloudFlare CDN加速设置<code>Type A</code>即可，设置相应的GitPages IP，完成后继续下一步。<br><img src="/images/ssl/dnsset.png" alt="dnsset"></p>
<h2 id="选择Plan"><a href="#选择Plan" class="headerlink" title="选择Plan"></a>选择Plan</h2><p>选择第一个<code>Free</code>，然后继续下一步<br><img src="/images/ssl/setfree.png" alt="setfree"></p>
<h2 id="设置DNS解析地址"><a href="#设置DNS解析地址" class="headerlink" title="设置DNS解析地址"></a>设置DNS解析地址</h2><p>将给出的DNS设置的相应的域名上<br><img src="/images/ssl/updatednsset.png" alt="updatednsset"></p>
<p>下面的我在<a href="https://www.aliyun.com/" target="_blank" rel="noopener">阿里云</a>设置后下效果<br><img src="/images/ssl/setaliyundns.png" alt="setaliyundns"></p>
<h2 id="配置CNAME"><a href="#配置CNAME" class="headerlink" title="配置CNAME"></a>配置CNAME</h2><p>如果你的GitPages还没有配置，请在<code>source</code>目录下添加<code>CNAME</code>文件。<br><img src="/images/ssl/cnamebg.png" alt="cnamebg"></p>
<h2 id="站点config配置"><a href="#站点config配置" class="headerlink" title="站点config配置"></a>站点<code>config</code>配置</h2><p>如果你的站点有用到HTTP的资源，请修改为HTTPS。参考下面示例代码配置你的站点<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: https://tkvern.com   #填写你的域名</span><br><span class="line">enforce_ssl: tkvern.com   #填写你的域名</span><br><span class="line">root: /</span><br><span class="line">permalink: :year:month:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure></p>
<h2 id="重新部署"><a href="#重新部署" class="headerlink" title="重新部署"></a>重新部署</h2><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g -d</span></span><br></pre></td></tr></table></figure>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>当配置完成后，等待一段时间，访问你的站点可能浏览器会提示HTTPS连接不安全，不用理会，继续等待24小时左右你就可以在你的站点看到绿色小钥匙了。<br><img src="/images/ssl/yaoshilist.png" alt="yaoshilist"></p>
]]></content>
      <categories>
        <category>Front-end</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>我的前端工作流</title>
    <url>/20160524/%E6%88%91%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E4%BD%9C%E6%B5%81/</url>
    <content><![CDATA[<h2 id="摩登时代"><a href="#摩登时代" class="headerlink" title="摩登时代"></a>摩登时代</h2><p>在 Node.js 出现以前，以往的前端开发工作属于石器时代。而随着前端技术的大爆炸来临，我们需要赶上这一次潮流，加入到前端开发到摩登时代去。这篇博文主要是记录如何构建前端工作流。<br><a id="more"></a></p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>先要具备<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>的环境，安装<a href="http://www.npmjs.com/" target="_blank" rel="noopener">NPM</a>管理工具<br>全局安装<code>gulp</code><br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install gulp -g</span></span><br></pre></td></tr></table></figure></p>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>npm通过package.json文件来管理依赖。<br>先进入的项目目录, 执行下面命令，一路回车即可。会生成名为package.json的文件。<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm init</span></span><br></pre></td></tr></table></figure></p>
<h3 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h3><p>这个我构建好的json文件，将<code>devDependencies</code>下的所有节点复制过去。<br><em><code>package.json</code></em><br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"ba"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"browser-sync"</span>: <span class="string">"^2.12.5"</span>,</span><br><span class="line">    <span class="attr">"coffee-script"</span>: <span class="string">"^1.10.0"</span>,</span><br><span class="line">    <span class="attr">"del"</span>: <span class="string">"^2.2.0"</span>,</span><br><span class="line">    <span class="attr">"gulp"</span>: <span class="string">"^3.9.1"</span>,</span><br><span class="line">    <span class="attr">"gulp-autoprefixer"</span>: <span class="string">"^3.1.0"</span>,</span><br><span class="line">    <span class="attr">"gulp-cache"</span>: <span class="string">"^0.4.4"</span>,</span><br><span class="line">    <span class="attr">"gulp-concat"</span>: <span class="string">"^2.6.0"</span>,</span><br><span class="line">    <span class="attr">"gulp-html-extend"</span>: <span class="string">"^1.1.6"</span>,</span><br><span class="line">    <span class="attr">"gulp-imagemin"</span>: <span class="string">"^2.4.0"</span>,</span><br><span class="line">    <span class="attr">"gulp-jshint"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="attr">"gulp-livereload"</span>: <span class="string">"^3.8.1"</span>,</span><br><span class="line">    <span class="attr">"gulp-minify-css"</span>: <span class="string">"^1.2.4"</span>,</span><br><span class="line">    <span class="attr">"gulp-minify-html"</span>: <span class="string">"^1.0.6"</span>,</span><br><span class="line">    <span class="attr">"gulp-notify"</span>: <span class="string">"^2.2.0"</span>,</span><br><span class="line">    <span class="attr">"gulp-rename"</span>: <span class="string">"^1.2.2"</span>,</span><br><span class="line">    <span class="attr">"gulp-ruby-sass"</span>: <span class="string">"^2.0.6"</span>,</span><br><span class="line">    <span class="attr">"gulp-sitemap"</span>: <span class="string">"^4.1.1"</span>,</span><br><span class="line">    <span class="attr">"gulp-uglify"</span>: <span class="string">"^1.5.3"</span>,</span><br><span class="line">    <span class="attr">"gulp-watch"</span>: <span class="string">"^4.3.5"</span>,</span><br><span class="line">    <span class="attr">"jshint"</span>: <span class="string">"^2.9.2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>完成之后安装这些包，版本如果有更新，去掉版本号默认会安装最稳定版本。安装时间视网络情况机器性能而定。首次安装时间比较长。<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure></p>
<h3 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h3><p>在当前目录下创建<code>source</code>文件夹同时为其创建子目录，如下结构，<br>其中<code>views</code>目录下<code>layouts</code>用于视图模版，<code>application</code>用于视图文件<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">+ node_modules</span><br><span class="line">- source</span><br><span class="line">    + img</span><br><span class="line">    + js</span><br><span class="line">    + scss</span><br><span class="line">    - views</span><br><span class="line">        + application</span><br><span class="line">        + layouts</span><br><span class="line">        </span><br><span class="line">  gulpfile.coffee</span><br><span class="line">  pacakge.json</span><br></pre></td></tr></table></figure></p>
<h3 id="构建模版"><a href="#构建模版" class="headerlink" title="构建模版"></a>构建模版</h3><p>视图模版使用<a href="https://www.npmjs.com/package/gulp-html-extend" target="_blank" rel="noopener">gulp-html-extend</a>进行解析，使用方法及配置可参考其官方文档。<br>在<code>layouts</code>目录创建以下文件，如果有多套模版可以在<code>layouts</code>下创建子目录区分。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">- source</span><br><span class="line">    + img</span><br><span class="line">    + js</span><br><span class="line">    + scss</span><br><span class="line">    - views</span><br><span class="line">        + application</span><br><span class="line">        - layouts</span><br><span class="line">            _meta.html</span><br><span class="line">            _link.html</span><br><span class="line">            _script.html</span><br><span class="line">            _header.html</span><br><span class="line">            _footer.html</span><br><span class="line">            default.html</span><br></pre></td></tr></table></figure></p>
<p><code>@@include</code>可将需要的局部模版导入<br><code>@@placeholder</code>可配置模版内容，下面例子会给出。<br><em><code>source/layouts/default.html</code></em><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- @@placeholder= title --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- @@include ./_meta.html --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- @@include ./_link.html --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- @@include ./_script.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Wrapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- @@include ./_header.html --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- @@placeholder= content --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- @@include ./_footer.html --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在此配置<code>meata</code>标签<br><em><code>source/layouts/_meta.html</code></em><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Style-Type"</span> <span class="attr">content</span>=<span class="string">"text/css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Script-Type"</span> <span class="attr">content</span>=<span class="string">"text/javascript"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在此配置link的内容，如css，font，icon等<br><em><code>source/layouts/_link.html</code></em><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"/img/favicon.ico"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/css/style.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"all"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在此配置需要的js文件<br><em><code>source/layouts/_script.html</code></em><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/jquery-1.11.1.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/index.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在此配置头部内容<br><em><code>source/layouts/_header.html</code></em><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span>&gt;</span></span><br><span class="line">  我是头部</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在此配置底部内容<br><em><code>source/layouts/_footer.html</code></em><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-footer"</span>&gt;</span></span><br><span class="line">    我是底部</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>到目前为止已经构建好视图模版了。</p>
<h3 id="使用模版"><a href="#使用模版" class="headerlink" title="使用模版"></a>使用模版</h3><p>在<code>application</code>目录新建<code>index.html</code>文件<br><code>@@master</code>指定模版文件<br><code>@@block</code>自定义开始块<br><code>@@close</code>自定义结束块<br><em><code>source/views/application</code></em><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- @@master = ../layouts/default.html--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- @@block = title--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- @@close--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- @@block = content--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    我是内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- @@close--&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>生成的文件内容如下<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Style-Type"</span> <span class="attr">content</span>=<span class="string">"text/css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Script-Type"</span> <span class="attr">content</span>=<span class="string">"text/javascript"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"/img/favicon.ico"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/css/style.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"all"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/jquery-1.11.1.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/index.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span>&gt;</span></span><br><span class="line">      我是头部</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">        我是内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-footer"</span>&gt;</span></span><br><span class="line">        我是底部</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="建立task"><a href="#建立task" class="headerlink" title="建立task"></a>建立task</h3><p>完成模版构建之后，我们需要对网页对静态资源使用gulp进行处理。<br>下面是我对gulp任务，使用CoffeeScript，然后我会讲解一个任务。有一点需要注意的地方，<code>gulp-ruby-sass</code>需要有<code>ruby</code>语言环境，这是安装传送门<a href="https://www.ruby-lang.org/en/downloads/" target="_blank" rel="noopener">Ruby</a>，一般Mac会自带Ruby。</p>
<p><em><code>gulpfile.coffee</code></em><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp         = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line">del          = <span class="built_in">require</span>(<span class="string">'del'</span>)</span><br><span class="line">cache        = <span class="built_in">require</span>(<span class="string">'gulp-cache'</span>)</span><br><span class="line">uglify       = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</span><br><span class="line">concat       = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>)</span><br><span class="line">jshint       = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>)</span><br><span class="line">broeserSync  = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>)</span><br><span class="line">sitemap      = <span class="built_in">require</span>(<span class="string">'gulp-sitemap'</span>)</span><br><span class="line">imagemin     = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>)</span><br><span class="line">sass         = <span class="built_in">require</span>(<span class="string">'gulp-ruby-sass'</span>)</span><br><span class="line">minifycss    = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>)</span><br><span class="line">extender     = <span class="built_in">require</span>(<span class="string">'gulp-html-extend'</span>)</span><br><span class="line">minifyHTML   = <span class="built_in">require</span>(<span class="string">'gulp-minify-html'</span>)</span><br><span class="line">autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>)</span><br><span class="line"></span><br><span class="line">gulp.task <span class="string">'browser-sync'</span>, [<span class="string">'rebuild'</span>], -&gt;</span><br><span class="line">  broeserSync(&#123;</span><br><span class="line">    server: &#123;</span><br><span class="line">      baseDir: <span class="string">'./dist/'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    port: <span class="number">8080</span>,</span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">    ui: &#123;</span><br><span class="line">      port: <span class="number">8081</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">gulp.task <span class="string">'rebuild'</span>, -&gt;</span><br><span class="line">  broeserSync.reload()</span><br><span class="line"></span><br><span class="line">gulp.task <span class="string">'watch'</span>, -&gt;</span><br><span class="line">  gulp.watch([<span class="string">'./dist/**/*.*'</span>], [<span class="string">'rebuild'</span>])</span><br><span class="line">  gulp.watch([<span class="string">'./source/**/*.html'</span>], [<span class="string">'extend'</span>])</span><br><span class="line">  gulp.watch([<span class="string">'./source/**/*.scss'</span>], [<span class="string">'styles'</span>])</span><br><span class="line">  gulp.watch([<span class="string">'./source/**/*.js'</span>], [<span class="string">'js'</span>])</span><br><span class="line">  gulp.watch([<span class="string">'./source/**/*.jpg'</span>,<span class="string">'./source/**/*.png'</span>], [<span class="string">'image'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gulp.task <span class="string">'styles'</span>, -&gt; </span><br><span class="line">  <span class="keyword">return</span> sass(<span class="string">'./source/scss/**/*.scss'</span>, &#123; <span class="attr">style</span>: <span class="string">'compressed'</span> &#125;)</span><br><span class="line">  .pipe autoprefixer(<span class="string">'last 2 version'</span>, <span class="string">'safari 5'</span>, <span class="string">'ie 8'</span>, <span class="string">'ie 9'</span>, <span class="string">'opera 12.1'</span>, <span class="string">'ios 6'</span>, <span class="string">'android 4'</span>)</span><br><span class="line">  .pipe concat(<span class="string">'style.css'</span>)</span><br><span class="line">  .pipe minifycss()</span><br><span class="line">  .pipe gulp.dest(<span class="string">'./dist/css/'</span>)</span><br><span class="line"></span><br><span class="line">gulp.task <span class="string">'extend'</span>, -&gt; </span><br><span class="line">  gulp.src(<span class="string">'./source/views/application/**/*.html'</span>) </span><br><span class="line">  .pipe extender(&#123;<span class="attr">annotations</span>:<span class="literal">false</span>,<span class="attr">verbose</span>:<span class="literal">false</span>&#125;)</span><br><span class="line">  .pipe minifyHTML()</span><br><span class="line">  .pipe gulp.dest(<span class="string">'./dist/'</span>)</span><br><span class="line"></span><br><span class="line">gulp.task <span class="string">'js'</span>, -&gt; </span><br><span class="line">  gulp.src(<span class="string">'./source/**/*.js'</span>) </span><br><span class="line">  .pipe uglify()</span><br><span class="line">  .pipe gulp.dest(<span class="string">'./dist/'</span>)</span><br><span class="line"></span><br><span class="line">gulp.task <span class="string">'image'</span>, -&gt; </span><br><span class="line">  gulp.src([<span class="string">'./source/**/*.jpg'</span>,<span class="string">'./source/**/*.png'</span>]) </span><br><span class="line">  .pipe cache(imagemin(&#123;<span class="attr">optimizationLevel</span>: <span class="number">3</span>, <span class="attr">progressive</span>: <span class="literal">true</span>, <span class="attr">interlaced</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">  .pipe gulp.dest(<span class="string">'./dist/'</span>)</span><br><span class="line"></span><br><span class="line">gulp.task <span class="string">'clean'</span>, -&gt; </span><br><span class="line">  del [<span class="string">'./dist/css'</span>,<span class="string">'./dist/js'</span>,<span class="string">'./dist/gallery'</span>, <span class="string">'./dist/img'</span>, <span class="string">'./dist/**/*.html'</span>]</span><br><span class="line"></span><br><span class="line">gulp.task <span class="string">'sitemap'</span>, -&gt;</span><br><span class="line">    gulp.src(<span class="string">'dist/**/*.html'</span>, &#123; <span class="attr">read</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">        .pipe sitemap(&#123; <span class="attr">siteUrl</span>: <span class="string">'http://yulive.cn'</span> &#125;)</span><br><span class="line">        .pipe gulp.dest(<span class="string">'./dist/'</span>)</span><br><span class="line"></span><br><span class="line">gulp.task <span class="string">'build'</span>, [<span class="string">'styles'</span>, <span class="string">'js'</span>, <span class="string">'image'</span>, <span class="string">'extend'</span>]</span><br><span class="line"></span><br><span class="line">gulp.task <span class="string">'default'</span>, [<span class="string">'browser-sync'</span>, <span class="string">'watch'</span>]</span><br></pre></td></tr></table></figure></p>
<p><code>styles</code>任务，会将<code>scss</code>目录下的样式文件编译成<code>css</code>，然后<code>autoprefixer</code>方法会自动添加不同浏览器的前缀，<code>concat</code>合并成一个文件<code>style.css</code>后会使用<code>minifycss</code>压缩，最后输出到指定到目录<code>gulp.dest</code>。如果能看懂这个任务其他也都ok了。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task <span class="string">'styles'</span>, -&gt; </span><br><span class="line">  <span class="keyword">return</span> sass(<span class="string">'./source/scss/**/*.scss'</span>, &#123; <span class="attr">style</span>: <span class="string">'compressed'</span> &#125;)</span><br><span class="line">  .pipe autoprefixer(<span class="string">'last 2 version'</span>, <span class="string">'safari 5'</span>, <span class="string">'ie 8'</span>, <span class="string">'ie 9'</span>, <span class="string">'opera 12.1'</span>, <span class="string">'ios 6'</span>, <span class="string">'android 4'</span>)</span><br><span class="line">  .pipe concat(<span class="string">'style.css'</span>)</span><br><span class="line">  .pipe minifycss()</span><br><span class="line">  .pipe gulp.dest(<span class="string">'./dist/css/'</span>)</span><br></pre></td></tr></table></figure></p>
<p><code>extend</code>任务会将模版文件解析并生成相应的html<br><code>js</code>压缩js<br><code>image</code>对图片资源进行无损压缩<br><code>clean</code>清空编译目录<br><code>sitemap</code>生成站点地图，便于SEO<br><code>watch</code>监听文件，当发生改动时调用相应的任务<br><code>build</code>用于构建编译文件<br><code>default</code>默认任务，使用<code>gulp</code>命令执行的任务<br><code>browser-sync</code>用于开发环境实时更新页面，免去手动刷新的烦恼<br><code>rebuild</code>当资源文件更新时让<code>browser-sync</code>重新加载变更</p>
<p> 完成这些之后，可以使用<code>gulp</code> + 任务名称执行相应的任务</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>这是我的前端工作流，构建静态页面速度是不是一下子就提升了呢。</p>
]]></content>
      <categories>
        <category>Front-end</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>元编程之重写will_paginate</title>
    <url>/20160507/%E5%85%83%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%87%8D%E5%86%99will-paginate/</url>
    <content><![CDATA[<p><img src="/images/cover/will-paginate-bg.png" alt="will-paginate-bg"></p>
<h2 id="为什么重写will-paginate"><a href="#为什么重写will-paginate" class="headerlink" title="为什么重写will_paginate"></a>为什么重写will_paginate</h2><p>相信很多同学在使用<code>will_paginate</code>的时候都会遇到这样一个问题：<br>自带分页样式太LOW了，有木有好看一点的，能不能自己定制呢。于是我们在<a href="https://rubygems.org/search?utf8=%E2%9C%93&amp;query=will_paginate" target="_blank" rel="noopener">RubyGems</a>搜索will_paginate的主题gem包。发现有各种各样主题的，但却找不到你想要的，怎么办？</p>
<a id="more"></a>
<p>本着自己动手丰衣足食的理念，我们开始动手改造<code>will_paginate</code>。<br>（注：笔者使用的是<code>Materialize</code>的前端框架，下文将以<code>Materialize</code>的分页为例）</p>
<h2 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h2><p>先来看看<code>will_paginate</code>默认的效果是怎么样？为了方便后续区分，默认效果叫<code>Old</code>，修改后效果叫<code>New</code><br><img src="/images/will-paginate/will-paginate-pagelist.png" alt="will-paginate-pagelist"><br>上图中的<code>Old</code>分页稍显简陋。</p>
<p>下图是修改后需要<code>New</code>的效果<br><img src="/images/will-paginate/will-paginate-materiaizepg.png" alt="will-paginate-materiaizepg"></p>
<h2 id="分析结构"><a href="#分析结构" class="headerlink" title="分析结构"></a>分析结构</h2><p><code>Old</code>代码结构<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"previous_page"</span> <span class="attr">rel</span>=<span class="string">"prev"</span> <span class="attr">href</span>=<span class="string">"/admins/admins?page=5"</span>&gt;</span>← Previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"start"</span> <span class="attr">href</span>=<span class="string">"/admins/admins?page=1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/admins/admins?page=2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/admins/admins?page=3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/admins/admins?page=4"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"prev"</span> <span class="attr">href</span>=<span class="string">"/admins/admins?page=5"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"next"</span> <span class="attr">href</span>=<span class="string">"/admins/admins?page=7"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/admins/admins?page=8"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/admins/admins?page=9"</span>&gt;</span>9<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/admins/admins?page=10"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"gap"</span>&gt;</span>…<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/admins/admins?page=24"</span>&gt;</span>24<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/admins/admins?page=25"</span>&gt;</span>25<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"next_page"</span> <span class="attr">rel</span>=<span class="string">"next"</span> <span class="attr">href</span>=<span class="string">"/admins/admins?page=7"</span>&gt;</span>Next →<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>从代码结构中可以知道，共有5种形式DOM:</p>
<ol>
<li>previous_page</li>
<li>next_page</li>
<li>current</li>
<li>gap</li>
<li>default</li>
</ol>
<p>了解结构后，需要将<code>Old</code>修改成下面的结构才能有<code>New</code>的效果<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#!"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"material-icons"</span>&gt;</span>chevron_left<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#!"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"waves-effect"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#!"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"waves-effect"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#!"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"waves-effect"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#!"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"waves-effect"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#!"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"waves-effect"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#!"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"material-icons"</span>&gt;</span>chevron_right<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="分析will-paginate源码"><a href="#分析will-paginate源码" class="headerlink" title="分析will_paginate源码"></a>分析<code>will_paginate</code>源码</h2><p>将<a href="https://github.com/mislav/will_paginate" target="_blank" rel="noopener">will_paginate</a>的源码<code>Clone</code>到本地。<br>进入<em><code>lib</code></em>目录下，这里就不介绍<code>will_paginate</code>到源码结构了，有时间自己看看。我们直奔主题，打开<em><code>link_renderer.rb</code></em>文件。我在里面添加了部分代码中文解释，对于修改结构已经够用了<br><em><code>lib/will_paginate/view_helpers/link_renderer.rb</code></em><br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'cgi'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'will_paginate/core_ext'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'will_paginate/view_helpers'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'will_paginate/view_helpers/link_renderer_base'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">WillPaginate</span></span></span><br><span class="line">  <span class="class"><span class="keyword">module</span> <span class="title">ViewHelpers</span></span></span><br><span class="line">    <span class="comment"># This class does the heavy lifting of actually building the pagination</span></span><br><span class="line">    <span class="comment"># links. It is used by +will_paginate+ helper internally.</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LinkRenderer</span> &lt; LinkRendererBase</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># * +collection+ is a WillPaginate::Collection instance or any other object</span></span><br><span class="line">      <span class="comment">#   that conforms to that API</span></span><br><span class="line">      <span class="comment"># * +options+ are forwarded from +will_paginate+ view helper</span></span><br><span class="line">      <span class="comment"># * +template+ is the reference to the template being rendered</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">prepare</span><span class="params">(collection, options, template)</span></span></span><br><span class="line">        <span class="keyword">super</span>(collection, options)</span><br><span class="line">        @template = template</span><br><span class="line">        @container_attributes = @base_url_params = <span class="literal">nil</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Process it! This method returns the complete HTML string which contains</span></span><br><span class="line">      <span class="comment"># pagination links. Feel free to subclass LinkRenderer and change this</span></span><br><span class="line">      <span class="comment"># method as you see fit.</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">to_html</span></span></span><br><span class="line">        html = pagination.map <span class="keyword">do</span> <span class="params">|item|</span></span><br><span class="line">          item.is_a?(Fixnum) ?</span><br><span class="line">            page_number(item) <span class="symbol">:</span></span><br><span class="line">            send(item)</span><br><span class="line">        <span class="keyword">end</span>.join(@options[<span class="symbol">:link_separator</span>])</span><br><span class="line">        </span><br><span class="line">        @options[<span class="symbol">:container</span>] ? html_container(html) : html</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Returns the subset of +options+ this instance was initialized with that</span></span><br><span class="line">      <span class="comment"># represent HTML attributes for the container element of pagination links.</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">container_attributes</span></span></span><br><span class="line">        @container_attributes <span class="params">||</span>= @options.except(*(ViewHelpers.pagination_options.keys + [<span class="symbol">:renderer</span>] - [<span class="symbol">:class</span>]))</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">    protected</span><br><span class="line">        </span><br><span class="line">      <span class="comment"># page_number方法显示分页元素</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">page_number</span><span class="params">(page)</span></span></span><br><span class="line">        <span class="keyword">unless</span> page == current_page</span><br><span class="line">          link(page, page, <span class="symbol">:rel</span> =&gt; rel_value(page))</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          tag(<span class="symbol">:em</span>, page, <span class="symbol">:class</span> =&gt; <span class="string">'current'</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># gap方法在页数超过设定值时用...代替</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">gap</span></span></span><br><span class="line">        text = @template.will_paginate_translate(<span class="symbol">:page_gap</span>) &#123; <span class="string">'&amp;hellip;'</span> &#125;</span><br><span class="line">        <span class="string">%(&lt;span class="gap"&gt;<span class="subst">#&#123;text&#125;</span>&lt;/span&gt;)</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># previous_page方法显示上一页</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">previous_page</span></span></span><br><span class="line">        num = @collection.current_page &gt; <span class="number">1</span> &amp;&amp; @collection.current_page - <span class="number">1</span></span><br><span class="line">        previous_or_next_page(num, @options[<span class="symbol">:previous_label</span>], <span class="string">'previous_page'</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># next_page方法显示下一页</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">next_page</span></span></span><br><span class="line">        num = @collection.current_page &lt; total_pages &amp;&amp; @collection.current_page + <span class="number">1</span></span><br><span class="line">        previous_or_next_page(num, @options[<span class="symbol">:next_label</span>], <span class="string">'next_page'</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 边界值按钮</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">previous_or_next_page</span><span class="params">(page, text, classname)</span></span></span><br><span class="line">        <span class="keyword">if</span> page</span><br><span class="line">          link(text, page, <span class="symbol">:class</span> =&gt; classname)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          tag(<span class="symbol">:span</span>, text, <span class="symbol">:class</span> =&gt; classname + <span class="string">' disabled'</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">html_container</span><span class="params">(html)</span></span></span><br><span class="line">        tag(<span class="symbol">:div</span>, html, container_attributes)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># Returns URL params for +page_link_or_span+, taking the current GET params</span></span><br><span class="line">      <span class="comment"># and &lt;tt&gt;:params&lt;/tt&gt; option into account.</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(page)</span></span></span><br><span class="line">        raise NotImplementedError</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">    private</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">param_name</span></span></span><br><span class="line">        @options[<span class="symbol">:param_name</span>].to_s</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 私有方法, 构建a标签</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">link</span><span class="params">(text, target, attributes = &#123;&#125;)</span></span></span><br><span class="line">        <span class="keyword">if</span> target.is_a? Fixnum</span><br><span class="line">          attributes[<span class="symbol">:rel</span>] = rel_value(target)</span><br><span class="line">          target = url(target)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        attributes[<span class="symbol">:href</span>] = target</span><br><span class="line">        tag(<span class="symbol">:a</span>, text, attributes)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 私有方法, 包裹标签</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">tag</span><span class="params">(name, value, attributes = &#123;&#125;)</span></span></span><br><span class="line">        string_attributes = attributes.inject(<span class="string">''</span>) <span class="keyword">do</span> <span class="params">|attrs, pair|</span></span><br><span class="line">          <span class="keyword">unless</span> pair.last.<span class="literal">nil</span>?</span><br><span class="line">            attrs &lt;&lt; <span class="string">%( <span class="subst">#&#123;pair.first&#125;</span>="<span class="subst">#&#123;CGI::escapeHTML(pair.last.to_s)&#125;</span>")</span></span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">          attrs</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="string">"&lt;<span class="subst">#&#123;name&#125;</span><span class="subst">#&#123;string_attributes&#125;</span>&gt;<span class="subst">#&#123;value&#125;</span>&lt;/<span class="subst">#&#123;name&#125;</span>&gt;"</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">rel_value</span><span class="params">(page)</span></span></span><br><span class="line">        <span class="keyword">case</span> page</span><br><span class="line">        <span class="keyword">when</span> @collection.current_page - <span class="number">1</span>; <span class="string">'prev'</span> + (page == <span class="number">1</span> ? <span class="string">' start'</span> : <span class="string">''</span>)</span><br><span class="line">        <span class="keyword">when</span> @collection.current_page + <span class="number">1</span>; <span class="string">'next'</span></span><br><span class="line">        <span class="keyword">when</span> <span class="number">1</span>; <span class="string">'start'</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">symbolized_update</span><span class="params">(target, other)</span></span></span><br><span class="line">        other.each <span class="keyword">do</span> <span class="params">|key, value|</span></span><br><span class="line">          key = key.to_sym</span><br><span class="line">          existing = target[key]</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">if</span> value.is_a?(Hash) <span class="keyword">and</span> (existing.is_a?(Hash) <span class="keyword">or</span> existing.<span class="literal">nil</span>?)</span><br><span class="line">            symbolized_update(existing <span class="params">||</span> (target[key] = &#123;&#125;), value)</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            target[key] = value</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>
<h2 id="打开类"><a href="#打开类" class="headerlink" title="打开类"></a>打开类</h2><p>通过分析我们已经了解需要修改哪些方法</p>
<ol>
<li><code>page_number</code></li>
<li><code>previous_page</code></li>
<li><code>next_page</code></li>
<li><code>previous_or_next_page</code></li>
</ol>
<p>同时我们还将使用两个私有方法 </p>
<ol>
<li><code>link(text, target, attributes = {})</code></li>
<li><code>tag(name, value, attributes = {})</code></li>
</ol>
<p>回到工作项目，新建文件。下面使用了元编程的法术——打开类。这也是作为动态语言的优点。修改过的地方我加了注释。<br><em><code>lib/materialize_renderer.rb</code></em><br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'cgi'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'will_paginate/core_ext'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'will_paginate/view_helpers'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'will_paginate/view_helpers/link_renderer_base'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">WillPaginate</span></span></span><br><span class="line">  <span class="class"><span class="keyword">module</span> <span class="title">ViewHelpers</span></span></span><br><span class="line">    <span class="comment"># This class does the heavy lifting of actually building the pagination</span></span><br><span class="line">    <span class="comment"># links. It is used by +will_paginate+ helper internally.</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LinkRenderer</span> &lt; LinkRendererBase</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># * +collection+ is a WillPaginate::Collection instance or any other object</span></span><br><span class="line">      <span class="comment">#   that conforms to that API</span></span><br><span class="line">      <span class="comment"># * +options+ are forwarded from +will_paginate+ view helper</span></span><br><span class="line">      <span class="comment"># * +template+ is the reference to the template being rendered</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">prepare</span><span class="params">(collection, options, template)</span></span></span><br><span class="line">        <span class="keyword">super</span>(collection, options)</span><br><span class="line">        @template = template</span><br><span class="line">        @container_attributes = @base_url_params = <span class="literal">nil</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Process it! This method returns the complete HTML string which contains</span></span><br><span class="line">      <span class="comment"># pagination links. Feel free to subclass LinkRenderer and change this</span></span><br><span class="line">      <span class="comment"># method as you see fit.</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">to_html</span></span></span><br><span class="line">        html = pagination.map <span class="keyword">do</span> <span class="params">|item|</span></span><br><span class="line">          item.is_a?(Fixnum) ?</span><br><span class="line">            page_number(item) <span class="symbol">:</span></span><br><span class="line">            send(item)</span><br><span class="line">        <span class="keyword">end</span>.join(@options[<span class="symbol">:link_separator</span>])</span><br><span class="line">        </span><br><span class="line">        @options[<span class="symbol">:container</span>] ? html_container(html) : html</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Returns the subset of +options+ this instance was initialized with that</span></span><br><span class="line">      <span class="comment"># represent HTML attributes for the container element of pagination links.</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">container_attributes</span></span></span><br><span class="line">        @container_attributes <span class="params">||</span>= @options.except(*(ViewHelpers.pagination_options.keys + [<span class="symbol">:renderer</span>] - [<span class="symbol">:class</span>]))</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">    protected</span><br><span class="line">    </span><br><span class="line">      <span class="comment"># 修改后，我使用私有方法tag，在link外面套了一层li，同时修改了class属性</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">page_number</span><span class="params">(page)</span></span></span><br><span class="line">        <span class="keyword">unless</span> page == current_page</span><br><span class="line">          <span class="comment"># link(page, page, :rel =&gt; rel_value(page))</span></span><br><span class="line">          tag <span class="symbol">:li</span>, link(page, page, <span class="symbol">:rel</span> =&gt; rel_value(page)), <span class="symbol">:class</span> =&gt; <span class="string">'waves-effect'</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="comment"># tag(:em, page, :class =&gt; 'current')</span></span><br><span class="line">          tag(<span class="symbol">:li</span>, link(page, <span class="string">'#!'</span>, <span class="symbol">:rel</span> =&gt; rel_value(page)), <span class="symbol">:class</span> =&gt; <span class="string">'active'</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">gap</span></span></span><br><span class="line">        text = @template.will_paginate_translate(<span class="symbol">:page_gap</span>) &#123; <span class="string">'&amp;hellip;'</span> &#125;</span><br><span class="line">        <span class="string">%(&lt;span class="gap"&gt;<span class="subst">#&#123;text&#125;</span>&lt;/span&gt;)</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 这里没有修改全局变量<span class="doctag">@options</span>，使用打开类最好不要修改全局变量。所以直接改了icon</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">previous_page</span></span></span><br><span class="line">        num = @collection.current_page &gt; <span class="number">1</span> &amp;&amp; @collection.current_page - <span class="number">1</span></span><br><span class="line">        <span class="comment"># previous_or_next_page(num, <span class="doctag">@options</span>[:previous_label], 'previous_page')</span></span><br><span class="line">        previous_or_next_page(num, <span class="string">'chevron_left'</span>, <span class="string">'previous_page'</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 这里没有修改全局变量<span class="doctag">@options</span>，使用打开类最好不要修改全局变量。所以直接改了icon</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">next_page</span></span></span><br><span class="line">        num = @collection.current_page &lt; total_pages &amp;&amp; @collection.current_page + <span class="number">1</span></span><br><span class="line">        <span class="comment"># previous_or_next_page(num, <span class="doctag">@options</span>[:next_label], 'next_page')</span></span><br><span class="line">        previous_or_next_page(num, <span class="string">'chevron_right'</span>, <span class="string">'next_page'</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 修改了边界值的按钮，增加了局部变量icon_item用于google icon</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">previous_or_next_page</span><span class="params">(page, text, classname)</span></span></span><br><span class="line">        icon_item = tag <span class="symbol">:i</span>, text, <span class="symbol">:class</span> =&gt; <span class="string">'material-icons'</span> </span><br><span class="line">        <span class="keyword">if</span> page</span><br><span class="line">          <span class="comment"># link(text, page, :class =&gt; classname)</span></span><br><span class="line">          tag(<span class="symbol">:li</span>, link(icon_item, page), <span class="symbol">:class</span> =&gt; <span class="string">'waves-effect'</span>)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="comment"># tag(:span, text, :class =&gt; classname + ' disabled')</span></span><br><span class="line">          tag(<span class="symbol">:li</span>, link(icon_item, <span class="string">'#!'</span>), <span class="symbol">:class</span> =&gt; <span class="string">'disabled'</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">html_container</span><span class="params">(html)</span></span></span><br><span class="line">        tag(<span class="symbol">:div</span>, html, container_attributes)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># Returns URL params for +page_link_or_span+, taking the current GET params</span></span><br><span class="line">      <span class="comment"># and &lt;tt&gt;:params&lt;/tt&gt; option into account.</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(page)</span></span></span><br><span class="line">        raise NotImplementedError</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">    private</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">param_name</span></span></span><br><span class="line">        @options[<span class="symbol">:param_name</span>].to_s</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">link</span><span class="params">(text, target, attributes = &#123;&#125;)</span></span></span><br><span class="line">        <span class="keyword">if</span> target.is_a? Fixnum</span><br><span class="line">          attributes[<span class="symbol">:rel</span>] = rel_value(target)</span><br><span class="line">          target = url(target)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        attributes[<span class="symbol">:href</span>] = target</span><br><span class="line">        tag(<span class="symbol">:a</span>, text, attributes)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">tag</span><span class="params">(name, value, attributes = &#123;&#125;)</span></span></span><br><span class="line">        string_attributes = attributes.inject(<span class="string">''</span>) <span class="keyword">do</span> <span class="params">|attrs, pair|</span></span><br><span class="line">          <span class="keyword">unless</span> pair.last.<span class="literal">nil</span>?</span><br><span class="line">            attrs &lt;&lt; <span class="string">%( <span class="subst">#&#123;pair.first&#125;</span>="<span class="subst">#&#123;CGI::escapeHTML(pair.last.to_s)&#125;</span>")</span></span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">          attrs</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="string">"&lt;<span class="subst">#&#123;name&#125;</span><span class="subst">#&#123;string_attributes&#125;</span>&gt;<span class="subst">#&#123;value&#125;</span>&lt;/<span class="subst">#&#123;name&#125;</span>&gt;"</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">rel_value</span><span class="params">(page)</span></span></span><br><span class="line">        <span class="keyword">case</span> page</span><br><span class="line">        <span class="keyword">when</span> @collection.current_page - <span class="number">1</span>; <span class="string">'prev'</span> + (page == <span class="number">1</span> ? <span class="string">' start'</span> : <span class="string">''</span>)</span><br><span class="line">        <span class="keyword">when</span> @collection.current_page + <span class="number">1</span>; <span class="string">'next'</span></span><br><span class="line">        <span class="keyword">when</span> <span class="number">1</span>; <span class="string">'start'</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">symbolized_update</span><span class="params">(target, other)</span></span></span><br><span class="line">        other.each <span class="keyword">do</span> <span class="params">|key, value|</span></span><br><span class="line">          key = key.to_sym</span><br><span class="line">          existing = target[key]</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">if</span> value.is_a?(Hash) <span class="keyword">and</span> (existing.is_a?(Hash) <span class="keyword">or</span> existing.<span class="literal">nil</span>?)</span><br><span class="line">            symbolized_update(existing <span class="params">||</span> (target[key] = &#123;&#125;), value)</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            target[key] = value</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>
<h2 id="加入到initializers"><a href="#加入到initializers" class="headerlink" title="加入到initializers"></a>加入到<code>initializers</code></h2><p>完成上面的修改后，是不起作用的，还需要加入到<code>initializers</code>中，才会加载我们的打开类，新建文件<br><em><code>config/initializers/will_pagination_materialize.rb</code></em><br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'materialize_renderer'</span></span><br></pre></td></tr></table></figure></p>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>完成这些操作之后，重启服务器。恭喜你，完成了对<code>will_paginate</code>的修改。看看<code>New</code>吧<br><img src="/images/will-paginate/will-paginate-done.png" alt="will-paginate-done"></p>
]]></content>
      <categories>
        <category>Ruby on Rails</category>
      </categories>
      <tags>
        <tag>will_paginate</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails 从入门到完全放弃</title>
    <url>/20160721/Rails%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%8C%E5%85%A8%E6%94%BE%E5%BC%83/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是一篇关于Rails的开发经历的文章，旨在将Rails中遇到的各种问题分享给还未接触Rails或是已经上路的朋友。虽说做Rails的开发时间不长，刚好一年多。但是，在这一年的时间中，该使用的技术架构，<code>Ruby-China</code> 推荐的Gem包，都尝试过使用过了，也为业务开发了一些Gem包。谈不上精通Rails，如果把Rails作者定为最高等级，他是F1赛车手，我该是个跑出租的老司机。<br><a id="more"></a></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>早前有做过Java，PHP，.Net的开发，相信玩Rails的朋友多多少少也都有写过，不过主要还是以前端为主。早在IE7/IE8 时代做前端开发，那时<code>Node.js</code>还没火起来，前端成了低技术含量又耗体力又没地位的活。不过，还好有<code>Node.js</code>，让我赶上了这个时代。</p>
<h2 id="怎么接触到Rails"><a href="#怎么接触到Rails" class="headerlink" title="怎么接触到Rails"></a>怎么接触到Rails</h2><p>当公司的一个PHP的多人即时聊天项目接近尾声时，我们在思考能不能将程序员生产力解放出来？是不是可以尝试一些其他的技术架构。很快，经过多方研究，发现Rails是单兵作战的神器。相比PHP，可以达到Rails : PHP = 1 : 4 的效率。但对于一个技术架构成熟的技术团队来说，放弃原有的技术架构去使用一个从未接触过新技术，时间成本和决心是很重要的。但挑战往往会带来意想不到的收获。</p>
<h2 id="在深大图书馆的-Rails之道"><a href="#在深大图书馆的-Rails之道" class="headerlink" title="在深大图书馆的 Rails之道"></a>在深大图书馆的 Rails之道</h2><p>学习新技术的第一件事就是去找学习资料。在google上找了很久，发现深大图书馆有各种各样的技术书籍，果不其然，在这里找到了<code>Ruby元编程</code>，<code>Rails之道</code>，<code>敏捷开发之道</code>这些书籍，但是版本比较老。为了能够掌握最新版本的知识，下载了相应的英文版PDF，一起结合。修炼Rails的过程是痛并快乐着的，因为要转变思维模式，去接受新的思想，去了解诸多的语法糖因何而生。学累了就躺会，饿了就上个外卖，脑袋成浆糊了就洗把脸。其实接触一门新语言并不是多难，这是一个循序渐进的过程。好在前端底子厚，学习<code>ERB</code>，<code>UJS</code>，<code>RJS</code>的过程比较轻松，但是<code>Turbolinks</code>对于前端工程师来说就是噩梦，一直到现在我都用的Pjax。不喜欢<code>Turbolinks</code>的做法，<code>Pjax</code>显得很机智。关于<code>Turbolinks</code>和<code>Pjax</code>我并不是挑起战争，仁者见仁，智者见智。</p>
<h2 id="用Rails对电商的探索"><a href="#用Rails对电商的探索" class="headerlink" title="用Rails对电商的探索"></a>用Rails对电商的探索</h2><p>在构建电商系统的时候，很自然就 pull 了<code>ECShop</code>的源码来学习。<br>业务上的问题并不大，有现成案例，结合需求来订制开发很快。<br>同时在开发过程中<code>Ruby-China</code>社区也提供了许多帮助。类似查询 <code>N + 1</code>问题，<code>CanCanCan</code>权限问题…..</p>
<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><h4 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h4><p>对于图片等资源的处理，最开始没有选用<code>Carrierwave</code>的方案，而是使用<code>七牛云存储JS SDK</code>，开始接触的时候，发现并没有多少参考文档，于是想是不是这个东西比较简单也比较少人用，还是<code>Ruby-China</code> 社区的朋友太懒。后面深入研究后发现，这类云存储的方法还是用得比较多，也比较便捷，但对于新手还是有一定门槛，所以做完之后顺带写了相应的<a href="https://ruby-china.org/topics/29010" target="_blank" rel="noopener">教程</a>造福社会。</p>
<h4 id="富文本编辑器上传图片"><a href="#富文本编辑器上传图片" class="headerlink" title="富文本编辑器上传图片"></a>富文本编辑器上传图片</h4><p>在富文本编辑器中<a href="https://www.froala.com/wysiwyg-editor" target="_blank" rel="noopener">Froala</a>可以说是佼佼者，我们选用了Froala。但是遇到一个问题，Froala中的图片上传仅支持<code>Amazon云</code>，因此不得不改造<code>Froala</code>的源码。幸运的是这个过程并不困难，我将改造后的Froala用策略模式做成了一个Gem: <a href="https://github.com/tkvern/wysiwyg-rails-qiniu" target="_blank" rel="noopener">wysiwyg-rails-qiniu</a>，又一次造福社会。</p>
<h3 id="猴子补丁"><a href="#猴子补丁" class="headerlink" title="猴子补丁"></a>猴子补丁</h3><p>在使用<code>will_paginate</code>的时候，分页的结构与样式与<code>Materia UI</code>的风格并不相符，并且没有找到合适的Gem，所以大胆的用起了<code>打开类</code>的法术，并且纪录了这一过程《 <a href="https://tkvern.com/20160507/%E5%85%83%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%87%8D%E5%86%99will-paginate/">为什么重写will_paginate</a> 》</p>
<h3 id="Pjax"><a href="#Pjax" class="headerlink" title="Pjax"></a>Pjax</h3><p>使用Pjax的过程相对比较顺利，在听完<code>Rei</code>大神对<code>Turbolinks</code>的讲解之后，还是坚定不移的使用<code>Pjax</code>，值得注意的是在使用<code>WiceGrid</code>的时候，会存在初始化组件问题，当时是使用<code>data-skip-pjax</code>解决。不过现在前后端分离，前端使用React ＋ Redux操作DOM比以往轻松多了。事实上<code>WiceGrid</code>的筛选方式对于用户并不友好。</p>
<h3 id="Devise-和-OmniAuth"><a href="#Devise-和-OmniAuth" class="headerlink" title="Devise 和 OmniAuth"></a>Devise 和 OmniAuth</h3><p>这两个Gem的使用不多，在尝试过<code>Devise</code>之后，还是得自己手写一遍登录等功能，第三方登录开始有考虑用，后面发现还用不上就没有研究了。</p>
<h3 id="china-city"><a href="#china-city" class="headerlink" title="china_city"></a>china_city</h3><p>在使用china_city的时候发现一个小问题。<br><figure class="highlight coffee"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="params">($)</span> -&gt;</span></span><br><span class="line">  $.fn.china_city = <span class="function"><span class="params">()</span> -&gt;</span></span><br><span class="line">    @each -&gt;</span><br><span class="line">      <span class="regexp">//</span> 下面这一行选择.city-select的时候没有限制为select</span><br><span class="line">      <span class="regexp">//</span> 如果<span class="class"><span class="keyword">class</span>有冲突会出现<span class="title">bug</span>.</span></span><br><span class="line">      <span class="regexp">//</span> 所以更正为 $(@).find(<span class="string">'select.city-select'</span>)</span><br><span class="line">      selects = $(@).find(<span class="string">'.city-select'</span>)</span><br><span class="line">      selects.change -&gt;</span><br><span class="line">        .</span><br><span class="line">        .</span><br><span class="line">        .</span><br><span class="line">)(jQuery)</span><br></pre></td></tr></table></figure></p>
<h3 id="前端css框架"><a href="#前端css框架" class="headerlink" title="前端css框架"></a>前端css框架</h3><p>在开发中多次切换了前端技术栈。只想告诉大家，<code>Materia UI</code>并不适合后台使用，而且与诸多的Gem包存在兼容问题，Rails中大部分跟前端有关的Gem都是基于<code>Bootstrap</code>。所以觉得<code>Bootstrap</code>审美疲劳的朋友，还是继续用着吧。</p>
<h3 id="前端JS处理"><a href="#前端JS处理" class="headerlink" title="前端JS处理"></a>前端JS处理</h3><p>随着JS的增多，维护起来会越来越难，在Rails的项目中并没有做JS模块化，而是将JS用工厂模式汇集到了一起，新的功能代码会放到工厂车间去，在使用的时候 new 一个工厂，调用需要的功能即可，同时保证了可复用性。</p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>其实Rails的应用部署相对比较容易，没有太多的内容。只要注意配置文件加后缀防止被新的<code>commit</code>覆盖就好了，一般来说，写好shell脚本实现一键部署也并非难事。</p>
<h3 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h3><p>现今主流的是微信支付和支付宝支付，银联的太蛋疼了。相比与微信支付，支付宝的文档真心不友好，看到吐，而且申请流程繁琐。如果你有打算在项目中使用支付宝支付，最好提前两个月做申请。虽然我不太喜欢马化腾，但是微信支付的文档我给32个赞，使用起来也方便。微信支付的申请流程更加透明一些，每个节点都很快。使用下面的Gem<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">gem <span class="string">'wechat'</span></span><br><span class="line">gem <span class="string">'wx_pay'</span></span><br></pre></td></tr></table></figure></p>
<p>但是也有一个问题待解决，就是在支付时取消订单，数据库状态更新，而微信支付的数据状态未更新，再进行支付的时候就会出现订单号已存在的<code>error</code>。</p>
<h4 id="微信支付虚拟键盘"><a href="#微信支付虚拟键盘" class="headerlink" title="微信支付虚拟键盘"></a>微信支付虚拟键盘</h4><p>在便利店用过微信支付的朋友应该知道， <code>好近</code>这样的第三方支付商的虚拟键盘。开始做虚拟键盘的时候想扒一下<code>好近</code>的源码，奈何用微信开发调试工具根本拿不到。所以只能自己写，遇到的第一个问题就是点击事件延迟300ms，虽说可用<code>Tap</code>事件，被搞得不要不要的。先后尝试了<code>JqueryMobile.Tap</code>，<code>FastClick</code>等解决方法，仍然是在<code>Android</code>上延迟超高，<code>IOS</code>流畅。后面灵感闪现，我为什么要给用户一个完整的点击事件呢？一碰到就触发键盘不是可以让用户得到的反馈跟好么。索性偷懒了一把。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(element).on(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="comment">/* do something */</span>&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Rails-的问题"><a href="#Rails-的问题" class="headerlink" title="Rails 的问题"></a>Rails 的问题</h2><p>Rails从诞生到现在，已有经年。开发过程中最拖慢开发进度的不是需求变动，也不是技术点，使用了<code>assets pipeline</code>的话，在调试页面的时候资源加载总是很慢。实在受不了的时候尝试了结合<code>Node.js</code>，用<code>Gulp</code> <code>browser sync</code>，来代理资源，虽说速度快超多，但不是官方集成的方案，多多少少让强迫症的人很难受。对于业务复杂的电商系统来说，Rails标准的<code>Action</code>肯定不够用，而自定义的写出来感觉不伦不类，可能是功夫不到家，但是没有找到更好的编程参考。其他的就是性能问题了，了解<code>Elixir</code>的朋友应该就知道了。</p>
<h2 id="跟着Peter学Meteor"><a href="#跟着Peter学Meteor" class="headerlink" title="跟着Peter学Meteor"></a>跟着Peter学Meteor</h2><p>响应<code>Peter</code>的号召，我也全情的投入到了<code>Meteor</code> ＋ <code>React</code> ＋ <code>Redux</code> 的大军中去了。虽说没用<code>Meteor</code>做过大型项目，但是小应用做起来是得新应手了。好像也没有看到有多少大型项目用<code>Meteor</code> + <code>React</code> + <code>Redux</code> 技术栈的。用上<code>React</code>前端代码思路和结构变得清晰多了。也可以使用诸多的<code>React</code>组件了。类似于<a href="http://amazeui.org/" target="_blank" rel="noopener">Amazeui</a>，<a href="http://ant.design/" target="_blank" rel="noopener">Ant Design</a>，这些优秀的设计，连UI的费用都省了。</p>
<h2 id="我与Elixir-和-Phoenix-不能说的秘密"><a href="#我与Elixir-和-Phoenix-不能说的秘密" class="headerlink" title="我与Elixir 和 Phoenix 不能说的秘密"></a>我与Elixir 和 Phoenix 不能说的秘密</h2><p><code>Elixir</code>不用我说，相信大家都有耳闻了，函数式编程是未来。一个专业前端的Rails工程师切换到<code>Elixir</code>的过程没有第一次经历的痛苦，当你接受了函数式的思想之后相当顺畅。社区里面有的人说<code>Phoenix</code>抄<code>Rails</code>的，我并不认同，<code>Phoenix</code>传承了敏捷开发的思想，也为开发者提供了诸多的便利，像<code>Hot load</code>的技术也被集成进来，对于<code>Socket</code>的支持也是相当的好。融合<code>Elixir</code>的特性，让多线程成为利器，利好多多，如果可以，你应该像我一样去深入研究下<code>Phoenix</code>，还有你们常用的<code>Devise</code>也是<code>Phoenix</code>的作者写的。当<code>Rails</code>老了，你还有<code>Phoenix</code></p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>AD：你错过了房地产，错过了网购，错过了炒股，别再错过<code>Elixir</code> <code>Phoenix</code> <code>React</code> <code>Redux</code>。<br>作者：本猿不才，文采平平，且读切珍惜。</p>
]]></content>
      <categories>
        <category>Ruby on Rails</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>回家</title>
    <url>/20170113/%E5%9B%9E%E5%AE%B6/</url>
    <content><![CDATA[<p>打油诗，改自网络版本，作此诗于深圳，2017-01-13 09:32 笔</p>
<a id="more"></a>
<p class="poem"><br>回家<br><br>瘦小离家胖时归<br>乡音未改肉成堆<br>儿童相见不相识<br>笑问胖从何处来<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>FlowRouter 中文文档</title>
    <url>/20160612/FlowRouter-%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<p> <a href="https://tkvern.com/">TKVERN</a> 翻译 | 源文档链接<a href="https://github.com/kadirahq/flow-router/" target="_blank" rel="noopener">FlowRouter</a><br> (如果你发现翻译中存在谬误的地方, 请留言, 我会继续造福社会. 建议结合源文档查看翻译)</p>
<p>为Meteor精心设计的客户端Router</p>
<p>FlowRouter 是 Meteor 一个非常简单的路由器.它为客户端程序routing,不处理渲染本身.</p>
<p>它为改变URL和获取数据获取提供了一个良好的API. 然而, 在router内部, 这不是reactive. 最重要的是, FlowRouter 的设计时考虑到性能和专注于自己最擅长的: <strong>routing</strong>.</p>
<blockquote>
<p>如果你已经在使用 FlowRouter,我们发布了2.0版本,同时遵循 <a href="#migrating-into-20">migration guide</a>.</p>
</blockquote>
<a id="more"></a>
<h2 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h2><ul>
<li><a href="#meteor-routing-guide">Meteor Routing Guide</a></li>
<li><a href="#getting-started">Getting Started</a></li>
<li><a href="#routes-definition">Routes Definition</a></li>
<li><a href="#group-routes">Group Routes</a></li>
<li><a href="#rendering-and-layout-management">Rendering and Layout Management</a></li>
<li><a href="#triggers">Triggers</a></li>
<li><a href="#not-found-routes">Not Found Routes</a></li>
<li><a href="#api">API</a></li>
<li><a href="#subscription-management">Subscription Management</a></li>
<li><a href="#ie9-support">IE9 Support</a></li>
<li><a href="#hashbang-urls">Hashbang URLs</a></li>
<li><a href="#prefixed-paths">Prefixed paths</a></li>
<li><a href="#add-ons">Add-ons</a></li>
<li><a href="#difference-with-iron-router">Difference with Iron Router</a></li>
<li><a href="#migrating-into-20">Migrating into 2.0</a></li>
</ul>
<h2 id="Meteor-Routing-Guide"><a href="#Meteor-Routing-Guide" class="headerlink" title="Meteor Routing Guide"></a>Meteor Routing Guide</h2><p><a href="https://kadira.io/academy/meteor-routing-guide" target="_blank" rel="noopener">Meteor Routing Guide</a> 是一个关于 Meteor <strong>routing</strong> 主题的完整指南 . 谈论了如何正确使用 FlowRouter 和 <strong>Blaze and React</strong>. 也显示了如何管理 <strong>subscriptions</strong> 和在视图实现 <strong>auth logic</strong>.</p>
<p><a href="https://kadira.io/academy/meteor-routing-guide" target="_blank" rel="noopener"><img src="https://cldup.com/AxlPfoxXmR.png" alt="Meteor Routing Guide"></a></p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>添加 FlowRouter 到你的app:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meteor add kadira:flow-router</span><br></pre></td></tr></table></figure>
<p>让我们写第一个 route (添加文件到 <code>lib/router.js</code>):</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FlowRouter.route(<span class="string">'/blog/:postId'</span>, &#123;</span><br><span class="line">    action: <span class="function"><span class="keyword">function</span>(<span class="params">params, queryParams</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Yeah! We are on the post:"</span>, params.postId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在浏览器访问 <code>/blog/my-post-id</code>,  或从console调用下面的命令:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FlowRouter.go(<span class="string">'/blog/my-post-id'</span>);</span><br></pre></td></tr></table></figure>
<p>然后,你就可以在console看到打印的消息了.</p>
<h2 id="Routes-Definition"><a href="#Routes-Definition" class="headerlink" title="Routes Definition"></a>Routes Definition</h2><p>FlowRouter 的 routes 非常简单, <a href="http://expressjs.com/" target="_blank" rel="noopener">Express</a> 和 <code>iron:router</code>都有使用基于<a href="https://github.com/pillarjs/path-to-regexp" target="_blank" rel="noopener">path-to-regexp</a>的语法 </p>
<p>下面是一个简单的route语法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FlowRouter.route(<span class="string">'/blog/:postId'</span>, &#123;</span><br><span class="line">    <span class="comment">// do some action for this route</span></span><br><span class="line">    action: <span class="function"><span class="keyword">function</span>(<span class="params">params, queryParams</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Params:"</span>, params);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Query Params:"</span>, queryParams);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    name: <span class="string">"&lt;name for the route&gt;"</span> <span class="comment">// optional</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>那么,当你访问这个url的时候,这条route就会被激活:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FlowRouter.go(<span class="string">'/blog/my-post?comments=on&amp;color=dark'</span>);</span><br></pre></td></tr></table></figure>
<p>在你访问这条route之后, console会打印下面内容:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Params: &#123;postId: &quot;my-post&quot;&#125;</span><br><span class="line">Query Params: &#123;comments: &quot;on&quot;, color: &quot;dark&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>对于单个 interaction, router只会运行一次. 这意味着, 在你访问 route 后, 它会首先调用 <code>triggers</code>, 接着是 <code>subscriptions</code>, 最后调用 <code>action</code>. 出现没有这些方法这种情况后,route访问将会再次调用.</p>
<p>你可以在 <code>client</code> 任何目录定义routes. 但是, 我们推荐你添加到 <code>lib</code> 目录. 那么 <code>fast-render</code> 能够检测 subscriptions 和 send 它们给你 (我们会在这里谈论).</p>
<h3 id="Group-Routes"><a href="#Group-Routes" class="headerlink" title="Group Routes"></a>Group Routes</h3><p>你可以对routes分组来更好的组织route. 这是一个例子:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> adminRoutes = FlowRouter.group(&#123;</span><br><span class="line">  prefix: <span class="string">'/admin'</span>,</span><br><span class="line">  name: <span class="string">'admin'</span>,</span><br><span class="line">  triggersEnter: [<span class="function"><span class="keyword">function</span>(<span class="params">context, redirect</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'running group triggers'</span>);</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// handling /admin route</span></span><br><span class="line">adminRoutes.route(<span class="string">'/'</span>, &#123;</span><br><span class="line">  action: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    BlazeLayout.render(<span class="string">'componentLayout'</span>, &#123;<span class="attr">content</span>: <span class="string">'admin'</span>&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  triggersEnter: [<span class="function"><span class="keyword">function</span>(<span class="params">context, redirect</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'running /admin trigger'</span>);</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// handling /admin/posts</span></span><br><span class="line">adminRoutes.route(<span class="string">'/posts'</span>, &#123;</span><br><span class="line">  action: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    BlazeLayout.render(<span class="string">'componentLayout'</span>, &#123;<span class="attr">content</span>: <span class="string">'posts'</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>所有对于 <code>FlowRouter.group()</code> 的options都是可选的.</strong></p>
<p>你甚至可以像下面一样嵌套group routes:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> adminRoutes = FlowRouter.group(&#123;</span><br><span class="line">    prefix: <span class="string">"/admin"</span>,</span><br><span class="line">    name: <span class="string">"admin"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> superAdminRoutes = adminRoutes.group(&#123;</span><br><span class="line">    prefix: <span class="string">"/super"</span>,</span><br><span class="line">    name: <span class="string">"superadmin"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// handling /admin/super/post</span></span><br><span class="line">superAdminRoutes.route(<span class="string">'/post'</span>, &#123;</span><br><span class="line">    action: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>你可以判断当前的route是在使用哪个group:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FlowRouter.current().route.group.name</span><br></pre></td></tr></table></figure>
<p>如果当前的route是具体的group (e.g. <em>admin</em>, <em>public</em>, <em>loggedIn</em>) 无需使用前缀,如果你不想.如果它是一个嵌套的group, 你可以像这样获取父级group的name:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FlowRouter.current().route.group.parent.name</span><br></pre></td></tr></table></figure>
<p>如同所有的当前 route 属性, 都不是 reactive, 但是可以结合<code>FlowRouter.watchPathChange()</code> 获取group名.</p>
<h2 id="Rendering-and-Layout-Management"><a href="#Rendering-and-Layout-Management" class="headerlink" title="Rendering and Layout Management"></a>Rendering and Layout Management</h2><p>FlowRouter 不处理渲染和布局管理. 为此, 你可以使用:</p>
<ul>
<li><a href="https://github.com/kadirahq/blaze-layout" target="_blank" rel="noopener">Blaze Layout for Blaze</a></li>
<li><a href="https://github.com/kadirahq/meteor-react-layout" target="_blank" rel="noopener">React Layout for React</a></li>
</ul>
<p>这样在一个route你可以从 <code>action</code> 的内部 method调用布局管理.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FlowRouter.route(<span class="string">'/blog/:postId'</span>, &#123;</span><br><span class="line">    action: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">        BlazeLayout.render(<span class="string">"mainLayout"</span>, &#123;<span class="attr">area</span>: <span class="string">"blog"</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Triggers"><a href="#Triggers" class="headerlink" title="Triggers"></a>Triggers</h2><p>Triggers 是 FlowRouter 可以允许你在 <strong>enter</strong> 这个 route 之前和 <strong>exit</strong> 这个 route 之后执行相应的任务.</p>
<h3 id="Defining-triggers-for-a-route"><a href="#Defining-triggers-for-a-route" class="headerlink" title="Defining triggers for a route"></a>Defining triggers for a route</h3><p>这里是如何为一个 route 定义 triggers :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FlowRouter.route(<span class="string">'/home'</span>, &#123;</span><br><span class="line">  <span class="comment">// calls just before the action</span></span><br><span class="line">  triggersEnter: [trackRouteEntry],</span><br><span class="line">  action: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something you like</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// calls when when we decide to move to another route</span></span><br><span class="line">  <span class="comment">// but calls before the next route started</span></span><br><span class="line">  triggersExit: [trackRouteClose]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trackRouteEntry</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// context is the output of `FlowRouter.current()`</span></span><br><span class="line">  Mixpanel.track(<span class="string">"visit-to-home"</span>, context.queryParams);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trackRouteClose</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  Mixpanel.track(<span class="string">"move-from-home"</span>, context.queryParams);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Defining-triggers-for-a-group-route"><a href="#Defining-triggers-for-a-group-route" class="headerlink" title="Defining triggers for a group route"></a>Defining triggers for a group route</h3><p>这里是如何在一个 group 定义里定义 triggers.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> adminRoutes = FlowRouter.group(&#123;</span><br><span class="line">  prefix: <span class="string">'/admin'</span>,</span><br><span class="line">  triggersEnter: [trackRouteEntry],</span><br><span class="line">  triggersExit: [trackRouteEntry]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>你可以添加 triggers 到单个 routes 或是 group .</p>
</blockquote>
<h3 id="Defining-Triggers-Globally"><a href="#Defining-Triggers-Globally" class="headerlink" title="Defining Triggers Globally"></a>Defining Triggers Globally</h3><p>你同样可以定义全局 triggers. 这里是怎么做:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FlowRouter.triggers.enter([cb1, cb2]);</span><br><span class="line">FlowRouter.triggers.exit([cb1, cb2]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// filtering</span></span><br><span class="line">FlowRouter.triggers.enter([trackRouteEntry], &#123;<span class="attr">only</span>: [<span class="string">"home"</span>]&#125;);</span><br><span class="line">FlowRouter.triggers.exit([trackRouteExit], &#123;<span class="attr">except</span>: [<span class="string">"home"</span>]&#125;);</span><br></pre></td></tr></table></figure>
<p>如你所看到的最后两个例子, 你可以筛选 routes 使用 <code>only</code> 或者 <code>except</code> 关键字. 但是, 你不能同时使用 <code>only</code> and <code>except</code>.</p>
<blockquote>
<p>如果你想了解更多关于 triggers 和 设计决策, 访问 <a href="https://github.com/meteorhacks/flow-router/pull/59" target="_blank" rel="noopener">here</a>.</p>
</blockquote>
<h3 id="Redirecting-With-Triggers"><a href="#Redirecting-With-Triggers" class="headerlink" title="Redirecting With Triggers"></a>Redirecting With Triggers</h3><p>你可以使用 triggers 重定向到一个不同 route . 你可以在triggers enter 和 exit 做到这一点. 看看如何做的吧:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FlowRouter.route(<span class="string">'/'</span>, &#123;</span><br><span class="line">  triggersEnter: [<span class="function"><span class="keyword">function</span>(<span class="params">context, redirect</span>) </span>&#123;</span><br><span class="line">    redirect(<span class="string">'/some-other-path'</span>);</span><br><span class="line">  &#125;],</span><br><span class="line">  action: <span class="function"><span class="keyword">function</span>(<span class="params">_params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"this should not get called"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>每个 trigger callback 的第二个参数: 一个 function 你可以使用 redirect 到 一个不同的 route. Redirect 也有一些属性来确保不会阻止 router.</p>
<ul>
<li>redirect 必须是调用一个 URL</li>
<li>redirect 必须在同一个event循环周期 (没有异步或调用内部 Tracker)</li>
<li>redirect 不能多次调用</li>
</ul>
<p>检查这个 <a href="https://github.com/meteorhacks/flow-router/pull/172" target="_blank" rel="noopener">PR</a> 以了解更多关于 redirect 的 API.</p>
<h3 id="Stopping-the-Callback-With-Triggers"><a href="#Stopping-the-Callback-With-Triggers" class="headerlink" title="Stopping the Callback With Triggers"></a>Stopping the Callback With Triggers</h3><p>在有些情况, 你也许需要停止使用 triggers 的 route callback. 你可以在 <strong>before</strong> triggers, 使用第三个参数: <code>stop</code> function. 例如, 你可以检查前缀, 如果失败, 在before action停止和显示 notFound layout.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> localeGroup = FlowRouter.group(&#123;</span><br><span class="line">  prefix: <span class="string">'/:locale?'</span>,</span><br><span class="line">  triggersEnter: [localeCheck]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">localeGroup.route(<span class="string">'/login'</span>, &#123;</span><br><span class="line">  action: <span class="function"><span class="keyword">function</span> (<span class="params">params, queryParams</span>) </span>&#123;</span><br><span class="line">    BlazeLayout.render(<span class="string">'componentLayout'</span>, &#123;<span class="attr">content</span>: <span class="string">'login'</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">localeCheck</span>(<span class="params">context, redirect, stop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> locale = context.params.locale;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (locale !== <span class="literal">undefined</span> &amp;&amp; locale !== <span class="string">'fr'</span>) &#123;</span><br><span class="line">    BlazeLayout.render(<span class="string">'notFound'</span>);</span><br><span class="line">    stop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note</strong>: 当你使用 stop function,即使你不使用它,你应该通过第二个 <strong>redirect</strong> 参数.</p>
</blockquote>
<h2 id="Not-Found-Routes"><a href="#Not-Found-Routes" class="headerlink" title="Not Found Routes"></a>Not Found Routes</h2><p>你可以像这样配置 Not Found 的 routes:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FlowRouter.notFound = &#123;</span><br><span class="line">    <span class="comment">// Subscriptions registered here don't have Fast Render support.</span></span><br><span class="line">    subscriptions: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    action: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>FlowRouter 有丰富的 API 帮助你浏览这个 router 和获取这个 router 的信息.</p>
<h3 id="FlowRouter-getParam-paramName"><a href="#FlowRouter-getParam-paramName" class="headerlink" title="FlowRouter.getParam(paramName);"></a>FlowRouter.getParam(paramName);</h3><p>你可以使用 Reactive function 获取 URL 的一个参数.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// route def: /apps/:appId</span></span><br><span class="line"><span class="comment">// url: /apps/this-is-my-app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> appId = FlowRouter.getParam(<span class="string">"appId"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(appId); <span class="comment">// prints "this-is-my-app"</span></span><br></pre></td></tr></table></figure>
<h3 id="FlowRouter-getQueryParam-queryStringKey"><a href="#FlowRouter-getQueryParam-queryStringKey" class="headerlink" title="FlowRouter.getQueryParam(queryStringKey);"></a>FlowRouter.getQueryParam(queryStringKey);</h3><p>你可以用Reactive function 的 queryString 查询你需要的value.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// route def: /apps/:appId</span></span><br><span class="line"><span class="comment">// url: /apps/this-is-my-app?show=yes&amp;color=red</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> color = FlowRouter.getQueryParam(<span class="string">"color"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(color); <span class="comment">// prints "red"</span></span><br></pre></td></tr></table></figure>
<h3 id="FlowRouter-path-pathDef-params-queryParams"><a href="#FlowRouter-path-pathDef-params-queryParams" class="headerlink" title="FlowRouter.path(pathDef, params, queryParams)"></a>FlowRouter.path(pathDef, params, queryParams)</h3><p>从定义的path中生成path. 都有 <code>params</code> 和 <code>queryParams</code> 两个选项.</p>
<p>URL的特殊字符在 <code>params</code> 和 <code>queryParams</code> 中会被转码.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pathDef = <span class="string">"/blog/:cat/:id"</span>;</span><br><span class="line"><span class="keyword">var</span> params = &#123;<span class="attr">cat</span>: <span class="string">"met eor"</span>, <span class="attr">id</span>: <span class="string">"abc"</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> queryParams = &#123;<span class="attr">show</span>: <span class="string">"y+e=s"</span>, <span class="attr">color</span>: <span class="string">"black"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = FlowRouter.path(pathDef, params, queryParams);</span><br><span class="line"><span class="built_in">console</span>.log(path); <span class="comment">// prints "/blog/met%20eor/abc?show=y%2Be%3Ds&amp;color=black"</span></span><br></pre></td></tr></table></figure>
<p>如果没有 params 或 queryParams, 这将只会返回 pathDef.</p>
<h4 id="Using-Route-name-instead-of-the-pathDef"><a href="#Using-Route-name-instead-of-the-pathDef" class="headerlink" title="Using Route name instead of the pathDef"></a>Using Route name instead of the pathDef</h4><p>你也可以使用 route’s name 代替 pathDef. 那么, FlowRouter 会从给定的 route 选择 pathDef. 看下面的例子:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FlowRouter.route(<span class="string">"/blog/:cat/:id"</span>, &#123;</span><br><span class="line">    name: <span class="string">"blogPostRoute"</span>,</span><br><span class="line">    action: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> params = &#123;<span class="attr">cat</span>: <span class="string">"meteor"</span>, <span class="attr">id</span>: <span class="string">"abc"</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> queryParams = &#123;<span class="attr">show</span>: <span class="string">"yes"</span>, <span class="attr">color</span>: <span class="string">"black"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = FlowRouter.path(<span class="string">"blogPostRoute"</span>, params, queryParams);</span><br><span class="line"><span class="built_in">console</span>.log(path); <span class="comment">// prints "/blog/meteor/abc?show=yes&amp;color=black"</span></span><br></pre></td></tr></table></figure>
<h3 id="FlowRouter-go-pathDef-params-queryParams"><a href="#FlowRouter-go-pathDef-params-queryParams" class="headerlink" title="FlowRouter.go(pathDef, params, queryParams);"></a>FlowRouter.go(pathDef, params, queryParams);</h3><p>这将通过 <code>FlowRouter.path</code> 基于 arguments 和 re-route 到达相应的 path ,  .</p>
<p>你可以像这样调用 <code>FlowRouter.go</code> :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FlowRouter.go(<span class="string">"/blog"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="FlowRouter-url-pathDef-params-queryParams"><a href="#FlowRouter-url-pathDef-params-queryParams" class="headerlink" title="FlowRouter.url(pathDef, params, queryParams)"></a>FlowRouter.url(pathDef, params, queryParams)</h3><p>就像 <code>FlowRouter.path</code>, 但给出的是绝对路径. (在后端使用 <code>Meteor.absoluteUrl</code>.)</p>
<h3 id="FlowRouter-setParams-newParams"><a href="#FlowRouter-setParams-newParams" class="headerlink" title="FlowRouter.setParams(newParams)"></a>FlowRouter.setParams(newParams)</h3><p>这会改变当前的 params, re-route 到新的 path.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// route def: /apps/:appId</span></span><br><span class="line"><span class="comment">// url: /apps/this-is-my-app?show=yes&amp;color=red</span></span><br><span class="line"></span><br><span class="line">FlowRouter.setParams(&#123;<span class="attr">appId</span>: <span class="string">"new-id"</span>&#125;);</span><br><span class="line"><span class="comment">// Then the user will be redirected to the following path</span></span><br><span class="line"><span class="comment">//      /apps/new-id?show=yes&amp;color=red</span></span><br></pre></td></tr></table></figure>
<h3 id="FlowRouter-setQueryParams-newQueryParams"><a href="#FlowRouter-setQueryParams-newQueryParams" class="headerlink" title="FlowRouter.setQueryParams(newQueryParams)"></a>FlowRouter.setQueryParams(newQueryParams)</h3><p>就像 <code>FlowRouter.setParams</code>, 但是是 queryString params.</p>
<p>删除 query param 设置为 <code>null</code> 如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FlowRouter.setQueryParams(&#123;<span class="attr">paramToRemove</span>: <span class="literal">null</span>&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="FlowRouter-getRouteName"><a href="#FlowRouter-getRouteName" class="headerlink" title="FlowRouter.getRouteName()"></a>FlowRouter.getRouteName()</h3><p>获取route reactively 的 name.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Tracker.autorun(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> routeName = FlowRouter.getRouteName();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Current route name is: "</span>, routeName);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="FlowRouter-current"><a href="#FlowRouter-current" class="headerlink" title="FlowRouter.current()"></a>FlowRouter.current()</h3><p>获取 router 的当前状态. <strong>This API is not reactive</strong>.<br>如果你需要观察 path 的变化,可以使用 <code>FlowRouter.watchPathChange()</code>.</p>
<p>这给出来一个 object:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// route def: /apps/:appId</span></span><br><span class="line"><span class="comment">// url: /apps/this-is-my-app?show=yes&amp;color=red</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> current = FlowRouter.current();</span><br><span class="line"><span class="built_in">console</span>.log(current);</span><br><span class="line"></span><br><span class="line"><span class="comment">// prints following object</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     path: "/apps/this-is-my-app?show=yes&amp;color=red",</span></span><br><span class="line"><span class="comment">//     params: &#123;appId: "this-is-my-app"&#125;,</span></span><br><span class="line"><span class="comment">//     queryParams: &#123;show: "yes", color: "red"&#125;</span></span><br><span class="line"><span class="comment">//     route: &#123;pathDef: "/apps/:appId", name: "name-of-the-route"&#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="FlowRouter-watchPathChange"><a href="#FlowRouter-watchPathChange" class="headerlink" title="FlowRouter.watchPathChange()"></a>FlowRouter.watchPathChange()</h3><p>监听 path 的变化.如果你需要像使用 API 一样获得 params 或queryParams 可以用 <code>FlowRouter.getQueryParam()</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Tracker.autorun(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  FlowRouter.watchPathChange();</span><br><span class="line">  <span class="keyword">var</span> currentContext = FlowRouter.current();</span><br><span class="line">  <span class="comment">// do anything with the current context</span></span><br><span class="line">  <span class="comment">// or anything you wish</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="FlowRouter-withReplaceState-fn"><a href="#FlowRouter-withReplaceState-fn" class="headerlink" title="FlowRouter.withReplaceState(fn)"></a>FlowRouter.withReplaceState(fn)</h3><p>通常, 所有的 route 改变通过像 <code>FlowRouter.go</code> 和 <code>FlowRouter.setParams()</code> 这样的 APIs 添加 URL item 到浏览器的 history. 例如, 运行下面的代码:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FlowRouter.setParams(&#123;<span class="attr">id</span>: <span class="string">"the-id-1"</span>&#125;);</span><br><span class="line">FlowRouter.setParams(&#123;<span class="attr">id</span>: <span class="string">"the-id-2"</span>&#125;);</span><br><span class="line">FlowRouter.setParams(&#123;<span class="attr">id</span>: <span class="string">"the-id-3"</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>现在你可以点击浏览器的后退按钮2次. 这是常见的行为, 因为用户可以点击“后退”按钮, 并期待看到应用程序的前一个状态.</p>
<p>但是有些时候, 这不是你想要的. 你不需要污染浏览器 history. 那么, 你可以使用下面的语法.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FlowRouter.withReplaceState(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  FlowRouter.setParams(&#123;<span class="attr">id</span>: <span class="string">"the-id-1"</span>&#125;);</span><br><span class="line">  FlowRouter.setParams(&#123;<span class="attr">id</span>: <span class="string">"the-id-2"</span>&#125;);</span><br><span class="line">  FlowRouter.setParams(&#123;<span class="attr">id</span>: <span class="string">"the-id-3"</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>现在, 没有任何 item 在浏览器 history 中了. 就像 <code>FlowRouter.setParams</code>, 你可以使用任何 FlowRouter 的 API 在 <code>FlowRouter.withReplaceState</code> 里面.</p>
<blockquote>
<p>我们命名这个功能为 <code>withReplaceState</code> , 因为, replaceState 是 underline API 用于此功能. 阅读更多关于 <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history" target="_blank" rel="noopener">replace state &amp; the history API</a>.</p>
</blockquote>
<h3 id="FlowRouter-reload"><a href="#FlowRouter-reload" class="headerlink" title="FlowRouter.reload()"></a>FlowRouter.reload()</h3><p>FlowRouter routes 是幂等的. 这意味着, 即使你多次调用 <code>FlowRouter.go()</code> 到相同的 URL , 但是它只在第一次运行时激活. 这也是真实的直接点击路径.</p>
<p>因此, 如果你真的需要 reload 这个 route, 这个就是你想要的 API .</p>
<h3 id="FlowRouter-wait-and-FlowRouter-initialize"><a href="#FlowRouter-wait-and-FlowRouter-initialize" class="headerlink" title="FlowRouter.wait() and FlowRouter.initialize()"></a>FlowRouter.wait() and FlowRouter.initialize()</h3><p>在默认情况下, FlowRouter 初始化这个路由 process 在 <code>Meteor.startup()</code> 中回调. 对大多数app而言是这样工作. 但是, 一些 app 自定义初始化需要在 FlowRouter 初始化之后.</p>
<p>因此, <code>FlowRouter.wait()</code> 可以帮助你.你需要直接在 JavaScript 文件里调用. 然后, 当时的 app 准备好后调用 <code>FlowRouter.initialize()</code>.</p>
<p>eg:-</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file: app.js</span></span><br><span class="line">FlowRouter.wait();</span><br><span class="line">WhenEverYourAppIsReady(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  FlowRouter.initialize();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>查看更多信息访问 <a href="https://github.com/meteorhacks/flow-router/issues/180" target="_blank" rel="noopener">issue #180</a>.</p>
<h3 id="FlowRouter-onRouteRegister-cb"><a href="#FlowRouter-onRouteRegister-cb" class="headerlink" title="FlowRouter.onRouteRegister(cb)"></a>FlowRouter.onRouteRegister(cb)</h3><p>这个 API 是特地为开发人员开发插件设计的. 他们可以监听任何 registered route 和为 FlowRouter 添加自定义功能. 这都工作在服务器端和客户端.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FlowRouter.onRouteRegister(<span class="function"><span class="keyword">function</span>(<span class="params">route</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do anything with the route object</span></span><br><span class="line">  <span class="built_in">console</span>.log(route);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>让我们看一个为用户定义的route:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FlowRouter.route(<span class="string">'/blog/:post'</span>, &#123;</span><br><span class="line">  name: <span class="string">'postList'</span>,</span><br><span class="line">  triggersEnter: [<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;],</span><br><span class="line">  subscriptions: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  action: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  triggersExit: [<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;],</span><br><span class="line">  customField: <span class="string">'customName'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这个 route 的 object 会这这样:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  pathDef: <span class="string">'/blog/:post'</span>,</span><br><span class="line">  name: <span class="string">'postList'</span>,</span><br><span class="line">  options: &#123;<span class="attr">customField</span>: <span class="string">'customName'</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因此, 这不是我们正在使用的内部 route object.</p>
<h2 id="Subscription-Management"><a href="#Subscription-Management" class="headerlink" title="Subscription Management"></a>Subscription Management</h2><p>对于订阅管理,我们强烈建议你遵循 <a href="https://kadira.io/academy/meteor-routing-guide/content/subscriptions-and-data-management" target="_blank" rel="noopener">Template/Component level subscriptions</a>. 在这里查看 <a href="https://kadira.io/academy/meteor-routing-guide/content/subscriptions-and-data-management" target="_blank" rel="noopener">guide</a>.</p>
<p>FlowRouter 也有它自己的订阅管理机制. 我们将在 3.0 版本移除. 我们不排除 2.x 版本 因为这是实现你 APP FastRender 支持最简单的方法.在 3.0 版本我们更好的支持 FastRender 在服务端渲染.</p>
<p>FlowRouter 只涉及 registration 和 subscriptions. 它不用等待 subscription 完成. 这是如何注册一个 subscription.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FlowRouter.route(<span class="string">'/blog/:postId'</span>, &#123;</span><br><span class="line">    subscriptions: <span class="function"><span class="keyword">function</span>(<span class="params">params, queryParams</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.register(<span class="string">'myPost'</span>, Meteor.subscribe(<span class="string">'blogPost'</span>, params.postId));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>我们也可以像这样全局注册 subscriptions :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FlowRouter.subscriptions = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.register(<span class="string">'myCourses'</span>, Meteor.subscribe(<span class="string">'courses'</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>所有的全局 subscriptions 都运行在每一个 route 上. 因此, 在注册订阅是要特别注意命名.</p>
<p>然后你可以注册你的 subscriptions, 完成之后你可以检查 subscriptions 的状态:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Tracker.autorun(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Is myPost ready?:"</span>, FlowRouter.subsReady(<span class="string">"myPost"</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Are all subscriptions ready?:"</span>, FlowRouter.subsReady());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>因此, 你可以使用 <code>FlowRouter.subsReady</code> 在 template helpers 内部显示加载状态和相应的行为.</p>
<h3 id="FlowRouter-subsReady-with-a-callback"><a href="#FlowRouter-subsReady-with-a-callback" class="headerlink" title="FlowRouter.subsReady() with a callback"></a>FlowRouter.subsReady() with a callback</h3><p>有些时候, 我们需要使用 <code>FlowRouter.subsReady()</code> 在 autorun 中是不可用的. 这有一个事件处理的例子. 在这样的地方, 我们可以使用回调 API  <code>FlowRouter.subsReady()</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Template.myTemplate.events(&#123;</span><br><span class="line">   <span class="string">"click #id"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      FlowRouter.subsReady(<span class="string">"myPost"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="comment">// do something</span></span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Arunoda 有讨论更多关于订阅管理 FlowRouter, 在个博客里 <a href="https://meteorhacks.com/flow-router-and-subscription-management.html#subscription-management" target="_blank" rel="noopener">this</a> 这篇文章 <a href="https://meteorhacks.com/flow-router-and-subscription-management.html" target="_blank" rel="noopener">FlowRouter and Subscription Management</a>.</p>
</blockquote>
<blockquote>
<p>他展示了如何构建一个app:</p>
</blockquote>
<blockquote>
<p><img src="https://cldup.com/esLzM8cjEL.gif" alt="FlowRouter&#39;s Subscription Management"></p>
</blockquote>
<h4 id="Fast-Render"><a href="#Fast-Render" class="headerlink" title="Fast Render"></a>Fast Render</h4><p>FlowRouter 支持 <a href="https://github.com/meteorhacks/fast-render" target="_blank" rel="noopener">Fast Render</a>.</p>
<ul>
<li><code>meteor add meteorhacks:fast-render</code></li>
<li>把 <code>router.js</code> 放在共享目录. 我们建议 <code>lib/router.js</code>.</li>
</ul>
<p>你可以排除 Fast Render 支持通过包装 subscription registration 在 <code>isClient</code> 块:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FlowRouter.route(<span class="string">'/blog/:postId'</span>, &#123;</span><br><span class="line">    subscriptions: <span class="function"><span class="keyword">function</span>(<span class="params">params, queryParams</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// using Fast Render</span></span><br><span class="line">        <span class="keyword">this</span>.register(<span class="string">'myPost'</span>, Meteor.subscribe(<span class="string">'blogPost'</span>, params.postId));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// not using Fast Render</span></span><br><span class="line">        <span class="keyword">if</span>(Meteor.isClient) &#123;</span><br><span class="line">            <span class="keyword">this</span>.register(<span class="string">'data'</span>, Meteor.subscribe(<span class="string">'bootstrap-data'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="Subscription-Caching"><a href="#Subscription-Caching" class="headerlink" title="Subscription Caching"></a>Subscription Caching</h4><p>你也可以使用 <a href="https://github.com/meteorhacks/subs-manager" target="_blank" rel="noopener">Subs Manager</a> 在客户端缓存 subscriptions . 我们没有有任何特别的事情来让它工作. 它应该像其他 routers 一样工作.</p>
<h2 id="IE9-Support"><a href="#IE9-Support" class="headerlink" title="IE9 Support"></a>IE9 Support</h2><p>FlowRouter 支持 IE9. 但是它没有 <strong>HTML5 history polyfill</strong>. 因为大多数app不需要它.</p>
<p>如果你需要支持 IE9, 添加 <strong>HTML5 history polyfill</strong> 到你的packege.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meteor add tomwasd:history-polyfill</span><br></pre></td></tr></table></figure>
<h2 id="Hashbang-URLs"><a href="#Hashbang-URLs" class="headerlink" title="Hashbang URLs"></a>Hashbang URLs</h2><p>使用网址名 <code>mydomain.com/#!/mypath</code> 简单设置 <code>hashbang</code> 为 <code>true</code>在初始化的 function 中:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file: app.js</span></span><br><span class="line">FlowRouter.wait();</span><br><span class="line">WhenEverYourAppIsReady(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  FlowRouter.initialize(&#123;<span class="attr">hashbang</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Prefixed-paths"><a href="#Prefixed-paths" class="headerlink" title="Prefixed paths"></a>Prefixed paths</h2><p>例如,你希望在同一域名下运行多个web应用程序, 你可能会想在子路径在运行特定的 meteor application 服务 (eg <code>example.com/myapp</code>). 在这种情况下只包括路径前缀在 meteor <code>ROOT_URL</code> 的环境变量, FlowRouter 将会透明的处理没有任何额外参数的配置.</p>
<h2 id="Add-ons"><a href="#Add-ons" class="headerlink" title="Add-ons"></a>Add-ons</h2><p>Router 是基于 package 的 app. 其他项目像 <a href="http://useraccounts.meteor.com/" target="_blank" rel="noopener">useraccounts</a>  需要 FlowRouter 支持. 否则,  FlowRouter 很难用在真实项目中. 先在有很多 packages 都有 <a href="https://kadira.io/blog/meteor/addon-packages-for-flowrouter" target="_blank" rel="noopener">started to support FlowRouter</a>.</p>
<p>因此, 你可以使用你喜欢的 FlowRouter package. 如果不是, 有一个叫 <a href="https://kadira.io/blog/meteor/addon-packages-for-flowrouter#what-if-project-xxx-still-doesn-t-support-flowrouter-" target="_blank" rel="noopener">easy process</a> 的包可以将它们转换为 FlowRouter.</p>
<p><strong>Add-on API</strong></p>
<p>我们还发布了一个 <a href="https://github.com/kadirahq/flow-router#flowrouteronrouteregistercb" target="_blank" rel="noopener">new API</a> 去支持开发者开发插件. 当用户在应用程序中创建一个路由时, 可以得到一个通知.</p>
<p>如果你有更多关于插件 API 的想法, 查看 <a href="https://github.com/kadirahq/flow-router/issues" target="_blank" rel="noopener">let us know</a>.</p>
<h2 id="Difference-with-Iron-Router"><a href="#Difference-with-Iron-Router" class="headerlink" title="Difference with Iron Router"></a>Difference with Iron Router</h2><p>FlowRouter 和 Iron Router 是两个不同的 routers. Iron Router 试图成为一个全功能的解决方案.它试图做每一件事包括 routing, subscriptions, rendering and layout management.</p>
<p>FlowRouter 是一个简单的解决方案在 routing , UI performance 上. 它公开了有关功能的 APIs.</p>
<p>让我们了解更多的差别:</p>
<h3 id="Rendering"><a href="#Rendering" class="headerlink" title="Rendering"></a>Rendering</h3><p>FlowRouter 不处理渲染. 通过解耦渲染, 它可以使用任何渲染框架, 比如使用 <a href="https://github.com/kadirahq/blaze-layout" target="_blank" rel="noopener">Blaze Layout</a> 进行动态模版渲染 .在路由动作中, 可以调用像 <a href="https://github.com/kadirahq/meteor-react-layout" target="_blank" rel="noopener">React</a> 这样的布局框架.</p>
<h3 id="Subscriptions"><a href="#Subscriptions" class="headerlink" title="Subscriptions"></a>Subscriptions</h3><p>对于 FlowRouter, 我们强烈建议你使用 template/component layer subscriptions. 但是,如果你需要在路由器层做路由, FlowRouter 有 <a href="#subscription-management">subscription registration</a> 机制. 即使有, FlowRouter 永远不要等待 subscriptions 和 view layer 来做.</p>
<h3 id="Reactive-Content"><a href="#Reactive-Content" class="headerlink" title="Reactive Content"></a>Reactive Content</h3><p>在 Iron Router 你可以在 reactive content 里面使用 router, 但是任何一个 hook 或 method 可以以一个不可预测的方式重新运行. FlowRouter 限制；  reactive 的数据源单个的运行; 当首先调用的时候.</p>
<p>我们认为这是可行当方法. Router 只是用户当 action. 我们可以在渲染层完成响应内容的工作.</p>
<h3 id="router-current-is-evil"><a href="#router-current-is-evil" class="headerlink" title="router.current() is evil"></a>router.current() is evil</h3><p><code>Router.current()</code> 是邪恶的. 为什么? 让我们看看下面的这个例子.想象一下我们的 app 有这样一个 route:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/apps/:appId/:section</span><br></pre></td></tr></table></figure>
<p>现在让我们说,我们需要从 URL 获取 <code>appId</code>. 我们会这样做,  像在 Iron Router 一样.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Templates[<span class="string">'foo'</span>].helpers(&#123;</span><br><span class="line">    <span class="string">"someData"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> appId = Router.current().params.appId;</span><br><span class="line">        <span class="keyword">return</span> doSomething(appId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>我们在 route 中改变 <code>:section</code> . 那么上面的方法也会重新运行. 如果我们增加一个 query param 到 URL, 它也会重新运行. 这是因为 <code>Router.current()</code> 会寻找改变 route(or URL). 但是在任何情况下, <code>appId</code> 不会改变.</p>
<p>因为这个, 我们到应用程序很多部分会重新运行,重新渲染. 这将会出现不可预测到渲染行为.</p>
<p>FlowRouter 为修复次问题提供里 <code>Router.getParam()</code> API. 看看如何使用:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Templates[<span class="string">'foo'</span>].helpers(&#123;</span><br><span class="line">    <span class="string">"someData"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> appId = FlowRouter.getParam(<span class="string">'appId'</span>);</span><br><span class="line">        <span class="keyword">return</span> doSomething(appId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="No-data-context"><a href="#No-data-context" class="headerlink" title="No data context"></a>No data context</h3><p>FlowRouter 没有 data context. Data context 会有像 <code>.current()</code> 这样到问题. 我们相信, 它可以直接在 template (component) 层获取数据.</p>
<h3 id="Built-in-Fast-Render-Support"><a href="#Built-in-Fast-Render-Support" class="headerlink" title="Built in Fast Render Support"></a>Built in Fast Render Support</h3><p>FlowRouter 已构建 <a href="https://github.com/meteorhacks/fast-render" target="_blank" rel="noopener">Fast Render</a> 支持. 只要天骄 Fast Render 到你到 app 它就会工作里. router 不需要做任何改变.</p>
<p>更多关于 check 信息的文档, 查看 <a href="#fast-render">docs</a>.</p>
<h3 id="Server-Side-Routing"><a href="#Server-Side-Routing" class="headerlink" title="Server Side Routing"></a>Server Side Routing</h3><p>FlowRouter 是客户端 router 它不支持服务的路由. 但是 <code>subscriptions</code> 运行在服务的支持 Fast Render.</p>
<h4 id="Reason-behind-that"><a href="#Reason-behind-that" class="headerlink" title="Reason behind that"></a>Reason behind that</h4><p>Meteor 不是一个从服务器直接发送 HTML 到客户端的传统开发框架. Meteor 最初需要发送一个特殊的 HTML 到客户端. 因此, 你不能直接向客户端发送一些东西.</p>
<p>此外, 相比于客户端, 在服务器端我们需要寻找一些不同的东西. 例如:</p>
<ul>
<li>在服务器端我们必须处理头文件.</li>
<li>在服务器端我们必须处理像 <code>GET</code>, <code>POST</code> 这样类似的方法.</li>
<li>还有 Cookies.</li>
</ul>
<p>因此, 最好使用服务器端专用的 router 像 <a href="https://github.com/meteorhacks/picker" target="_blank" rel="noopener"><code>meteorhacks:picker</code></a>. 它支持连接和表达中间件, 并且它的 route 语法很简单.</p>
<h3 id="Server-Side-Rendering"><a href="#Server-Side-Rendering" class="headerlink" title="Server Side Rendering"></a>Server Side Rendering</h3><p>FlowRouter 3.0 将有服务器端渲染的支持. 我们已经开始了初步版本, 查看这个branch <a href="https://github.com/meteorhacks/flow-router/tree/ssr" target="_blank" rel="noopener"><code>ssr</code></a>.</p>
<p>这目前是非常有用的, Kadira 的 <a href="https://kadira.io" target="_blank" rel="noopener">https://kadira.io</a> 已经有在使用.</p>
<h3 id="Better-Initial-Loading-Support"><a href="#Better-Initial-Loading-Support" class="headerlink" title="Better Initial Loading Support"></a>Better Initial Loading Support</h3><p>在 Meteor 中, 我们要等到渲染之前发送所有到JS和其他资源. 这是一个问题. 在 3.0 版本, 在服务器端的支持下我们修复了它.</p>
<h2 id="Migrating-into-2-0"><a href="#Migrating-into-2-0" class="headerlink" title="Migrating into 2.0"></a>Migrating into 2.0</h2><p>迁移到 2.0 版本是很容易到, 你不需要改变应用到任何代码,因为你已经在使用 2.0 版本的 APIs 了. 在 2.0 版本, 我们改变了名字和删除了一些过时的 APIs.</p>
<p>以下是将应用迁移到 2.0 版本的步骤.</p>
<h3 id="Use-the-New-FlowRouter-Package"><a href="#Use-the-New-FlowRouter-Package" class="headerlink" title="Use the New FlowRouter Package"></a>Use the New FlowRouter Package</h3><ul>
<li>Now FlowRouter comes as <code>kadira:flow-router</code></li>
<li>So, remove <code>meteorhacks:flow-router</code> with : <code>meteor remove meteorhacks:flow-router</code></li>
<li>Then, add <code>kadira:flow-router</code> with <code>meteor add kadira:flow-router</code></li>
</ul>
<h3 id="Change-FlowLayout-into-BlazeLayout"><a href="#Change-FlowLayout-into-BlazeLayout" class="headerlink" title="Change FlowLayout into BlazeLayout"></a>Change FlowLayout into BlazeLayout</h3><ul>
<li>我们重新命名了 FlowLayout 为 <a href="https://github.com/kadirahq/blaze-layout" target="_blank" rel="noopener">BlazeLayout</a>.</li>
<li>因此, 移除 <code>meteorhacks:flow-layout</code> 和添加 <code>kadira:blaze-layout</code> 即可.</li>
<li>你需要使用 <code>BlazeLayout.render()</code> 代替 <code>FlowLayout.render()</code></li>
</ul>
<h3 id="Stop-using-deprecated-Apis"><a href="#Stop-using-deprecated-Apis" class="headerlink" title="Stop using deprecated Apis"></a>Stop using deprecated Apis</h3><ul>
<li>这没有中间件支持. 使用 triggers 代替.</li>
<li>这没有 API 叫 <code>.reactiveCurrent()</code>, 使用 <code>.watchPathChange()</code> 代替.</li>
<li>早些时候,你可以用 <code>FlowRouter.current().params.query</code> 访问和查询params. 但是, 现在你不能这样总了. 使用 <code>FlowRouter.current().queryParams</code> 代替.</li>
</ul>
]]></content>
      <categories>
        <category>Front-end</category>
      </categories>
      <tags>
        <tag>FlowRouter</tag>
      </tags>
  </entry>
  <entry>
    <title>论假百度钓鱼网站的实现过程</title>
    <url>/20170228/%E8%AE%BA%E5%81%87%E7%99%BE%E5%BA%A6%E9%92%93%E9%B1%BC%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>近日在UC头条上看到一则新闻【 <a href="http://s4.uczzd.cn/webapp/webview/article/news.html?app=uc-iflow&amp;aid=11171023406464140368&amp;cid=100&amp;zzd_from=uc-iflow&amp;uc_param_str=dndseiwifrvesvntgipf&amp;rd_type=share&amp;pagetype=share&amp;btifl=100&amp;sdkdeep=2&amp;sdksid=0c5f4a3f-05fc-3b4b-31c0-d46547976a9c" target="_blank" rel="noopener">网友反映可能上了“假百度” 官方通报: 百度搜索移动端被劫持</a> 】</p>
<p>今天来讨论一些假百度的实现过程，防止大家以后上当受骗。未看新闻的童鞋先去补补课。下面是概览图。</p>
<a id="more"></a>
<p><img src="/images/baidujiechi/11.jpeg" alt="图4"></p>
<p><img src="/images/baidujiechi/3808128865864021669.gif" alt="图1"></p>
<p><img src="/images/baidujiechi/9441059036682491460.gif" alt="图2"></p>
<p><img src="/images/baidujiechi/16902136286144840252.gif" alt="图3"></p>
<h2 id="仿制百度移动版网站"><a href="#仿制百度移动版网站" class="headerlink" title="仿制百度移动版网站"></a>仿制百度移动版网站</h2><p>会Web开发的童鞋都知道，仿制网站的第一步就是将站点的资源都抠下来。如下</p>
<p><img src="/images/baidujiechi/2222.jpeg" alt="图5"></p>
<p>不需要的JS可以删除掉，页面上的链接可以任意发挥。</p>
<h2 id="修改DNS解析，让假百度更真"><a href="#修改DNS解析，让假百度更真" class="headerlink" title="修改DNS解析，让假百度更真"></a>修改DNS解析，让假百度更真</h2><p>给域名添加一个baidu.com的前缀，以假乱真。</p>
<p><img src="/images/baidujiechi/33333.jpeg" alt="图6"></p>
<h2 id="购买免费子域名证书，疏而不漏"><a href="#购买免费子域名证书，疏而不漏" class="headerlink" title="购买免费子域名证书，疏而不漏"></a>购买免费子域名证书，疏而不漏</h2><p>在手机上访问时会有个安全的小钥匙，这个必不可少</p>
<p><img src="/images/baidujiechi/55555.png" alt="图7"></p>
<p><img src="/images/baidujiechi/44444.jpeg" alt="图6"></p>
<p>买了免费证书配置到Nginx代理中就可使用了。</p>
<h2 id="重点，劫持用户"><a href="#重点，劫持用户" class="headerlink" title="重点，劫持用户"></a>重点，劫持用户</h2><p>只需要简单的JS就可以劫持用户的真实地址了，当用户通过百度搜索进入的你的网站时，你就可以劫持用户到假百度去了。至于怎么让百度能搜索到你的网站，这就可以问问百度了，百度有竞价排名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//用于捕获浏览器回退事件，或手机回退的物理按键</span></span><br><span class="line">    history.pushState(<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">    <span class="built_in">window</span>.onpopstate=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">//当用户点击后退时，进入假百度</span></span><br><span class="line">      location.replace(<span class="string">"https://baidu.com-search.xxx.com"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="/images/baidujiechi/3808128865864021669.gif" alt="图1"></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文旨在防止大家上当受骗，解析钓鱼网站是如何使用的，切勿非法使用！！！</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>钓鱼网站</tag>
      </tags>
  </entry>
  <entry>
    <title>面朝大海，春暖花开</title>
    <url>/20190614/%E9%9D%A2%E6%9C%9D%E5%A4%A7%E6%B5%B7%E6%98%A5%E6%9A%96%E8%8A%B1%E5%BC%80/</url>
    <content><![CDATA[<p>像海子一样，面朝大海，春暖花开，作此诗于深圳，2019-06-15 00:31 笔</p>
<a id="more"></a>
<p class="poem"><br>从明天起<br>做一个幸福的人<br>减肥 阅读 正经一点<br>从明天起<br>多食牛奶和蔬菜<br>再买一所房子<br>面朝大海 春暖花开<br><br></p>]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>旧人</title>
    <url>/20191119/%E6%97%A7%E4%BA%BA/</url>
    <content><![CDATA[<p>忆旧人，有感，作此诗于深圳，2019-11-19 08:16 笔</p>
<a id="more"></a>
<p class="poem"><br>旧人<br>张翔<br><br>提墨入江湖<br>染半分俗事<br>佳人不舍<br>情到深时<br>待笔停 已泪满长裳<br>或入梦里<br>旧人模样<br>故地笑语<br>似醒似梦<br>至天明 湿红枕<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>Dva + Ant Design 前后端分离之 React 应用实践</title>
    <url>/20170204/Dva%20+%20Ant%20Design%20%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E4%B9%8B%20React%20%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p><img src="/images/cover/201702041848001.jpeg" alt="qiniu"></p>
<p>继 <a href="https://ruby-china.org/topics/30594" target="_blank" rel="noopener">Rails 从入门到完全放弃 拥抱 Elixir + Phoenix + React + Redux</a> 这篇文章被喷之后，笔者很长一段时候没有上社区逛了。现在 <a href="tkvern.com">tkvern</a> 又回归了，给大家带来React实践的一些经验，一些踩坑的经验。</p>
<p>Rails嘛，很好用，Laravel也好用。Phoenix也好用。都好，哪个方便用哪个。</p>
<p>还有关于<em>Turbolinks</em>之争，不能单从页面渲染时间去对比，要综合考虑。</p>
<a id="more"></a>
<h2 id="Why-Dva？"><a href="#Why-Dva？" class="headerlink" title="Why Dva？"></a>Why Dva？</h2><p>Dva是基于Redux做了一层封装，对于React的state管理，有很多方案，我选择了轻量、简单的Dva。至于Mobx，还没应用到项目中来。先等友军踩踩坑，再往里面跳。</p>
<ul>
<li><a href="https://github.com/dvajs/dva/issues/1" target="_blank" rel="noopener">Why dva and what’s dva</a></li>
<li><a href="https://www.github.com/sorrycc/blog/issues/6" target="_blank" rel="noopener">支付宝前端应用架构的发展和选择</a></li>
</ul>
<p>顺便贴下Dva的特性：</p>
<ul>
<li><strong>易学易用</strong>：仅有 5 个 api，对 redux 用户尤其友好</li>
<li><strong>elm 概念</strong>：通过 <code>reducers</code>, <code>effects</code> 和 <code>subscriptions</code> 组织 model</li>
<li><strong>支持 mobile 和 react-native</strong>：跨平台 (<a href="https://github.com/sorrycc/dva-example-react-native" target="_blank" rel="noopener">react-native 例子</a>)</li>
<li><strong>支持 HMR</strong>：目前基于 <a href="https://github.com/dvajs/babel-plugin-dva-hmr" target="_blank" rel="noopener">babel-plugin-dva-hmr</a> 支持 components 和 routes 的 HMR</li>
<li><strong>动态加载 Model 和路由</strong>：按需加载加快访问速度 (<a href="https://github.com/dvajs/dva/tree/master/examples/dynamic-load" target="_blank" rel="noopener">例子</a>)</li>
<li><strong>插件机制</strong>：比如 <a href="https://github.com/dvajs/dva-loading" target="_blank" rel="noopener">dva-loading</a> 可以自动处理 loading 状态，不用一遍遍地写 showLoading 和 hideLoading</li>
<li><strong>完善的语法分析库 <a href="https://github.com/dvajs/dva-ast" target="_blank" rel="noopener">dva-ast</a></strong>：<a href="https://github.com/dvajs/dva-cli" target="_blank" rel="noopener">dva-cli</a> 基于此实现了智能创建 model, router 等</li>
<li><strong>支持 TypeScript</strong>：通过 d.ts (<a href="https://github.com/sorrycc/dva-boilerplate-typescript" target="_blank" rel="noopener">例子</a>)</li>
</ul>
<h2 id="Why-Ant-Design"><a href="#Why-Ant-Design" class="headerlink" title="Why Ant Design?"></a>Why Ant Design?</h2><p>做为传道士，这么好的UI设计语言，肯定不会藏着掖着啦。蚂蚁金服的东西，确实不错，除了Ant Design外，还有Ant Design Mobile、AntV、AntMotion、G2。</p>
<h2 id="Why-yarn"><a href="#Why-yarn" class="headerlink" title="Why yarn?"></a>Why yarn?</h2><p><code>npm install</code> 太慢，试试<a href="https://yarnpkg.com/" target="_blank" rel="noopener">yarn</a>吧。建议用<code>npm install yarn -g</code>进行安装。</p>
<h2 id="开发过程中的前后端分离"><a href="#开发过程中的前后端分离" class="headerlink" title="开发过程中的前后端分离"></a>开发过程中的前后端分离</h2><p>项目开始了，前端视图写完，要开始数据交互了，后端提供的API还没好。</p>
<p>那么问题来了，如何在不依靠后端提供API的情况下，实现数据交互？</p>
<p>使用<a href="http://mockjs.com/" target="_blank" rel="noopener">Mock.js</a>可以解决这个问题。先对接好API数据格式，然后使用Mockjs拦截Ajax请求，模拟后端真实数据。</p>
<p>在Mockjs官方提供的API不够用的情况下，还可以使用正则产生模拟数据。</p>
<h3 id="如何对模拟做数据持久化处理？"><a href="#如何对模拟做数据持久化处理？" class="headerlink" title="如何对模拟做数据持久化处理？"></a>如何对模拟做数据持久化处理？</h3><p>这里给出一个模拟用户数据并持久化的实例实例：<a href="https://github.com/tkvern/dva-passport/blob/develop/resources/assets/ant_passport/mock/users.js" target="_blank" rel="noopener">mock/users.js</a></p>
<p>代码摘要:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">'qs'</span>);</span><br><span class="line"><span class="keyword">const</span> mockjs = <span class="built_in">require</span>(<span class="string">'mockjs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Random = mockjs.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据持久化</span></span><br><span class="line"><span class="keyword">let</span> tableListData = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!global.tableListData) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = mockjs.mock(&#123;</span><br><span class="line">    <span class="string">'data|100'</span>: [&#123;</span><br><span class="line">      <span class="string">'id|+1'</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">'name'</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Random.cname();</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">'mobile'</span>: <span class="regexp">/1(3[0-9]|4[57]|5[0-35-9]|7[01678]|8[0-9])\d&#123;8&#125;/</span>,</span><br><span class="line">      <span class="string">'avatar'</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Random.image(<span class="string">'125x125'</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">'status|1-2'</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">'email'</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Random.email(<span class="string">'visiondk.com'</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">'isadmin|0-1'</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">'created_at'</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Random.datetime(<span class="string">'yyyy-MM-dd HH:mm:ss'</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">'updated_at'</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Random.datetime(<span class="string">'yyyy-MM-dd HH:mm:ss'</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;],</span><br><span class="line">    page: &#123;</span><br><span class="line">      total: <span class="number">100</span>,</span><br><span class="line">      current: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  tableListData = data;</span><br><span class="line">  global.tableListData = tableListData;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  tableListData = global.tableListData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模拟API怎么写？"><a href="#模拟API怎么写？" class="headerlink" title="模拟API怎么写？"></a>模拟API怎么写？</h3><p>完成持久化处理后，就可以像操作数据库一样进行增、删、改、查</p>
<p>下面是一个删除用户的API</p>
<p>参见<a href="https://github.com/tkvern/dva-passport/blob/develop/resources/assets/ant_passport/mock/users.js#L106" target="_blank" rel="noopener">mock/users.js#L106</a>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'DELETE /api/users'</span> (req, res) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> deleteItem = qs.parse(req.body);</span><br><span class="line"></span><br><span class="line">      tableListData.data = tableListData.data.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.id === deleteItem.id) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      tableListData.page.total = tableListData.data.length;</span><br><span class="line"></span><br><span class="line">      global.tableListData = tableListData;</span><br><span class="line"></span><br><span class="line">      res.json(&#123;</span><br><span class="line">        success: <span class="literal">true</span>,</span><br><span class="line">        data: tableListData.data,</span><br><span class="line">        page: tableListData.page,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<h3 id="还有一步"><a href="#还有一步" class="headerlink" title="还有一步"></a>还有一步</h3><p>模拟数据和API写好了，还需要拦截Ajax请求</p>
<p>修改<code>package.json</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "dora --plugins \"proxy,webpack,webpack-hmr\"",</span><br><span class="line">  "build": "atool-build -o ../../../public",</span><br><span class="line">  "test": "atool-test-mocha ./src/**/*-test.js"</span><br><span class="line">&#125;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure>
<p>如果与<code>dora</code>有端口冲突可修改<code>dora</code>的端口号</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"start": "dora --port 8888 --plugins \"proxy,webpack,webpack-hmr\"",</span><br></pre></td></tr></table></figure>
<p>完成这些基本工作就做好了</p>
<h3 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h3><p>在模拟数据环境，<code>services</code>下的模块这么写就好了，真实API则替换为真实API的地址。可将地址前缀写到统一配置中去。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'../utils/request'</span>;</span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(<span class="string">`/api/users?<span class="subst">$&#123;qs.stringify(params)&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(<span class="string">'/api/users'</span>, &#123;</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    body: qs.stringify(params),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(<span class="string">'/api/users'</span>, &#123;</span><br><span class="line">    method: <span class="string">'delete'</span>,</span><br><span class="line">    body: qs.stringify(params),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(<span class="string">'/api/users'</span>, &#123;</span><br><span class="line">    method: <span class="string">'put'</span>,</span><br><span class="line">    body: qs.stringify(params),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>真实API参考实例: <a href="https://github.com/tkvern/dva-passport/blob/develop/resources/assets/ant_passport/src/services/users.js" target="_blank" rel="noopener">src/services/users.js</a></p>
<h2 id="如何保持登录状态"><a href="#如何保持登录状态" class="headerlink" title="如何保持登录状态"></a>如何保持登录状态</h2><p>在看dva的引导手册时，并没有介绍登录相关的内容。因为不同的项目，对于登录这块的实现会有所不同，并不是唯一的。通常我们会使用Cookie的方式保持登录状态，或者 Auth 2.0的技术。</p>
<p>这里介绍Cookie的方式。</p>
<p>登录成功之后服务器会设置一个当前域可以使用的Cookie，例如<code>token</code>啥的。然后在每次数据请求的时候在<code>Request Headers</code>中携带<code>token</code>，后端会基于这个<code>token</code>进行权限验证。思路清晰了，来看看具体实现吧。（注：在这次项目中使用了统一登录模块，通过Header中的<code>Authorization</code>进行验证，将只介绍拿到<code>token</code>之后的数据处理）</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>对于操作Cookie的一些操作，建议先封装到工具类模块下。同时我把操作<code>LocalStrage</code>的一些操作也写进来了。</p>
<p>参见<a href="https://github.com/tkvern/dva-passport/blob/develop/resources/assets/ant_passport/src/utils/helper.js" target="_blank" rel="noopener">src/utils/helper.js</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="comment">// Operation Cookie</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^| )'</span> + name + <span class="string">'=([^;]*)(;|$)'</span>);</span><br><span class="line">  <span class="keyword">const</span> arr = <span class="built_in">document</span>.cookie.match(reg);</span><br><span class="line">  <span class="keyword">if</span> (arr) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(arr[<span class="number">2</span>]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">delCookie</span>(<span class="params">&#123; name, domain, path &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (getCookie(name)) &#123;</span><br><span class="line">    <span class="built_in">document</span>.cookie = name + <span class="string">'=; expires=Thu, 01-Jan-70 00:00:01 GMT; path='</span> + </span><br><span class="line">                      path + <span class="string">'; domain='</span> + </span><br><span class="line">                      domain;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure>
<p>Header的预处理我放在了<a href="https://github.com/tkvern/dva-passport/blob/develop/resources/assets/ant_passport/src/utils/auth.js#L5" target="_blank" rel="noopener">src/utils/auth.js#L5</a>，这里后端返回的数据都是JSON格式，所以在Header里面需要添加<code>application/json</code>进去，而<code>Authorization</code>是后端用来验证用户信息的。变量<code>sso_token</code>为了方便代码阅读就没有按照规范命名了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getAuthHeader</span>(<span class="params">sso_token</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (&#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">      <span class="string">'Authorization'</span>: <span class="string">'Bearer '</span> + sso_token,</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="修改Request"><a href="#修改Request" class="headerlink" title="修改Request"></a>修改Request</h3><p>这里没有使用自带的catch机制来处理请求错误，在开发过程中，最开始打算使用统一错误处理，但是发现请求失败后，不能在<code>models</code>层处理<code>components</code>，所以就换了一种方式处理，后面会讲到。</p>
<p>参见<a href="https://github.com/tkvern/dva-passport/blob/develop/resources/assets/ant_passport/src/utils/request.js#L29" target="_blank" rel="noopener">src/utils/request.js#L29</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> sso_token = getCookie(<span class="string">'sso_token'</span>);</span><br><span class="line">  <span class="keyword">const</span> authHeader = getAuthHeader(sso_token);</span><br><span class="line">  <span class="keyword">return</span> fetch(url, &#123; ...options, ...authHeader &#125;)</span><br><span class="line">    .then(checkStatus)</span><br><span class="line">    .then(parseJSON)</span><br><span class="line">    .then(<span class="function">(<span class="params">data</span>) =&gt;</span> (&#123; data &#125;));</span><br><span class="line">    <span class="comment">// .catch((err) =&gt; (&#123; err &#125;));</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完成这些配置之后，每次向服务器发送的请求就都携带了用户<code>token</code>了。在<code>token</code>无效时，服务器会抛出<code>401</code>错误，这时就需要在中间件中处理<code>401</code>错误。</p>
<p>参见<a href="https://github.com/tkvern/dva-passport/blob/develop/resources/assets/ant_passport/src/utils/request.js#L10" target="_blank" rel="noopener">src/utils/request.js#L10</a></p>
<p><code>redirectLogin</code>是工具类<a href="https://github.com/tkvern/dva-passport/blob/develop/resources/assets/ant_passport/src/utils/auth" target="_blank" rel="noopener">src/utils/auth.js</a>中的重定向登录方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkStatus</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (response &amp;&amp; response.status === <span class="number">401</span>) &#123;</span><br><span class="line">    redirectLogin();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (response.status &gt;= <span class="number">200</span> &amp;&amp; response.status &lt; <span class="number">500</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>(response.statusText);</span><br><span class="line">  error.response = response;</span><br><span class="line">  <span class="keyword">throw</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到此为止，登录状态的配置基本完成。</p>
<h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h2><p>我们的应用中会有多个页面，而且有的需要登录才可见，那么如何控制呢？</p>
<p>React的路由控制是比较灵活的，来看看下面这个例子：</p>
<p><a href="https://github.com/tkvern/dva-passport/blob/develop/resources/assets/ant_passport/src/router.jsx" target="_blank" rel="noopener">src/router.jsx</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router, Route &#125; <span class="keyword">from</span> <span class="string">'dva/router'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; authenticated &#125; <span class="keyword">from</span> <span class="string">'./utils/auth'</span>;</span><br><span class="line"><span class="keyword">import</span> Dashboard <span class="keyword">from</span> <span class="string">'./routes/Dashboard'</span>;</span><br><span class="line"><span class="keyword">import</span> Users <span class="keyword">from</span> <span class="string">'./routes/Users'</span>;</span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">'./routes/User'</span>;</span><br><span class="line"><span class="keyword">import</span> Password <span class="keyword">from</span> <span class="string">'./routes/Password'</span>;</span><br><span class="line"><span class="keyword">import</span> Roles <span class="keyword">from</span> <span class="string">'./routes/Roles'</span>;</span><br><span class="line"><span class="keyword">import</span> Permissions <span class="keyword">from</span> <span class="string">'./routes/Permissions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">&#123; history &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router history=&#123;history&#125;&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/"</span> component=&#123;Dashboard&#125; onEnter=&#123;authenticated&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/user"</span> component=&#123;User&#125; onEnter=&#123;authenticated&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/password"</span> component=&#123;Password&#125; onEnter=&#123;authenticated&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/users"</span> component=&#123;Users&#125; onEnter=&#123;authenticated&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/roles"</span> component=&#123;Roles&#125; onEnter=&#123;authenticated&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/permissions"</span> component=&#123;Permissions&#125; onEnter=&#123;authenticated&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<p>对于路由的验证配置在<code>onEnter</code>属性中，<code>authenticated</code>方法可统一进行路由验证，要注意每一个<code>Route</code>节点的验证都需要配置相应的<code>onEnter</code>属性。如果权限较为复杂需对每一个<code>Route</code>单独验证。其实这种基于客户端渲染的应用，如果页面限制有遗漏也关系不太，后端提供的API会对数据进行验证，即使前端访问到没有权限的页面，也同样不用担心，做好客户端错误处理即可。</p>
<h2 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h2><p>对于一个React应用来说，缓存是很重要的一步。前后端分离后，频繁的Ajax请求会消耗大量的服务器资源，如果一些不长变动的持久化数据不做缓存的话，会浪费许多资源。所以，比较常见的方法就是将数据缓存在<code>LocalStorage</code>中。针对一些敏感信息可适当进行加密混淆处理，我这里就不介绍了。</p>
<h3 id="什么时候做数据缓存"><a href="#什么时候做数据缓存" class="headerlink" title="什么时候做数据缓存?"></a>什么时候做数据缓存?</h3><p>例：用户信息缓存</p>
<p>参见<a href="https://github.com/tkvern/dva-passport/blob/develop/resources/assets/ant_passport/src/models/auth.js#L64" target="_blank" rel="noopener">src/models/auth.js#L64</a></p>
<p>在<code>subscriptions</code>中配置了<code>setup</code>检测<code>LocalStorage</code>中的<code>user</code>是否存在。不存在时会去<code>query</code>用户信息，然后保存到<code>user</code>中，如果存在就将<code>user</code>中的数据添加到<code>state</code>的<code>user: {}</code>中。当然在进行请求时，已经在<code>src/utils/auth.js</code>验证用户信息是否正确，同时做了相应的限制<a href="https://github.com/tkvern/dva-passport/blob/develop/resources/assets/ant_passport/src/utils/auth.js#L20" target="_blank" rel="noopener">src/utils/auth.js#L20</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; parse &#125; <span class="keyword">from</span> <span class="string">'qs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; message &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; query, update, password &#125; <span class="keyword">from</span> <span class="string">'../services/auth'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getLocalStorage, setLocalStorage &#125; <span class="keyword">from</span> <span class="string">'../utils/helper'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespace: <span class="string">'auth'</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line">    user: &#123;&#125;,</span><br><span class="line">    isLogined: <span class="literal">false</span>,</span><br><span class="line">    currentMenu: [],</span><br><span class="line">  &#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    querySuccess(state, action) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, ...action.payload, <span class="attr">isLogined</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  effects: &#123;</span><br><span class="line">    *query(&#123; payload &#125;, &#123; call, put &#125;) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">yield</span> call(query, parse(payload));</span><br><span class="line">      <span class="keyword">if</span> (data &amp;&amp; data.err_msg === <span class="string">'SUCCESS'</span>) &#123;</span><br><span class="line">        setLocalStorage(<span class="string">'user'</span>, data.data);</span><br><span class="line">        <span class="keyword">yield</span> put(&#123;</span><br><span class="line">          type: <span class="string">'querySuccess'</span>,</span><br><span class="line">          payload: &#123;</span><br><span class="line">            user: data.data,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  subscriptions: &#123;</span><br><span class="line">    setup(&#123; dispatch &#125;) &#123;</span><br><span class="line">      <span class="keyword">const</span> data = getLocalStorage(<span class="string">'user'</span>);</span><br><span class="line">      <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">        dispatch(&#123;</span><br><span class="line">          type: <span class="string">'query'</span>,</span><br><span class="line">          payload: &#123;&#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dispatch(&#123;</span><br><span class="line">          type: <span class="string">'querySuccess'</span>,</span><br><span class="line">          payload: &#123;</span><br><span class="line">            user: data,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单来说，就是没有缓存的时候缓存。</p>
<h3 id="什么时候更新数据缓存？"><a href="#什么时候更新数据缓存？" class="headerlink" title="什么时候更新数据缓存？"></a>什么时候更新数据缓存？</h3><p>例如，<code>roles</code>中<code>添加</code>和<code>修改</code>功能都需要用到<code>permissions</code>的数据，哪我怎么拿到最新的<code>permissions</code>数据呢。首先，我在加载<code>roles</code>列表页面时就需要将<code>permissions</code>的数据缓存，这样，在每次点<code>添加</code>或<code>修改</code>功能时就不需要再去拉取已缓存的数据了。</p>
<p>参见<a href="https://github.com/tkvern/dva-passport/blob/develop/resources/assets/ant_passport/src/models/roles.js#L166" target="_blank" rel="noopener">src/models/roles.js#L166</a></p>
<p>在监听路由到<code>roles</code>时查询<code>permissions</code>是否缓存，将其更新到缓存中去。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">  subscriptions: &#123;</span><br><span class="line">    setup(&#123; dispatch, history &#125;) &#123;</span><br><span class="line">      history.listen(<span class="function">(<span class="params">location</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> match = pathToRegexp(<span class="string">'/roles'</span>).exec(location.pathname);</span><br><span class="line">        <span class="keyword">if</span> (match) &#123;</span><br><span class="line">          <span class="keyword">const</span> data = getLocalStorage(<span class="string">'permissions'</span>);</span><br><span class="line">          <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">            dispatch(&#123;</span><br><span class="line">              type: <span class="string">'permissions/updateCache'</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">          dispatch(&#123;</span><br><span class="line">            type: <span class="string">'query'</span>,</span><br><span class="line">            payload: location.query,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure>
<h3 id="什么时候删除数据缓存？"><a href="#什么时候删除数据缓存？" class="headerlink" title="什么时候删除数据缓存？"></a>什么时候删除数据缓存？</h3><p>删除缓存的配置是比较灵活的，这里的业务场景并不复杂所以，我用了比较简单的处理方式。</p>
<p>参见<a href="https://github.com/tkvern/dva-passport/blob/develop/resources/assets/ant_passport/src/models/permissions.js#L112" target="_blank" rel="noopener">src/models/permissions.js#L112</a></p>
<p>在执行新增或更新操作成功后，将本地原有的缓存删除。加上数据联动的特性，当再次回到<code>roles</code>操作时，缓存已经更新了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">  *update(&#123; payload &#125;, &#123; select, call, put &#125;) &#123;</span><br><span class="line">      <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'hideModal'</span> &#125;);</span><br><span class="line">      <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'showLoading'</span> &#125;);</span><br><span class="line">      <span class="keyword">const</span> id = <span class="keyword">yield</span> select(<span class="function">(<span class="params">&#123; permissions &#125;</span>) =&gt;</span> permissions.currentItem.id);</span><br><span class="line">      <span class="keyword">const</span> newRole = &#123; ...payload, id &#125;;</span><br><span class="line">      <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">yield</span> call(update, newRole);</span><br><span class="line">      <span class="keyword">if</span> (data &amp;&amp; data.err_msg === <span class="string">'SUCCESS'</span>) &#123;</span><br><span class="line">        <span class="keyword">yield</span> put(&#123;</span><br><span class="line">          type: <span class="string">'updateSuccess'</span>,</span><br><span class="line">          payload: newRole,</span><br><span class="line">        &#125;);</span><br><span class="line">        localStorage.removeItem(<span class="string">'permissions'</span>);</span><br><span class="line">        message.success(<span class="string">'更新成功!'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure>
<h3 id="State的临时缓存"><a href="#State的临时缓存" class="headerlink" title="State的临时缓存"></a>State的临时缓存</h3><p>state的中的数据是变化的，刷新页面之后会重置掉，也可以将部分<code>models</code>中的<code>state</code>存到<code>Localstorage</code>中，让state的数据从<code>Localstorage</code>读取，但不是必要的。而<code>list</code>数据的更新，是直接操作state中的数据的。</p>
<p>如下(这样就不用更新整个list的数据了)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">    grantSuccess(state, action) &#123;</span><br><span class="line">      <span class="keyword">const</span> grantUser = action.payload;</span><br><span class="line">      <span class="keyword">const</span> newList = state.list.map(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (user.id === grantUser.id) &#123;</span><br><span class="line">          user.roles = grantUser.roles;</span><br><span class="line">          <span class="keyword">return</span> &#123; ...user &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, ...newList, <span class="attr">loading</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure>
<h2 id="视图组件运用"><a href="#视图组件运用" class="headerlink" title="视图组件运用"></a>视图组件运用</h2><p>Ant 提供的组件非常多，但用起来还是需要一些学习成本的，同时多个组件组合使用时也需要有很多地方注意的。</p>
<h3 id="Modal注意事项"><a href="#Modal注意事项" class="headerlink" title="Modal注意事项"></a>Modal注意事项</h3><p>在使用Modal组件时，难免会出现一个页面多个Modal的情况，首先要注意的就是Modal的命名，在多Modal情况下，命名不注意很容易出现分不清用的是哪个Modal。建议命名时能望名知意。然后就是Modal需要用到别的Models的数据时，如果在弹窗时通过Ajax获取需要的数据再显示Modal，这样就会出现Modal延迟，而且Modal的动画也无法加载出来。所以，我的处理方式是，在进入这一级<code>Route</code>的时候就将需要的数据<code>预缓存</code>，这样调用时就可随用随取，不会出现延迟了。</p>
<p>参见<a href="https://github.com/tkvern/dva-passport/blob/develop/resources/assets/ant_passport/src/components/user/UserModalGrant.jsx#L33" target="_blank" rel="noopener">src/components/user/UserModalGrant.jsx#L33</a></p>
<h3 id="Form注意"><a href="#Form注意" class="headerlink" title="Form注意"></a>Form注意</h3><p>Ant的form组件很完善，需要注意的就是表单的多条件查询。如果单单是一个条件查询的处理比较简单，将查询关键词设成<code>string</code>类型存到相应的Models中的state即可，多条件的话，稍微麻烦一点，需存成Hash对象。灵活处理即可。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>官方文档的描述很清楚，我就不充大头了。注意写法规范即可，直接复制粘贴官方例子代码会很难看。</p>
<h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p>终于说到点子上了，前后端分离遇到跨域问题很正常，而这种基于RESTful API的前后端分离就更好弄了。我这以Fetch + PHP + Laravel为例，这种并不是最有解决方案！仅供参考！</p>
<p>在<code>header</code>中进行如下配置</p>
<p><code>Access-Control-Allow-Origin</code>配置允许的域</p>
<p><code>Access-Control-Allow-Methods</code>配置允许的请求方式</p>
<p><code>Access-Control-Allow-Headers</code>配置允许的请求头</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">|--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">| API Routes</span></span><br><span class="line"><span class="comment">|--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">|</span></span><br><span class="line"><span class="comment">| Here is where you can register API routes for your application. These</span></span><br><span class="line"><span class="comment">| routes are loaded by the RouteServiceProvider within a group which</span></span><br><span class="line"><span class="comment">| is assigned the "api" middleware group. Enjoy building your API!</span></span><br><span class="line"><span class="comment">|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">Route::group([<span class="string">'middleware'</span>=&gt; [<span class="string">'auth:api'</span>]], <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    header(<span class="string">"Access-Control-Allow-Origin: *"</span>);</span><br><span class="line">    header(<span class="string">"Access-Control-Allow-Methods: GET, HEAD, POST, PUT, PATCH, DELETE"</span>);</span><br><span class="line">    header(<span class="string">"Access-Control-Allow-Headers: Access-Control-Allow-Headers, Origin, Accept, Authorization, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers"</span>);</span><br><span class="line">    <span class="keyword">require</span> base_path(<span class="string">'routes/common.php'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>基于其他编程语言的处理类似。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>了解前端、熟悉前端、精通前端、熟悉前端、不懂前端</p>
<p>了解 X X 、熟悉 X X 、精通 X X 、熟悉 X X 、不懂 X X </p>
]]></content>
      <categories>
        <category>Front-end</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>梦回长安</title>
    <url>/20200315/%E6%A2%A6%E5%9B%9E%E9%95%BF%E5%AE%89/</url>
    <content><![CDATA[<p>昨日酒醉，赋诗一首，作此诗于深圳，2020-03-16 07:35 笔</p>
<a id="more"></a>
<p class="poem"><br>梦回长安<br>张翔<br><br>霓裳羽衣相思久<br>梦回长安城里住<br>极乐宴上睹芳容<br>醉入酒池方醒悟<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>用余弦定理+大数据找到心仪的对象</title>
    <url>/20200323/%E7%94%A8%E4%BD%99%E5%BC%A6%E5%AE%9A%E7%90%86+%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%89%BE%E5%88%B0%E5%BF%83%E4%BB%AA%E7%9A%84%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p><img src="/images/cover/cosin.jpg" alt="cosin"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>余弦定理和找对象似乎是两件八杆子打不着的事，但是它们却有着类似于余弦定理和Google的新闻自动分类一样的紧密联系。具体来说，找对象也可以和做Google的新闻自动分类一样，找到最契合的另一半。</p>
<a id="more"></a>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>找对象之前，先来看看文章自动分类的原理，我们做文章自动分类时，第一步是从分词入手</p>
<h3 id="第一步，分词"><a href="#第一步，分词" class="headerlink" title="第一步，分词"></a>第一步，分词</h3><p>这里使用了一个Node.js比较成熟的分词库，底层算法是基于c++做的实现，性能不错。</p>
<p>参见 <a href="https://github.com/tkvern/nodejs-text-similarity/blob/master/index.js#L88" target="_blank" rel="noopener">/index.js#L88</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单分词</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>text 文本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Array&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">segment(text) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!text) <span class="keyword">return</span> []</span><br><span class="line">  <span class="keyword">return</span> nodejieba.cut(text)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第二步，-列出所有词"><a href="#第二步，-列出所有词" class="headerlink" title="第二步， 列出所有词"></a>第二步， 列出所有词</h3><p>分词之后我们将得到所有的词</p>
<p>参见 <a href="https://github.com/tkvern/nodejs-text-similarity/blob/master/index.js#L11" target="_blank" rel="noopener">/index.js#L11</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文本相似度查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>textA 文本A</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>textB 文本B</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">constructor</span>(textA, textB) &#123;</span><br><span class="line">  textA = <span class="string">""</span> + textA</span><br><span class="line">  textB = <span class="string">""</span> + textB</span><br><span class="line">  <span class="keyword">this</span>.segmentWordsA = <span class="keyword">this</span>.segment(textA)</span><br><span class="line">  <span class="keyword">this</span>.segmentWordsB = <span class="keyword">this</span>.segment(textB)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第三步，统计词频率"><a href="#第三步，统计词频率" class="headerlink" title="第三步，统计词频率"></a>第三步，统计词频率</h3><p>当我们拿到所有词的数组后，还需要进行词频统计，<code>EXCLUDE_WORDS_ARRAY</code>这个是我们排出的一些语气助词。</p>
<p>参见 <a href="https://github.com/tkvern/nodejs-text-similarity/blob/master/index.js#L43" target="_blank" rel="noopener">/index.js#L43</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分析两段文本</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">analyse() &#123;</span><br><span class="line">  <span class="comment">// 分析A片段</span></span><br><span class="line">  <span class="keyword">this</span>.segmentWordsA.forEach(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.EXCLUDE_WORDS_ARRAY.includes(element)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.distributionWordsArray.hasOwnProperty(element)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.distributionWordsArray[element] = [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.distributionWordsArray[element][<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 分析B片段</span></span><br><span class="line">  <span class="keyword">this</span>.segmentWordsB.forEach(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.EXCLUDE_WORDS_ARRAY.includes(element)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.distributionWordsArray.hasOwnProperty(element)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.distributionWordsArray[element] = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.distributionWordsArray[element][<span class="number">1</span>] += <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第四步，根据词频向量计算相似程度"><a href="#第四步，根据词频向量计算相似程度" class="headerlink" title="第四步，根据词频向量计算相似程度"></a>第四步，根据词频向量计算相似程度</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">句子A： &quot;太阳刚升起夕阳已落下&quot;</span><br><span class="line">句子B： &quot;我在马路边夕阳已落下&quot;</span><br></pre></td></tr></table></figure>
<p>通过计算，我们会得到这样一个词频数组</p>
<p><img src="/images/cosin/131584975100.jpg" alt="向量"></p>
<p>结合余弦定理:</p>
<p><img src="/images/cosin/bg2013032002.png" alt="夹角"></p>
<p>对于n维向量的计算如下:</p>
<p><img src="/images/cosin/bg2013032007.png" alt="n维计算"></p>
<p>而计算出来的余弦值越接近1，则表明夹角越接近0度，也就是两个向量越相似。</p>
<p>参见<a href="(https://github.com/tkvern/nodejs-text-similarity/blob/master/index.js#L43">/index.js#71</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理相似度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">similarity() &#123;</span><br><span class="line">  <span class="keyword">let</span> [sum, sumWordsA, sumWordsB] = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> element <span class="keyword">in</span> <span class="keyword">this</span>.distributionWordsArray) &#123;</span><br><span class="line">    <span class="keyword">const</span> wordsA = <span class="keyword">this</span>.distributionWordsArray[element][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">const</span> wordsB = <span class="keyword">this</span>.distributionWordsArray[element][<span class="number">1</span>]</span><br><span class="line">    sum += (wordsA * wordsB)</span><br><span class="line">    sumWordsA += <span class="built_in">Math</span>.pow(wordsA, <span class="number">2</span>)</span><br><span class="line">    sumWordsB += <span class="built_in">Math</span>.pow(wordsB, <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum / <span class="built_in">Math</span>.sqrt(sumWordsA * sumWordsB)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="找对象"><a href="#找对象" class="headerlink" title="找对象"></a>找对象</h2><p>和做文章自动分类一样</p>
<h3 id="第一步，基本信息、个性、兴趣爱好分析"><a href="#第一步，基本信息、个性、兴趣爱好分析" class="headerlink" title="第一步，基本信息、个性、兴趣爱好分析"></a>第一步，基本信息、个性、兴趣爱好分析</h3><p>和分词原理类似，我们要将每个人的物理数据数字化，并按照不同的维度拆分</p>
<h3 id="第二步，列出所有数字化后的数据"><a href="#第二步，列出所有数字化后的数据" class="headerlink" title="第二步，列出所有数字化后的数据"></a>第二步，列出所有数字化后的数据</h3><p>分析之后，我们将得到数字化的人物画像。</p>
<h3 id="第三步，参数统计"><a href="#第三步，参数统计" class="headerlink" title="第三步，参数统计"></a>第三步，参数统计</h3><p>对数字化后的每一项数据，进行统计</p>
<h3 id="第四步，计算相似程度"><a href="#第四步，计算相似程度" class="headerlink" title="第四步，计算相似程度"></a>第四步，计算相似程度</h3><p>这里用到的计算方法和词频统计一样，而拓展一些的地方是，可以给某些参数增加权重。</p>
<p>这样就可以结合你的个人状况，找到最适合你的对象了。</p>
<h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><p>你应该已经注意到了，我们做文章自动分类的前提，是有足够多的文章数据</p>
<p>所以，用余弦定理+大数据找到心仪的对象，也需要有足够多的数字化数据。</p>
<p>而一切的前提，是要有足够多的对象数据，所以要先挖掘下数据吧。</p>
<p><img src="/images/cosin/happy.jpeg" alt="happy"></p>
<h2 id="Plan"><a href="#Plan" class="headerlink" title="Plan"></a>Plan</h2><p>我有个帮你找对象的计划，如果你有找对象的需求，可以提交到我的系统里面来哦～</p>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p>文中代码仓库请访问 <a href="https://github.com/tkvern/nodejs-text-similarity" target="_blank" rel="noopener">https://github.com/tkvern/nodejs-text-similarity</a></p>
]]></content>
  </entry>
  <entry>
    <title>30行代码构建HTTP服务器</title>
    <url>/20200324/30%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%9E%84%E5%BB%BAHTTP%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p><img src="/images/cover/Node-js.jpg" alt="nodejs"></p>
<p>前两天调代码，想查看测试覆盖率生成的网页报告文件，没有安装HTTP服务器客户端。就在VS Code中下载一个叫<code>Live Server</code>的插件，用来启动HTTP服务。感觉效果还不错，然后今天和大家用Node来实现一个。</p>
<a id="more"></a>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>构建HTTP服务，需要先了解一下HTTP协议的基础知识</p>
<h3 id="HTTP工作原理"><a href="#HTTP工作原理" class="headerlink" title="HTTP工作原理"></a>HTTP工作原理</h3><p>HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。HTTP协议采用了请求/响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。</p>
<h3 id="HTTP请求格式"><a href="#HTTP请求格式" class="headerlink" title="HTTP请求格式"></a>HTTP请求格式</h3><p><img src="/images/http/http1.jpg" alt="request"></p>
<h3 id="HTTP响应格式"><a href="#HTTP响应格式" class="headerlink" title="HTTP响应格式"></a>HTTP响应格式</h3><p><img src="/images/http/http2.jpg" alt="response"></p>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>这里的需求比较简单，只要能GET即可，不需要POST</p>
<p>这里会用到Node的<code>http</code>和<code>fs</code>模块</p>
<p><strong>导入模块</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br></pre></td></tr></table></figure>
<p><strong>创建服务</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(); <span class="comment">// 创建服务</span></span><br><span class="line">server.listen(<span class="number">8888</span>); <span class="comment">// 监听端口</span></span><br></pre></td></tr></table></figure>
<p><strong>Content-Type的HashMap</strong></p>
<p>这里定义了我们网页中，常用的一些文件类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CONTENT_TYPE_MAP = &#123; <span class="comment">// 定义Content-Type的HashMap</span></span><br><span class="line">  html: <span class="string">"text/html; charset=UTF-8"</span>,</span><br><span class="line">  htm: <span class="string">"text/html; charset=UTF-8"</span>,</span><br><span class="line">  js: <span class="string">"application/javascript; charset=UTF-8"</span>,</span><br><span class="line">  css: <span class="string">"text/css; charset=UTF-8"</span>,</span><br><span class="line">  txt: <span class="string">"text/plain; charset=UTF-8"</span>,</span><br><span class="line">  mainfest: <span class="string">"text/plain; charset=UTF-8"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>处理Request</strong></p>
<p>在返回response的时候，如果文件类型在<code>CONTENT_TYPE_MAP</code>中没有，我们则以<code>application/octet-stream</code>类型返回，浏览器端会直接将文件下载到本地。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">server.on(<span class="string">"request"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>).parse(request.url);</span><br><span class="line">  <span class="keyword">const</span> filename = url.pathname.substring(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> suffix = filename.substring(filename.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>); <span class="comment">// 获取文件后缀</span></span><br><span class="line">  fs.readFile(filename, <span class="function"><span class="keyword">function</span>(<span class="params">err, content</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      response.writeHead(<span class="number">404</span>, &#123;</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"text/plain; charset=UTF-8"</span></span><br><span class="line">      &#125;);</span><br><span class="line">      response.write(err.message);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">"Content-Type"</span>: CONTENT_TYPE_MAP[suffix] || <span class="string">"application/octet-stream"</span></span><br><span class="line">      &#125;);</span><br><span class="line">      response.write(content);</span><br><span class="line">    &#125;</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>到这里，借助Node V8引擎，一个极为轻量化、性能优异的基础HTTP服务器就开发完成了。需要本地启动HTTP服务器的时候，再也不用到网上下载啥客户端了，30行代码就搞定。需要的时候，直接命令行启动即可。</p>
<p>项目源码请访问: <a href="https://github.com/tkvern/node-http-server" target="_blank" rel="noopener">https://github.com/tkvern/node-http-server</a></p>
]]></content>
  </entry>
  <entry>
    <title>雨</title>
    <url>/20200528/%E9%9B%A8/</url>
    <content><![CDATA[<p>关于雨的一首诗，作此诗于深圳，2020-05-29 01:33 笔</p>
<a id="more"></a>
<p class="poem"><br>雨<br>张翔<br><br>垂帘听风易<br>四月初暮雨<br>淅淅沥沥<br>轻寒不知时限<br>行踪无定<br>离君不问归期<br>烟柳画桥<br>卿作桥边客<br>碧波花舫<br>予是泛舟人<br>醉卧十里酒香<br>不及远方不及卿<br><br></p>

<p><strong>注释</strong><br>【行踪无定】各处来往出没，没有固定住所<br>【桥边客】往往桥边客，金犹恨未平</p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>用deno构建HTTP服务器试试</title>
    <url>/20200401/%E7%94%A8deno%E6%9E%84%E5%BB%BAHTTP%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%95%E8%AF%95/</url>
    <content><![CDATA[<p><img src="/images/cover/deno.jpg" alt="deno"><br>恰巧今日有朋友聊到deno，学习了下deno，顺手写了个小玩具。(内容一会再补充……)<br>前端工程师无缝入手。</p>
<a id="more"></a>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; serve &#125; <span class="keyword">from</span> <span class="string">"https://deno.land/std@v0.36.0/http/server.ts"</span>;</span><br><span class="line"><span class="keyword">const</span> server = serve(&#123; port: <span class="number">8899</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> CONTENT_TYPE_MAP: &#123; [index: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125; = &#123; <span class="comment">// 定义Content-Type的HashMap</span></span><br><span class="line">  html: <span class="string">"text/html; charset=UTF-8"</span>,</span><br><span class="line">  htm: <span class="string">"text/html; charset=UTF-8"</span>,</span><br><span class="line">  js: <span class="string">"application/javascript; charset=UTF-8"</span>,</span><br><span class="line">  css: <span class="string">"text/css; charset=UTF-8"</span>,</span><br><span class="line">  txt: <span class="string">"text/plain; charset=UTF-8"</span>,</span><br><span class="line">  mainfest: <span class="string">"text/plain; charset=UTF-8"</span></span><br><span class="line">&#125;;</span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> req of server) &#123;</span><br><span class="line">    <span class="keyword">const</span> pathname = req.url.split(<span class="string">'?'</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">const</span> filename = <span class="string">'/Users/vernbrandl/Downloads/'</span> + pathname.substring(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> suffix = filename.substring(filename.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>); <span class="comment">// 获取文件后缀</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> content = <span class="keyword">await</span> Deno.readFile(filename)</span><br><span class="line">      <span class="keyword">const</span> headers = <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">        <span class="string">"Content-Type"</span>: CONTENT_TYPE_MAP[suffix] || <span class="string">"application/octet-stream"</span></span><br><span class="line">      &#125;)</span><br><span class="line">      req.respond(&#123;</span><br><span class="line">        body: content, status: <span class="number">200</span>, headers</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      req.respond(&#123; body: <span class="string">"Not Found\n"</span>, status: <span class="number">404</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<p>项目地址 =&gt; <a href="https://github.com/tkvern/deno-http-server" target="_blank" rel="noopener">https://github.com/tkvern/deno-http-server</a></p>
]]></content>
  </entry>
  <entry>
    <title>苍穹</title>
    <url>/20200611/%E8%8B%8D%E7%A9%B9/</url>
    <content><![CDATA[<p>观苍穹之下，作于深圳，2020-06-11 23:30 笔</p>
<a id="more"></a>
<p class="poem"><br>苍穹<br>张翔<br><br>渺渺苍穹外<br>浩瀚星河中<br>浮生若尘埃<br>流光皆微茫<br>孤坐夜幕下<br>纹刻青石上<br>谓生欲何求<br>百学以冥索<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>忆卿</title>
    <url>/20201203/%E5%BF%86%E5%8D%BF/</url>
    <content><![CDATA[<p>忆卿时，作于深圳，2020-12-04 00:10 笔</p>
<a id="more"></a>
<p class="poem"><br>忆卿<br>张翔<br><br>别忆卿时态<br>梦画妆容前<br>但闻细虫声<br>似有万语言<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>夜归・上集</title>
    <url>/20201205/%E5%A4%9C%E5%BD%92%E4%B8%8A%E9%9B%86/</url>
    <content><![CDATA[<p>昨夜晚归家，作《夜归》上集，作此诗于深圳，2020-12-05 13:39 笔</p>
<a id="more"></a>
<p class="poem"><br>夜归・上<br>张翔<br><br>月下有寒影<br>风吹归路人<br>长有檐角灯<br>照入深巷里<br>门前守夜人<br>紧衣御长夜<br>掩窗点炉火<br>幽梦还乡来<br><br></p>]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>中间人</title>
    <url>/20210205/%E4%B8%AD%E9%97%B4%E4%BA%BA/</url>
    <content><![CDATA[<p>饮酒高歌深夜，记下朋友的胡言真心话，作于深圳</p>
<a id="more"></a>
<p class="poem"><br>中间人<br>张翔<br><br>这夜里的故事很多<br>这世界也难以揣度<br>你说在你身边的人不是你爱的人<br>这感觉像是陌生的我<br>也不懂你心里的难过<br>这时刻是人生经历的折磨<br>我不愿你进这火坑<br>可你朋友圈述说着不快乐<br>可能你也是在恨我<br>我不想成为中间人<br>怕你会怪我<br>怕你会真爱的不是她<br>每一次天亮的时候<br>不想你坠入深渊爱河<br>人就是这么奇怪<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>这一夜</title>
    <url>/20210205/%E8%BF%99%E4%B8%80%E5%A4%9C/</url>
    <content><![CDATA[<p>饮酒高歌深夜，记下朋友的胡言真心话，作于深圳</p>
<a id="more"></a>
<p class="poem"><br>这一夜<br>张翔<br><br>这一夜不眠不休<br>怕陷入这一段爱的过程<br>不想再一次进入这情分<br>酒馆的灯火照不亮你的面容<br>再见见你最后一面<br>没有故事的山<br>再无法牵你的手<br>这一杯茶的的味道不记得<br>一开始关于你的是棋<br>再没有关于你的消息<br>可能是表白的时机不期<br>再不见你温柔的气<br>不想再见你的笑脸<br>不想再做卑微的棋<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>下雨容易想你</title>
    <url>/20210210/%E4%B8%8B%E9%9B%A8%E5%AE%B9%E6%98%93%E6%83%B3%E4%BD%A0/</url>
    <content><![CDATA[<p>下雨容易想你，作于佛山</p>
<a id="more"></a>
<p class="poem"><br>下雨容易想你<br>张翔<br><br>分开多久了<br>也没有再联系<br>也不再有你的动态和消息<br>偶尔也还是会想起你<br>想你的时候<br>就会写写关于你的歌曲<br>安静的夜里<br>窗外下着雨<br>可能下雨的天气<br>比较容易想起你<br>潮湿的街区<br>谁还没回去<br>可能回家的距离<br>还差一个你<br><br>你说我不够爱你<br>不够成熟的交出自己<br>而我们的相遇<br>是不在对的时机<br>你追问一个答案<br>我是不是真的爱你<br>是真的爱你<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>丑奴儿</title>
    <url>/20210212/%E4%B8%91%E5%A5%B4%E5%84%BF/</url>
    <content><![CDATA[<p>词牌《丑奴儿》，这是一首写在深夜的词，春节短暂相聚即将分离，表达离别的千愁万绪，作此诗于佛山， 2021-02-12 23:30 笔</p>
<a id="more"></a>
<p class="poem"><br>丑奴儿<br>张翔<br><br>年幼未尝愁滋味<br>不说离愁<br>但有离愁<br>适逢别时上心头<br>而今尝尽愁滋味<br>不说愁绪<br>但有愁绪<br>旧瓶新酒杯莫拒<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>就忘记</title>
    <url>/20210810/%E5%B0%B1%E5%BF%98%E8%AE%B0/</url>
    <content><![CDATA[<p>有时候不经意的人或事，又会想起关于她的，好多记忆，好多画面。<br>好与坏都是生命体验的一部分，就开始的新生活吧。<br>（写得不太好，后半段烂尾了😭，缺少一些画面和情感的融合）<br>作于深圳，2021-08-10 16:11 笔</p>
<hr>
<p>2021-08-17 20:24 更新，有了新的思路，把后半段的画面补上了</p>
<a id="more"></a>
<p class="poem"><br>就忘记<br>张翔<br><br>思念有多长<br>分开有多难<br>拉拉扯扯的画面就留着回忆吧<br>我不在的以后<br>有些伤痛  醒来就忘了吧<br>要像个孩子一样快乐呀<br><br>最近还好吗<br>你新的生活<br>喜怒哀乐的细节都有人分享吧<br>我不在的以后<br>有些快乐  就永远记着吧<br>要像第一次见你那样呀<br><br>让工作把我的时间占据<br>不再思考关于你的情绪<br>让时间把我的记忆抹去<br>不再回忆关于你的过去<br>夜里的想念就留给自己<br>不再查看关于你的消息<br>往后的日子也留给自己<br>就忘记关于你的点点滴滴<br>去填满心的每一道缝隙<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>三行情诗</title>
    <url>/20210814/%E4%B8%89%E8%A1%8C%E6%83%85%E8%AF%97/</url>
    <content><![CDATA[<p>今日中国七夕情人节，送一首情诗（杨辉三角）</p>
<a id="more"></a>
<p class="poem"><br>三行情诗<br>张翔<br><br>这行是你<br>这行是你<br>这行依旧是你<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>观海栈桥</title>
    <url>/20210819/%E8%A7%82%E6%B5%B7%E6%A0%88%E6%A1%A5/</url>
    <content><![CDATA[<p>未完，观海栈桥是一个地名。</p>
<a id="more"></a>
<p class="poem"><br>观海栈桥<br>张翔<br><br>那一晚星光灿烂<br>风儿撩拨海浪<br>握着你的手<br>温暖 柔软<br><br>这一首琴声悠然<br>月儿陶醉梦乡<br>拥入我怀抱<br>酥香 芬芳<br><br>有一个银河幻想<br>你和我在徜徉<br>河里留下的是<br>爱的 模样<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>故里街三十二号</title>
    <url>/20210827/%E6%95%85%E9%87%8C%E8%A1%97%E4%B8%89%E5%8D%81%E4%BA%8C%E5%8F%B7/</url>
    <content><![CDATA[<p>又回到故里街，仍是故里街，不见故里人</p>
<a id="more"></a>
<p class="poem"><br>故里街三十二号<br>张翔<br><br>夜里的灯还亮着<br>歌还唱着<br>城市的人还没回家呢<br>到故里的末班车<br>有多少人等到了<br><br>梦一场的故事还述说着<br>喝醉的姑娘<br>你的家在哪里呢<br>是离家太远<br>等不到故里的车么<br><br>喝杯故里的酒<br>一杯敬过往<br>一杯敬明天<br>往事都如烟<br><br>听首故里的歌<br>一首唱过往<br>一首唱明天<br>往后都开心<br><br>写行故里的诗<br>一行写过往<br>一行写明天<br>往事不牵连<br><br>爱个故里的人<br>一个在过往<br>一个在明天<br>夜里说晚安<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>记得我有一个女朋友</title>
    <url>/20211106/%E8%AE%B0%E5%BE%97%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E5%A5%B3%E6%9C%8B%E5%8F%8B/</url>
    <content><![CDATA[<p>(Cover 我有一个男朋友)</p>
<a id="more"></a>
<p class="poem"><br>记得我有一个女朋友<br>张翔<br><br>记得我有一个女朋友<br>她会时常偷偷看我的眼眸<br>举她起来也不会觉得费手<br>给她讲梦里的浪漫星球<br><br>记得我有一个女朋友<br>下雨天的约会是在她家门口<br>酒吧鼓手敲着周五下班的节奏<br>爵士加一杯果汁也会上头<br><br>记得我有一个女朋友<br>那是我们还养着一只雪白色的大狗<br>取了个可爱的名字叫妞妞<br>笑我幼稚我总会说<br>你很欠揍<br><br>记得我有一个女朋友<br>她总开心跟我一起吃肉肉<br>吃得白白胖胖还有点变丑<br>可在我的眼里依然温柔<br><br>记得我有一个女朋友<br>我会晚上带她去看脱口秀<br>她总吹牛自己有多能喝酒<br>醉到怀里总还要啃我几口<br><br>记得我有一个女朋友<br>也许我会问她是否愿意到白头<br>无论健康疾病或贫穷富有<br>这时戴上戒指<br>我说<br>与子携手<br><br>可是呀<br>我们已经<br>分开好久<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>小米路由器 SSH密码根据SN破解</title>
    <url>/20220507/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8%20SSH%E5%AF%86%E7%A0%81%E6%A0%B9%E6%8D%AESN%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<p>写了个 Node.js 命令行版的，测试了一下，和官方给出的 SSH 密码一样。</p>
<a id="more"></a>
<p>源码如下:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> salt = &#123;</span><br><span class="line">    <span class="string">'r1d'</span>: <span class="string">'A2E371B0-B34B-48A5-8C40-A7133F3B5D88'</span>,</span><br><span class="line">    <span class="string">'others'</span>: <span class="string">'d44fb0960aa0-a5e6-4a30-250f-6d2df50a'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPasswd</span>(<span class="params">sn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> md5 = Crypto.createHash(<span class="string">'md5'</span>);</span><br><span class="line">    <span class="keyword">const</span> hex = md5.update(sn + getSalt(sn)).digest(<span class="string">'hex'</span>)</span><br><span class="line">    <span class="keyword">return</span> hex.substring(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSalt</span>(<span class="params">sn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sn.includes(<span class="string">'/'</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> swapSalt(salt[<span class="string">'others'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salt[<span class="string">'r1d'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swapSalt</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.split(<span class="string">'-'</span>).reverse().join(<span class="string">'-'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SN = process.argv[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Usage: <span class="subst">$&#123;SN&#125;</span> SN`</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> passwd = getPasswd(SN)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'decrypt password:'</span>, passwd)</span><br></pre></td></tr></table></figure></p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul>
<li><p>复制代码到文件，index.js</p>
</li>
<li><p>命令行运行代码</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node index.js 36418/K1WW04216</span><br><span class="line">Usage: 36418/K1WW04216 SN</span><br><span class="line">decrypt password: f25b355a</span><br></pre></td></tr></table></figure>
</li>
<li><p>登录到路由器，没有ssh的，先sudo apt-get install ssh</p>
<p>  用户名：root<br>  密码：f25b355a</p>
</li>
<li><p>看到 ARE U OK即破解成功</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Front-end</category>
      </categories>
  </entry>
  <entry>
    <title>让你的文字自动适配背景颜色</title>
    <url>/20210224/%E8%AE%A9%E4%BD%A0%E7%9A%84%E6%96%87%E5%AD%97%E8%87%AA%E5%8A%A8%E9%80%82%E9%85%8D%E8%83%8C%E6%99%AF%E9%A2%9C%E8%89%B2/</url>
    <content><![CDATA[<p>网传，产品经理要求App开发人员，让用户App的主题颜色能根据手机壳自动调整。</p>
<p>刚好笔者要做一个类似的事情，根据背景颜色自动改变文字的颜色，以便于用户识别。</p>
<a id="more"></a>
<p><img src="https://user-images.githubusercontent.com/10667077/112811656-deb44f00-90ae-11eb-8f09-ad15e04eae03.png" alt="image"></p>
<p><img src="https://user-images.githubusercontent.com/10667077/112811719-eb38a780-90ae-11eb-8283-8529f3da83bf.jpeg" alt="alicl-bwq9y"></p>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>产品设计了一个人机校验组件，大致长这个样子。背景会每次随机取不同图片，开始的时候，箭头设置为蓝色。在背景为蓝色的时候，用户就分辨箭头就有些困难了。怎么解决这个问题呢？</p>
<p><img src="https://user-images.githubusercontent.com/10667077/112797691-5463ef00-909e-11eb-9834-7ba744f897c9.png" alt="image3"></p>
<h2 id="思路与实现"><a href="#思路与实现" class="headerlink" title="思路与实现"></a>思路与实现</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>取到箭头底部背景的范围坐标。这个比较简单，基本运算就搞定，done</p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>要识别图片，我们需要借助 Canvas，将图片绘制到 Canvas 上，来操作图像数据。</p>
<p><em>创建 Canvas 容器</em><br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> c4 = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>)</span><br><span class="line">c4.width = <span class="number">190</span></span><br><span class="line">c4.height = <span class="number">190</span></span><br><span class="line"><span class="keyword">const</span> ctx4 = c4.getContext(<span class="string">'2d'</span>)</span><br></pre></td></tr></table></figure></p>
<p><em>放入图片</em><br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 识别图片</span></span><br><span class="line"><span class="keyword">const</span> image = <span class="keyword">new</span> Image()</span><br><span class="line">image.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ctx4?.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, <span class="number">191</span>, <span class="number">190</span>) <span class="comment">// 绘制图片到 Canvas</span></span><br><span class="line">    <span class="keyword">const</span> color = analysisColor(ctx4?.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="number">191</span>, <span class="number">190</span>)) <span class="comment">// 分析颜色分布</span></span><br><span class="line">    setFontColor(color) <span class="comment">// 设置字体颜色</span></span><br><span class="line">    resolve(<span class="literal">true</span>) <span class="comment">// 完成Promise</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">image.src = images[<span class="string">`code-<span class="subst">$&#123;index&#125;</span>`</span>] <span class="comment">// 取本次随机图片的地址设置到 image</span></span><br></pre></td></tr></table></figure></p>
<h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><p>可是进展并没有那么顺利，背景图片不在同域下面，Canvas 不允许跨域的图片，怎么办呢？</p>
<p><img src="https://user-images.githubusercontent.com/10667077/112800951-e968e700-90a2-11eb-8087-29e1783e7666.png" alt="image"></p>
<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>既然 Canvas 不允许跨域的图片，在无后端代理支持的情况下，怎么高效的解决这个问题呢？(本地是跨域，线上同域)</p>
<p>把图片下载的本地！借助 XMLHttpRequest 将图片先缓存到本地转成 Blob 对象，Canvas 是可以访问本地 Blob 的数据。</p>
<p><em>下载图片，解决图片跨域问题</em><br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下载图片，解决图片跨域问题</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'get'</span>, images[<span class="string">`code-<span class="subst">$&#123;index&#125;</span>`</span>], <span class="literal">true</span>)</span><br><span class="line">xhr.responseType = <span class="string">'blob'</span></span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> <span class="title">loaded</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> blob = <span class="keyword">this</span>.response</span><br><span class="line">        image.src = <span class="built_in">window</span>.URL.createObjectURL(blob)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure></p>
<h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>解决了跨域问题，接下来就是分析颜色了，<em>getImageData</em> 取到的就是图片 rgba 的数组。<br>这个时候就可以将计算好的坐标，代入到图片 rgba 里面计算其分布。</p>
<p>说到这里就要补一下图像算法的知识了。</p>
<p>许多从自然场景中拍摄的图像，其色彩分布上会给人一种和谐、一致的感觉；反过来，在许多界面设计应用中，我们也希望选择的颜色可以达到这样的效果，但对一般人来说却并不那么容易，这属于色彩心理学的范畴。从彩色图像中提取其中的主题颜色，不仅可以用于色彩设计，也可用于图像分类、搜索、识别等，本文分别总结并实现图像主题颜色提取的几种算法，包括颜色量化法（ColorQuantization）、聚类(Clustering)和颜色建模的方法</p>
<h4 id="颜色量化算法"><a href="#颜色量化算法" class="headerlink" title="颜色量化算法"></a>颜色量化算法</h4><p>彩色图像一般采用RGB色彩模式，每个像素由RGB三个颜色分量组成。随着硬件的不断升级，彩色图像的存储由最初的8位、16位变成现在的24位、32真彩色。所谓全彩是指每个像素由8位（$2^8$=0~255）表示，红绿蓝三原色组合共有1677万（256 x 256 x 256 ）万种颜色，如果将RGB看作是三维空间中的三个坐标，可以得到下面这样一张色彩空间图：</p>
<p><img src="https://user-images.githubusercontent.com/10667077/112802124-62b50980-90a4-11eb-94f6-32305e435e32.png" alt="image"></p>
<p><a href="https://www.pyimagesearch.com/2014/12/01/complete-guide-building-image-search-engine-python-opencv/" target="_blank" rel="noopener">RGB color cube</a></p>
<p>当然，一张图像不可能包含所有颜色，我们将一张彩色图像所包含的像素投射到色彩空间中，可以更直观地感受图像中颜色的分布：</p>
<p><img src="https://user-images.githubusercontent.com/10667077/112802295-9728c580-90a4-11eb-9837-1ae563db6e5b.png" alt="image"></p>
<p>因此颜色量化问题可以用所有矢量量化（vector quantization, VQ）算法解决。这里采用开源图像处理库 Leptonica 中用到的两种算法：中位切分法、八叉树算法。</p>
<p>这里核心使用中位切分法（Median cut） 参考项目 <a href="https://github.com/lokesh/color-thief" target="_blank" rel="noopener">Github: color-thief</a></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算图片中间值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">analysisColor</span>(<span class="params">rgbaArray: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Todo something，返回该区域颜色的主色</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><p>到这里，这个需求就算实现了基本核心的部分了，但是在运行过程中，发现性能消耗极大。大部分花在了 Canvas 绘制和图像遍历上</p>
<p><img src="https://user-images.githubusercontent.com/10667077/112803557-02bf6280-90a6-11eb-92bd-5ec56f5fd983.png" alt="image"></p>
<p>怎么来优化这个过程呢？能不能只提取图像的特征信息进行分析呢？</p>
<p>带着这两个问题，查阅了图像特征算法相关的文献后，找到了 方向梯度直方图（Histogram of Oriented Gradient, HOG） 这个算法。</p>
<h3 id="基HOG特征"><a href="#基HOG特征" class="headerlink" title="基HOG特征"></a>基HOG特征</h3><p>方向梯度直方图（Histogram of Oriented Gradient, HOG）特征是一种在计算机视觉和图像处理中用来进行物体检测的特征描述子。它通过计算和统计图像局部区域的梯度方向直方图来构成特征。Hog特征结合 SVM分类器已经被广泛应用于图像识别中，尤其在行人检测中获得了极大的成功。需要提醒的是，HOG+SVM进行行人检测的方法是法国研究人员Dalal 在2005的CVPR上提出的，而如今虽然有很多行人检测算法不断提出，但基本都是以HOG+SVM的思路为主。</p>
<h4 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h4><p>在一副图像中，局部目标的表象和形状（appearance and shape）能够被梯度或边缘的方向密度分布很好地描述。（本质：梯度的统计信息，而梯度主要存在于边缘的地方）。</p>
<h4 id="具体的实现方法是"><a href="#具体的实现方法是" class="headerlink" title="具体的实现方法是"></a>具体的实现方法是</h4><p>首先将图像分成小的连通区域，我们把它叫细胞单元。然后采集细胞单元中各像素点的梯度的或边缘的方向直方图。最后把这些直方图组合起来就可以构成特征描述器。</p>
<h4 id="提高性能"><a href="#提高性能" class="headerlink" title="提高性能"></a>提高性能</h4><p>把这些局部直方图在图像的更大的范围内（我们把它叫区间或block）进行对比度归一化（contrast-normalized），所采用的方 法是：先计算各直方图在这个区间（block）中的密度，然后根据这个密度对区间中的各个细胞单元做归一化。通过这个归一化后，能对光照变化和阴影获得更 好的效果。</p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>与其他的特征描述方法相比，HOG有很多优点。首先，由于HOG是在图像的局部方格单元上操作，所以它对图像几何的和光学的形变都能保持很好的不 变性，这两种形变只会出现在更大的空间领域上。其次，在粗的空域抽样、精细的方向抽样以及较强的局部光学归一化等条件下，只要行人大体上能够保持直立的姿 势，可以容许行人有一些细微的肢体动作，这些细微的动作可以被忽略而不影响检测效果。因此HOG特征是特别适合于做图像中的人体检测的。</p>
<p><em>HOG特征提取算法的实现过程</em></p>
<p><img src="https://user-images.githubusercontent.com/10667077/112806597-89297380-90a9-11eb-9d06-bb303795770c.png" alt="image"></p>
<h3 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h3><p>基于此，来做我们自己的算法实现。将原图在绘制时，按照等比平铺，一步步的绘制到 Canvas 格子上去。随着尺寸的缩小，图像的特征依然得以保留，大致效果如下。</p>
<p><img src="https://user-images.githubusercontent.com/10667077/112809701-da873200-90ac-11eb-8168-abd491fad785.png" alt="image"></p>
<p>在实验多个不同的压缩尺寸后，发现 16x16 这个尺寸能兼顾特征与识别性能，再小一些的格子比如 8x8 就会丢失特征值。</p>
<p><em>贴一下大致的实现过程</em><br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> checkBack = <span class="keyword">async</span> (index: <span class="built_in">number</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 计算图片中间值</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">analysisColor</span>(<span class="params">rgbaArray: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Todo something，返回该区域颜色的主色</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> c4 = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>) <span class="comment">// 压缩尺寸计算用</span></span><br><span class="line">      c4.width = <span class="number">16</span></span><br><span class="line">      c4.height = <span class="number">16</span></span><br><span class="line">      <span class="keyword">const</span> ctx4 = c4.getContext(<span class="string">'2d'</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 识别图片</span></span><br><span class="line">      <span class="keyword">const</span> image = <span class="keyword">new</span> Image()</span><br><span class="line">      image.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        ctx4?.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">16</span>) <span class="comment">// 绘制图片到 Canvas</span></span><br><span class="line">        <span class="keyword">const</span> color = analysisColor(ctx4?.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">16</span>)) <span class="comment">// 分析颜色分布</span></span><br><span class="line">        setFontColor(color) <span class="comment">// 设置字体颜色</span></span><br><span class="line">        resolve(<span class="literal">true</span>) <span class="comment">// 完成Promise</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 下载图片，解决图片跨域问题</span></span><br><span class="line">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">      xhr.open(<span class="string">'get'</span>, images[<span class="string">`code-<span class="subst">$&#123;index&#125;</span>`</span>], <span class="literal">true</span>)</span><br><span class="line">      xhr.responseType = <span class="string">'blob'</span></span><br><span class="line">      xhr.onload = <span class="function"><span class="keyword">function</span> <span class="title">loaded</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> blob = <span class="keyword">this</span>.response</span><br><span class="line">          image.src = <span class="built_in">window</span>.URL.createObjectURL(blob)</span><br><span class="line">          <span class="built_in">console</span>.log(image.src)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      xhr.send()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我们再来看看优化后，分析过程的耗时，差不多提升了 100 倍的速度！！！</p>
<p><img src="https://user-images.githubusercontent.com/10667077/112803779-3d28ff80-90a6-11eb-82e1-c95be76b0dfc.png" alt="image"></p>
<p>最终的效果图:</p>
<p><img src="https://user-images.githubusercontent.com/10667077/112810638-cee83b00-90ad-11eb-8062-ac3a6b5ebda5.png" alt="image"></p>
]]></content>
      <categories>
        <category>Front-end</category>
      </categories>
  </entry>
  <entry>
    <title>烟火</title>
    <url>/20230113/%E7%83%9F%E7%81%AB/</url>
    <content><![CDATA[<p>今晨早起，记昨夜放烟花杂事有感</p>
<a id="more"></a>
<p class="poem"><br>烟火<br>张翔<br><br>不知天上逍遥仙<br>可食人间烟火味<br>倘若仙途有来路<br>不念凡尘飞升去<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>再见了</title>
    <url>/20120531/%E5%86%8D%E8%A7%81%E4%BA%86/</url>
    <content><![CDATA[<p>再见，真的说了再见了，作于永州，2012-05-31 22:43 笔</p>
<a id="more"></a>
<p class="poem"><br>再见了<br>张翔<br><br>说好的约定<br>都已经不见<br>你消失在人群中间<br>天空飘起了雨点<br>看不清你的脸<br>在某个路口擦肩<br>听到你熟悉的声音<br>怎么了<br>已经说过再见了<br>怎么了<br>你已不在身边了<br>都说了 忘了吧<br>别让思念再蔓延了<br>因为已经说再见了<br><br>相信是谎言<br>说好不留恋<br>我停在你微笑瞬间<br>翻出了陈旧信笺<br>没有结局出现<br>渐渐模糊的双眼<br>只剩下街口的路灯<br>怎么了<br>已经说过再见了<br>怎么了<br>你已不在身边了<br>都说了 忘了吧<br>别让思念再蔓延了<br>因为已经说再见了<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>酒馆</title>
    <url>/20120605/%E9%85%92%E9%A6%86/</url>
    <content><![CDATA[<p>酒馆，少了点什么，作于永州，2012-06-05 08:42 笔</p>
<a id="more"></a>
<p class="poem"><br>酒馆<br>张翔<br><br>良驹惹谁 奔受千里累<br>束谏急飞 宫门玉殿追<br>驿下小歇 折影身半垂<br>暮色倾颓 玉箫夜歌谁<br>还见带雁南飞<br>柳绿春花盼你归<br>香字成灰轻风吹<br><br>我在酒馆等你<br>几时归<br>昨夜酌酒<br>你不回<br>半倚门扉<br>小酒浅醉<br>细雨遮梅<br>你笑在朦胧中更美<br><br></p>

<p>（写到这里，有些思绪远了，只好停笔下来）</p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
  <entry>
    <title>夜醉了</title>
    <url>/20120603/%E5%A4%9C%E9%86%89%E4%BA%86/</url>
    <content><![CDATA[<p>夜醉了，作于永州，2012-06-04 03:38 笔</p>
<a id="more"></a>
<p class="poem"><br>夜醉了<br>张翔<br><br>夜深了 酒醒了<br>亲爱的 你好吗<br>夜静了 梦醒了<br>亲爱的 想你了<br>怎么说不出口快要忘记了<br>怎么留不下来快要离开了<br>月色被掩盖了<br>时间被冲淡了<br>你的脸 变得模糊了<br>熟悉的 也要陌生了<br>该不该放手<br>夜 醉了<br>该不该放手<br>要走了<br>该不该放手<br>夜 醉了<br>该不该放手<br>你走了<br>一个人的日子<br>平淡了<br>平平淡淡冷冷清清<br>就这样<br>夜 醉了<br><br></p>
]]></content>
      <categories>
        <category>诗词作品</category>
      </categories>
  </entry>
</search>
